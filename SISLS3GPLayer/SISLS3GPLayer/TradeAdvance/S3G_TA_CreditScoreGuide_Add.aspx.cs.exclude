
//Module Name      :   Origination
//Screen Name      :   S3GORGCreditScoreGuide_Add.aspx
//Created By       :   Kaliraj K
//Created Date     :   23-JUN-2010
//Purpose          :   To insert and update Credit score guide details

using System;
using System.Globalization;
using System.Resources;
using System.Collections.Generic;
using System.Web.UI;
using System.ServiceModel;
using System.Data;
using System.Text;
using S3GBusEntity.Origination;
using S3GBusEntity;
using System.Web.UI.WebControls;
using System.IO;
using System.Web.Security;
using System.Configuration;

public partial class S3GORGCreditScoreGuide_Add : ApplyThemeForProject
{
    #region intColCountalization

    CreditMgtServicesReference.CreditMgtServicesClient ObjCreditScoreClient;
    CreditMgtServices.S3G_ORG_CreditScoreDataTable ObjS3G_ORG_CreditScoreDataTable = new CreditMgtServices.S3G_ORG_CreditScoreDataTable();
    SerializationMode SerMode = SerializationMode.Binary;
    int intErrCode = 0;

    int intCreditScoreID = 0;
    int intUserID = 0;
    int intCompanyID = 0;
    double dScore = 0;
    //User Authorization
    string strMode = string.Empty;
    bool bCreate = false;
    bool bClearList = false;
    bool bModify = false;
    bool bQuery = false;
    bool bDelete = false;
    bool bMakerChecker = false;
    //Code end

    DataSet dsCreditScore = new DataSet();
    Dictionary<string, string> Procparam = null;
    Dictionary<string, string> dictLOB = null;
    bool bYearBind = true;
    string strXMLCreditScoreDet = "<Root><Details Desc='0' /></Root>";
    StringBuilder strbLOBDet = new StringBuilder();
    StringBuilder strbCreditScoreDet = new StringBuilder();
    string strRedirectPage = "../TradeAdvance/S3G_TA_CreditScoreGuide_View.aspx";
    string strKey = "Insert";
    string strAlert = "alert('__ALERT__');";
    string strRedirectPageAdd = "window.location.href='../TradeAdvance/S3G_TA_CreditScoreGuide_Add.aspx';";
    string strRedirectPageView = "window.location.href='../TradeAdvance/S3G_TA_CreditScoreGuide_View.aspx';";
    DataTable dtDefault = new DataTable();
    int iCount = 0;
    int intCountYearValue = 0;
    string strDateFormat = string.Empty;
    int iYearsPresent = 0;
    int intNoofYears = 0;
    DataTable dtCreditScore = new DataTable();
    #endregion

    #region PageLoad

    protected void Page_Load(object sender, EventArgs e)
    {
        this.Page.Title = FunPubGetPageTitles(enumPageTitle.PageTitle);

        iCount = 0;
        intNoofYears = 1;
        UserInfo ObjUserInfo = new UserInfo();
        intCompanyID = ObjUserInfo.ProCompanyIdRW;
        intUserID = ObjUserInfo.ProUserIdRW;
        S3GSession ObjS3GSession = new S3GSession();
        strDateFormat = ObjS3GSession.ProDateFormatRW;

        if (Request.QueryString["qsViewId"] != null)
        {
            FormsAuthenticationTicket fromTicket = FormsAuthentication.Decrypt(Request.QueryString.Get("qsViewId"));
            if (fromTicket != null)
            {
                intCreditScoreID = Convert.ToInt32(fromTicket.Name);
            }
            else
            {
                strAlert = strAlert.Replace("__ALERT__", "Invalid URL");
                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
            }
            strMode = Request.QueryString["qsMode"];
        }

        //User Authorization
        bCreate = ObjUserInfo.ProCreateRW;
        bModify = ObjUserInfo.ProModifyRW;
        bQuery = ObjUserInfo.ProViewRW;
        //Code end


        if (!IsPostBack)
        {
            FunPriBindLOB();
            FunPriBindLookup();
            ddlYear.Items.Add(new ListItem("Year1", "1"));

            hdnCreditScoreID.Value = intCreditScoreID.ToString();
            hdnCreditScoreUpdatedID.Value = intCreditScoreID.ToString();
            FunGetCreditScoreParameterDetails();
            txtTotalScore.Attributes.Add("readonly", "readonly");
            //User Authorization
            bClearList = Convert.ToBoolean(ConfigurationManager.AppSettings.Get("ClearListValues"));
            if ((intCreditScoreID > 0) && (strMode == "M"))
            {

                // Comaned Based on the UAT

                //if (hdnCanEdit.Value == "0")
                //{
                //    Utility.FunShowAlertMsg(this.Page, "Credit Score Guide details cannot be updated.Transaction exists");
                //    FunPriDisableControls(-1);
                //    chkActive.Enabled = true;
                //    btnSave.Enabled = true;
                //    ddlLOB.Focus();
                //}
                //else
                //{
                FunPriDisableControls(1);
                ddlYear.Focus();
                //}
            }
            else if ((intCreditScoreID > 0) && (strMode == "Q")) // Query // Modify
            {
                FunPriDisableControls(-1);
                ddlYear.Focus();
            }
            else
            {
                FunPriDisableControls(0);
                ddlLOB.Focus();
            }

            //Code end

        }

        if (grvCreditScore.FooterRow != null)
        {
            TextBox txtScore = (TextBox)grvCreditScore.FooterRow.FindControl("txtScore1F");
            txtScore.SetDecimalPrefixSuffix(10, 4, true, "Score");

            TextBox txtDiffPer = (TextBox)grvCreditScore.FooterRow.FindControl("txtDiffPerF");
            //txtDiffPer.SetDecimalPrefixSuffix(2, 2, true, "Difference %");
            txtDiffPer.SetPercentagePrefixSuffix(2, 2, true, "Difference %");
        }

    }


    #endregion

    #region Page Events

    /// <summary>
    /// This is used to save CreditScore details
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>

    protected void btnSave_Click(object sender, EventArgs e)
    {
        ObjCreditScoreClient = new CreditMgtServicesReference.CreditMgtServicesClient();
        try
        {
            dtCreditScore = (DataTable)ViewState["CreditScore"];
            if (dtCreditScore.Rows[0]["FieldAtt"].ToString() == "")
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Add atleast one Credit Score Details');", true);
                return;
            }

            foreach (GridViewRow GRow in grvCreditScore.Rows)
            {
                TextBox txtDescF = (TextBox)GRow.FindControl("txtDesc");
                DropDownList ddlFieldAttF = (DropDownList)GRow.FindControl("ddlFieldAtt");
                DropDownList ddlNumericF = (DropDownList)GRow.FindControl("ddlNumeric");
                TextBox txtDiffPerF = (TextBox)GRow.FindControl("txtDiffPer");
                TextBox txtDiffMarkF = (TextBox)GRow.FindControl("txtDiffMark");
                TextBox txtReqValueF = (TextBox)GRow.FindControl("txtReqValue1");
                DropDownList ddlYes = (DropDownList)GRow.FindControl("ddlYes1");
                TextBox txtScoreF = (TextBox)GRow.FindControl("txtScore1");


                if (txtDescF.Text.Trim() == string.Empty)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Description');", true);
                    txtDescF.Focus();
                    return;

                }
                else if (ddlFieldAttF.SelectedIndex == 0)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select the Field Attribute');", true);
                    ddlFieldAttF.Focus();
                    return;

                }
                else if ((ddlFieldAttF.SelectedValue != "4") && (ddlNumericF.SelectedIndex == 0))
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select the Numeric Operator');", true);
                    ddlNumericF.Focus();
                    return;
                }

                if (ddlFieldAttF.SelectedValue == "4")
                {

                    //Commende based on UAT
                    //Uncommmented for bug fixing - Bug_ID - 5404 - Kuppusamy.B - 22-Feb-2012

                    if (ddlYes.SelectedIndex == 0)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select Required Parameter');", true);
                        ddlYes.Focus();
                        return;
                    }
                }
                if ((ddlFieldAttF.SelectedValue != "4") && (txtReqValueF.Text.Trim() == string.Empty))
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Required Parameter');", true);
                    txtReqValueF.Focus();
                    return;

                }

                if (ddlFieldAttF.SelectedValue == "4")
                {
                    if (ddlYes.SelectedIndex > 0 && txtScoreF.Text.Trim() == string.Empty)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Score');", true);
                        txtScoreF.Focus();
                        return;
                    }
                }
                else if (txtScoreF.Text.Trim() == string.Empty && (txtReqValueF.Text.Trim() != string.Empty))
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Score');", true);
                    txtScoreF.Focus();
                    return;

                }
                if (txtScoreF.Text.Trim() == string.Empty && (txtReqValueF.Text.Trim() == string.Empty))
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Score');", true);
                    txtScoreF.Focus();
                    return;
                }
                if (txtScoreF.Text == ".")
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter a valid Score');", true);
                    txtScoreF.Focus();
                    return;
                }
                decimal  tempScore;
                tempScore = Convert.ToDecimal(txtScoreF.Text);

                if (tempScore == 0)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Score cannot be Zero');", true);
                    txtScoreF.Focus();
                    return;
                }              

                if (ddlFieldAttF.SelectedValue == "1" && (txtReqValueF.Text.Trim() != string.Empty))
                {
                    if (txtReqValueF.Text.Contains("."))
                    {
                        if (txtReqValueF.Text.Length - 1 != txtReqValueF.Text.Replace(".", "").Length)
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid Amount');", true);
                            txtReqValueF.Focus();
                            return;
                        }
                        int RatioSep = txtReqValueF.Text.IndexOf('.');
                        if (txtReqValueF.Text.Length - 1 == txtReqValueF.Text.IndexOf('.'))
                        {
                            txtReqValueF.Text = txtReqValueF.Text + "00";
                        }
                        if (RatioSep == 0)
                        {
                            txtReqValueF.Text = "0" + txtReqValueF.Text;
                        }
                    }
                    double temp;
                    temp = Convert.ToDouble(txtReqValueF.Text);
                    if (temp == 0)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('The Required Parameter should be greater than Zero');", true);
                        txtReqValueF.Focus();
                        return;
                    }
                }

                // Modified Based on UAT
                //if ((ddlFieldAttF.SelectedValue != "4") && (ddlFieldAttF.SelectedValue != "5") && (txtDiffPerF.Text.Trim() == string.Empty))
                //{
                //    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Difference %');", true);
                //    txtDiffPerF.Focus();
                //    return;

                //}
                if ((ddlFieldAttF.SelectedValue != "4") && (ddlFieldAttF.SelectedValue != "5") && (txtDiffMarkF.Text.Trim() == string.Empty) && (txtDiffPerF.Text.Trim() != string.Empty))
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Difference Mark');", true);
                    txtDiffMarkF.Focus();
                    return;
                }

                if ((ddlFieldAttF.SelectedValue == "2") && (txtReqValueF.Text.Trim() != string.Empty))
                {
                    if (txtReqValueF.Text.Contains("."))
                    {
                        if (txtReqValueF.Text.Length - 1 != txtReqValueF.Text.Replace(".", "").Length)
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid Percentage');", true);
                            txtReqValueF.Focus();
                            return;
                        }
                        int RatioSep = txtReqValueF.Text.IndexOf('.');
                        if (txtReqValueF.Text.Length - 1 == txtReqValueF.Text.IndexOf('.'))
                        {
                            txtReqValueF.Text = txtReqValueF.Text + "00";
                        }
                        if (RatioSep == 0)
                        {
                            txtReqValueF.Text = "0" + txtReqValueF.Text;
                        }
                    }
                }

                if ((ddlFieldAttF.SelectedValue == "2") && (txtReqValueF.Text.Trim() != string.Empty))
                {
                    if (txtReqValueF.Text.Contains("."))
                    {
                        int DecSep = txtReqValueF.Text.IndexOf('.');
                        string Frac = txtReqValueF.Text.Substring(DecSep + 1);
                        if (Frac.Length >= 5)
                        {
                            Frac = Frac.Substring(0, 5);
                            string ActValue = txtReqValueF.Text.Substring(0, DecSep) + "." + Frac;
                            if (Convert.ToDecimal(ActValue) >= 100)
                            {
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Percentage value should not be greater than or equal to 100');", true);
                                txtReqValueF.Focus();
                                return;
                            }
                        }
                    }
                    else if (Convert.ToDecimal(txtReqValueF.Text) >= 100)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Percentage value should not be greater than or equal to 100');", true);
                        txtReqValueF.Focus();
                        return;
                    }
                }

                if ((ddlFieldAttF.SelectedValue == "2") && (txtReqValueF.Text.Trim() != string.Empty) && Convert.ToDouble(txtReqValueF.Text) == 0)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Percentage value should not be Zero');", true);
                    txtReqValueF.Focus();
                    return;
                }

                if ((ddlFieldAttF.SelectedValue == "3") && (txtReqValueF.Text.Trim() != string.Empty))
                {
                    if (txtReqValueF.Text.Contains(":"))
                    {
                        if (txtReqValueF.Text.Length - 1 != txtReqValueF.Text.Replace(":", "").Length)
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid ratio');", true);
                            txtReqValueF.Focus();
                            return;
                        }

                        int RatioSep = txtReqValueF.Text.IndexOf(':');
                        if (RatioSep == 0 || txtReqValueF.Text.Length - 1 == txtReqValueF.Text.IndexOf(':'))
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid ratio');", true);
                            txtReqValueF.Focus();
                            return;
                        }

                        string FirstVal = txtReqValueF.Text.Substring(0, RatioSep);
                        string SecondVal = txtReqValueF.Text.Substring(RatioSep + 1);

                        if (FirstVal.Contains("."))
                        {
                            if (FirstVal.Length - 1 != FirstVal.Replace(".", "").Length)
                            {
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid ratio');", true);
                                txtReqValueF.Focus();
                                return;
                            }
                        }
                        if (SecondVal.Contains("."))
                        {
                            if (SecondVal.Length - 1 != SecondVal.Replace(".", "").Length)
                            {
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid ratio');", true);
                                txtReqValueF.Focus();
                                return;
                            }
                        }

                        if (Convert.ToDouble(txtReqValueF.Text.Substring(0, RatioSep)) == 0 || Convert.ToDouble(txtReqValueF.Text.Substring(RatioSep + 1)) == 0)
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid ratio');", true);
                            txtReqValueF.Focus();
                            return;
                        }
                    }
                    else
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid ratio');", true);
                        txtReqValueF.Focus();
                        return;
                    }

                }

                if ((ddlFieldAttF.SelectedValue == "1") && (txtReqValueF.Text.Trim() != string.Empty))
                {
                    string[] temp;
                    temp = (txtReqValueF.Text).Split('.');
                    if (temp.Length > 2)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid Amount');", true);
                        txtReqValueF.Focus();
                        return;
                    }

                }

                if (txtDescF.Text.Trim() != string.Empty && ddlFieldAttF.SelectedIndex != 4 && ddlFieldAttF.SelectedIndex != 5)// || ddlFieldAttF.SelectedValue > 0)
                {
                    if (txtReqValueF.Text.Trim() == string.Empty)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Required Parameter');", true);
                        txtReqValueF.Focus();
                        return;
                    }
                    else
                    {
                        if (ddlYes.SelectedIndex != 0)
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select the Required Parameter');", true);
                            ddlYes.Focus();
                            return;
                        }
                    }
                }
               
                else
                {
                    if (txtReqValueF.Text.Trim() == string.Empty && ddlYes.SelectedIndex == 0)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select the Required Parameter');", true);
                        ddlYes.Focus();
                        return;
                    }
                }

                //Code added for Bug Fixing - ID - 5463 - Kuppusamy.B - Feb-29-2012
                //For 'Amount' and '=' ,difference mark and per not needed.
                if ((ddlFieldAttF.SelectedValue == "1") && (ddlNumericF.SelectedValue == "5") && (txtDiffPerF.Text != string.Empty) && (txtDiffMarkF.Text != string.Empty))
                {
                    txtDiffPerF.Text = string.Empty;
                    txtDiffMarkF.Text = string.Empty;
                    txtDiffPerF.ReadOnly = true;
                    txtDiffMarkF.ReadOnly = true;
                    //txtDiffMarkF.Attributes.Add("ContentEditable", "false");
                    //txtDiffPerF.Attributes.Add("ContentEditable", "false");
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Mark and Percentage not applicable for EQUAL TO operator ');", true);
                    ddlNumericF.Focus();
                    txtDiffMarkF.Attributes.Add("ContentEditable", "false");
                    txtDiffPerF.Attributes.Add("ContentEditable", "false");
                    //txtDiffMarkF.ReadOnly = true;
                    //txtDiffPerF.ReadOnly = true;
                    return;
                }



            }


            dtCreditScore = (DataTable)ViewState["CreditScore"];

            if (dtCreditScore.Rows[0]["FieldAtt"].ToString() == "")
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Add atleast one record');", true);
                return;
            }
            if (txtTotalScore.Text != "")
            {
                if (Convert.ToDecimal(txtTotalScore.Text) == 0)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Add atleast one valid Credit Score Details');", true);
                    return;
                }
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Add atleast one valid Credit Score Details');", true);
                return;
            }

            ObjS3G_ORG_CreditScoreDataTable = new CreditMgtServices.S3G_ORG_CreditScoreDataTable();
            CreditMgtServices.S3G_ORG_CreditScoreRow ObjCreditScoreRow;

            ObjCreditScoreRow = ObjS3G_ORG_CreditScoreDataTable.NewS3G_ORG_CreditScoreRow();

            ObjCreditScoreRow.Company_ID = intCompanyID;

            ObjCreditScoreRow.CreditScore_Guide_ID = Convert.ToInt32(hdnCreditScoreID.Value);

            ObjCreditScoreRow.LOB_ID = Convert.ToInt32(ddlLOB.SelectedValue);
            ObjCreditScoreRow.Product_ID = Convert.ToInt32(ddlProductCode.SelectedValue);
            ObjCreditScoreRow.Constitution_ID = Convert.ToInt32(ddlConstitution.SelectedValue);
            ObjCreditScoreRow.NoOfYears = Convert.ToInt32(txtNoofYears.Text);
            ObjCreditScoreRow.YearValue = Convert.ToInt32(ddlYear.SelectedValue).ToString();
            ObjCreditScoreRow.Created_By = intUserID;
            ObjCreditScoreRow.Is_Active = chkActive.Checked;

            if (!FunPriGenerateCreditScoreParameterXMLDet())
            {
                return;
            }
            ObjCreditScoreRow.XMLCreditScoreParameterValues = strXMLCreditScoreDet;

            ObjS3G_ORG_CreditScoreDataTable.AddS3G_ORG_CreditScoreRow(ObjCreditScoreRow);


            int outNoofYear = 0;
            int outCreditScoreID = 0;
            intErrCode = ObjCreditScoreClient.FunPubCreateTACreditScoreDetails(out outNoofYear, out outCreditScoreID, SerMode, ClsPubSerialize.Serialize(ObjS3G_ORG_CreditScoreDataTable, SerMode));

            if (intErrCode == 0)
            {
                if ((intCreditScoreID > 0) || (hdnCreditScoreUpdatedID.Value != "0"))
                {
                    FunGetCreditScoreParameterDetails();

                    if (ddlYear.Items.Count > 1)
                    {
                        //Added by Thangam M on 18/Oct/2012 to avoid double save click
                        btnSave.Enabled = false;
                        //End here

                        strAlert = "Credit Score Guide updated successfully ";
                        strAlert += @"\n\nWould you like to modify other years?";
                        strAlert = "if(confirm('" + strAlert + "')){window.location.href='../TradeAdvance/S3G_TA_CreditScoreGuide_Add.aspx?" + Request.QueryString + "';}else {" + strRedirectPageView + "}";
                        strRedirectPageView = "";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
                    }
                    //UAT
                    else
                    {
                        //Added by Thangam M on 18/Oct/2012 to avoid double save click
                        btnSave.Enabled = false;
                        //End here

                        strAlert = strAlert.Replace("__ALERT__", "Credit Score Guide Updated Successfully");
                        ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
                    }

                    FunPriBindYear(outNoofYear);
                }
                else
                {
                    //Added by Thangam M on 18/Oct/2012 to avoid double save click
                    btnSave.Enabled = false;
                    //End here

                    //Utility.FunShowAlertMsg(this.Page, "Credit Score Guide details added successfully for " + ddlYear.SelectedItem.Text);
                    if (ddlYear.Items.Count == 6)
                    {
                        strAlert = "Credit Score Guide details added successfully ";
                        strAlert += @"\n\nWould you like to add one more record?";
                        strAlert = "if(confirm('" + strAlert + "')){" + strRedirectPageAdd + "}else {" + strRedirectPageView + "}";
                        strRedirectPageView = "";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
                    }
                    else
                    {
                        strAlert = "Credit Score Guide details added successfully for " + ddlYear.SelectedItem.Text;
                        strAlert += @"\n\nWould you like to add one more Year?";
                        strAlert = "if(confirm('" + strAlert + "')){" + "}else {" + strRedirectPageView + "}";
                        strRedirectPageView = "";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
                        lblErrorMessage.Text = string.Empty;

                        hdnCreditScoreID.Value = outCreditScoreID.ToString();
                        FunGetCreditScoreParameterDetails();
                        ddlYear.Focus();
                        grvCreditScore.FooterRow.Visible = false;
                        grvCreditScore.Columns[7].Visible = false;
                    }
                }
                ddlLOB.Enabled = false;
                ddlConstitution.Enabled = false;
                ddlProductCode.Enabled = false;
                btnClear.Enabled = false;
            }
            else if (intErrCode == 1)
            {
                Utility.FunShowAlertMsg(this.Page, "Active Credit Score Guide details exists for the given LOB, Product and Constitution combination");
                return;
            }
            else if (intErrCode == 2)
            {
                Utility.FunShowAlertMsg(this.Page, "Description is duplicated");
                return;
            }
            else if (intErrCode == 3)
            {
                Utility.FunShowAlertMsg(this.Page, "Credit Score Guide details cannot be updated.Transaction exists");
                return;
            }
            else if (intErrCode == 5)
            {
                Utility.FunShowAlertMsg(this.Page, "Active Credit Score Guide details exists for the given LOB, Product and Constitution combination");
                chkActive.Checked = false;
                return;
            }
            lblErrorMessage.Text = string.Empty;


        }
        catch (FaultException<UserMgtServicesReference.ClsPubFaultException> objFaultExp)
        {
            lblErrorMessage.Text = objFaultExp.Detail.ProReasonRW;
        }
        catch (Exception ex)
        {
            lblErrorMessage.Text = ex.Message;
        }
        finally
        {
            //if (ObjCreditScoreClient != null)
            ObjCreditScoreClient.Close();
        }
    }


    /// <summary>
    /// This is used to redirect page
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>

    protected void btnCancel_Click(object sender, EventArgs e)
    {
        Response.Redirect(strRedirectPage,false);
    }

    //protected void grvCreditScore_RowDataBound(object sender, GridViewRowEventArgs e)
    // {
    //     if (e.Row.RowType == DataControlRowType.DataRow)
    //     {
    //         CheckBox chkSel = (CheckBox)e.Row.FindControl("chkSel");
    //         Label lblCreditScoreID = (Label)e.Row.FindControl("lblCreditScoreID");
    //         if (lblCreditScoreID.Text == hdnCreditScore.Value)
    //         {
    //             chkSel.Checked = true;
    //         }
    //     }
    // }

    protected void ddlLOB_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            FunPriBindConstitutionProduct();
        }
        catch (FaultException<UserMgtServicesReference.ClsPubFaultException> objFaultExp)
        {
            lblErrorMessage.Text = objFaultExp.Detail.ProReasonRW;
        }
        catch (Exception ex)
        {
            lblErrorMessage.Text = ex.Message;
        }
    }

    /// <summary>
    /// This is used to clear data
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>

    protected void btnClear_Click(object sender, EventArgs e)
    {
        try
        {
            ddlLOB.SelectedIndex = 0;
            ddlConstitution.SelectedIndex = 0;
            ddlYear.SelectedIndex = 0;
            ddlProductCode.SelectedIndex = 0;
            FunPriBindLookup();
            FunGetCreditScoreParameterDetails();
        }
        catch (FaultException<UserMgtServicesReference.ClsPubFaultException> objFaultExp)
        {
            lblErrorMessage.Text = objFaultExp.Detail.ProReasonRW;
        }
        catch (Exception ex)
        {
            lblErrorMessage.Text = ex.Message;
        }
    }

    protected void grvCreditScore_RowCommand(object sender, System.Web.UI.WebControls.GridViewCommandEventArgs e)
    {
        DataRow dr;
        if (e.CommandName == "AddNew")
        {
            TextBox txtDescF = (TextBox)grvCreditScore.FooterRow.FindControl("txtDescF");
            DropDownList ddlFieldAttF = (DropDownList)grvCreditScore.FooterRow.FindControl("ddlFieldAttF");
            DropDownList ddlNumericF = (DropDownList)grvCreditScore.FooterRow.FindControl("ddlNumericF");
            TextBox txtDiffPerF = (TextBox)grvCreditScore.FooterRow.FindControl("txtDiffPerF");
            TextBox txtDiffMarkF = (TextBox)grvCreditScore.FooterRow.FindControl("txtDiffMarkF");
            TextBox txtReqValueF = (TextBox)grvCreditScore.FooterRow.FindControl("txtReqValue1F");
            DropDownList ddlYes = (DropDownList)grvCreditScore.FooterRow.FindControl("ddlYes1F");
            TextBox txtScoreF = (TextBox)grvCreditScore.FooterRow.FindControl("txtScore1F");


            if (txtDescF.Text.Trim() == string.Empty)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Description');", true);
                txtDescF.Focus();
                return;

            }
            else if (ddlFieldAttF.SelectedIndex == 0)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select the Field Attribute');", true);
                ddlFieldAttF.Focus();
                return;

            }
            else if ((ddlFieldAttF.SelectedValue != "4") && (ddlNumericF.SelectedIndex == 0))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select the Numeric Operator');", true);
                ddlNumericF.Focus();
                return;
            }

            if (ddlFieldAttF.SelectedValue == "4")
            {
                // Uncommmented for bug fixing - Bug_ID - 5404 - Kuppusamy.B - 22-Feb-2012
                if (ddlYes.SelectedIndex == 0)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select Required Parameter');", true);
                    ddlYes.Focus();
                    return;
                }
            }

            //if ((ddlFieldAttF.SelectedValue == "4") && (txtReqValueF.Text.Trim() == string.Empty))
            //{
            //    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select the Required Parameter');", true);
            //    txtReqValueF.Focus();
            //    return;

            //}

            // Commanded based on the UAT

            //if ((ddlFieldAttF.SelectedValue != "4") && (txtReqValueF.Text.Trim() == string.Empty))
            //{
            //    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Required Parameter');", true);
            //    txtReqValueF.Focus();
            //    return;

            //}
            if ((ddlFieldAttF.SelectedValue != "4") && (txtReqValueF.Text.Trim() == string.Empty))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Required Parameter');", true);
                txtReqValueF.Focus();
                return;

            }

            if (ddlFieldAttF.SelectedValue == "4")
            {
                if (ddlYes.SelectedIndex > 0 && txtScoreF.Text.Trim() == string.Empty)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Score');", true);
                    txtScoreF.Focus();
                    return;
                }
            }
            if (txtScoreF.Text.Trim() == string.Empty && (txtReqValueF.Text.Trim() != string.Empty))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Score');", true);
                txtScoreF.Focus();
                return;

            }

            if (txtScoreF.Text == ".")
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter a valid Score');", true);
                txtScoreF.Focus();
                return;
            }

            //if (txtScoreF.Text == "0")
            /* 
             *  Commented by Srivatsan to resolve the bug:6016. This is to validate the the Score to 0.
             */
            if (Convert.ToDecimal(txtScoreF.Text == "" ? "0.0" : txtScoreF.Text) == 0)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Score cannot be Zero');", true);
                txtScoreF.Focus();
                return;
            }

            if (ddlFieldAttF.SelectedValue == "1" && (txtReqValueF.Text.Trim() != string.Empty))
            {
                if (txtReqValueF.Text.Contains("."))
                {
                    if (txtReqValueF.Text.Length - 1 != txtReqValueF.Text.Replace(".", "").Length)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid Amount');", true);
                        txtReqValueF.Focus();
                        return;
                    }
                    int RatioSep = txtReqValueF.Text.IndexOf('.');
                    if (txtReqValueF.Text.Length - 1 == txtReqValueF.Text.IndexOf('.'))
                    {
                        txtReqValueF.Text = txtReqValueF.Text + "00";
                    }
                    if (RatioSep == 0)
                    {
                        txtReqValueF.Text = "0" + txtReqValueF.Text;
                    }
                }
                double temp;
                temp = Convert.ToDouble(txtReqValueF.Text);
                if (temp == 0)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('The Required Amount should be greater than Zero');", true);
                    txtReqValueF.Focus();
                    return;
                }
            }

            // Modified Based on UAT
            //if ((ddlFieldAttF.SelectedValue != "4") && (ddlFieldAttF.SelectedValue != "5") && (txtDiffPerF.Text.Trim() == string.Empty))
            //{
            //    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Difference %');", true);
            //    txtDiffPerF.Focus();
            //    return;

            //}
            if ((ddlFieldAttF.SelectedValue != "4") && (ddlFieldAttF.SelectedValue != "5") && (txtDiffMarkF.Text.Trim() == string.Empty) && (txtDiffPerF.Text.Trim() != string.Empty))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Difference Mark');", true);
                txtDiffMarkF.Focus();
                return;
            }

            if ((ddlFieldAttF.SelectedValue == "2") && (txtReqValueF.Text.Trim() != string.Empty))
            {
                if (txtReqValueF.Text.Contains("."))
                {
                    if (txtReqValueF.Text.Length - 1 != txtReqValueF.Text.Replace(".", "").Length)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid Percentage');", true);
                        txtReqValueF.Focus();
                        return;
                    }
                    int RatioSep = txtReqValueF.Text.IndexOf('.');
                    if (txtReqValueF.Text.Length - 1 == txtReqValueF.Text.IndexOf('.'))
                    {
                        txtReqValueF.Text = txtReqValueF.Text + "00";
                    }
                    if (RatioSep == 0)
                    {
                        txtReqValueF.Text = "0" + txtReqValueF.Text;
                    }
                }
            }

            if ((ddlFieldAttF.SelectedValue == "2") && (txtReqValueF.Text.Trim() != string.Empty))
            {
                if (txtReqValueF.Text.Contains("."))
                {
                    int DecSep = txtReqValueF.Text.IndexOf('.');
                    string Frac = txtReqValueF.Text.Substring(DecSep + 1);
                    if (Frac.Length >= 5)
                    {
                        Frac = Frac.Substring(0, 5);
                        string ActValue = txtReqValueF.Text.Substring(0, DecSep) + "." + Frac;
                        if (Convert.ToDecimal(ActValue) >= 100)
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Percentage value should not be greater than or equal to 100');", true);
                            txtReqValueF.Focus();
                            return;
                        }
                    }
                }
                else if ((txtReqValueF.Text.Trim() != string.Empty) && Convert.ToDecimal(txtReqValueF.Text) >= 100)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Percentage value should not be greater than or equal to 100');", true);
                    txtReqValueF.Focus();
                    return;
                }
            }

            //if ((ddlFieldAttF.SelectedValue == "2") && Convert.ToDecimal(txtReqValueF.Text) >= 100) 
            //{
            //    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Percentage value should not be greater than or equal to 100');", true);
            //    txtReqValueF.Focus();
            //    return;
            //}

            if ((ddlFieldAttF.SelectedValue == "2") && (txtReqValueF.Text.Trim() != string.Empty) && Convert.ToDouble(txtReqValueF.Text) == 0)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Percentage value should not be Zero');", true);
                txtReqValueF.Focus();
                return;
            }

            if ((ddlFieldAttF.SelectedValue == "3") && (txtReqValueF.Text.Trim() != string.Empty))
            {
                if (txtReqValueF.Text.Contains(":"))
                {
                    if (txtReqValueF.Text.Length - 1 != txtReqValueF.Text.Replace(":", "").Length)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid ratio');", true);
                        txtReqValueF.Focus();
                        return;
                    }

                    int RatioSep = txtReqValueF.Text.IndexOf(':');
                    if (RatioSep == 0 || txtReqValueF.Text.Length - 1 == txtReqValueF.Text.IndexOf(':'))
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid ratio');", true);
                        txtReqValueF.Focus();
                        return;
                    }

                    string FirstVal = txtReqValueF.Text.Substring(0, RatioSep);
                    string SecondVal = txtReqValueF.Text.Substring(RatioSep + 1);

                    if (FirstVal.Contains("."))
                    {
                        if (FirstVal.Length - 1 != FirstVal.Replace(".", "").Length)
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid ratio');", true);
                            txtReqValueF.Focus();
                            return;
                        }
                    }
                    if (SecondVal.Contains("."))
                    {
                        if (SecondVal.Length - 1 != SecondVal.Replace(".", "").Length)
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid ratio');", true);
                            txtReqValueF.Focus();
                            return;
                        }
                    }

                    if (Convert.ToDouble(txtReqValueF.Text.Substring(0, RatioSep)) == 0 || Convert.ToDouble(txtReqValueF.Text.Substring(RatioSep + 1)) == 0)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid ratio');", true);
                        txtReqValueF.Focus();
                        return;
                    }
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid ratio');", true);
                    txtReqValueF.Focus();
                    return;
                }

            }

            if ((ddlFieldAttF.SelectedValue == "1") && (txtReqValueF.Text.Trim() != string.Empty))
            {
                string[] temp;
                temp = (txtReqValueF.Text).Split('.');
                if (temp.Length > 2)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid Amount');", true);
                    txtReqValueF.Focus();
                    return;
                }

            }            

            //Code block commented to make textbox noneditable for Field Attribute - "Date" 
            //if (ddlFieldAttF.SelectedValue == "5")
            //{
            //    if (!string.IsNullOrEmpty(txtReqValueF.Text))
            //    {
            //        DateTime dt = new DateTime();
            //        if (!DateTime.TryParse(txtReqValueF.Text.Trim(), out dt))
            //        {
            //            Utility.FunShowAlertMsg(this, "Required date is not in correct format");
            //            txtReqValueF.Focus();
            //            return;
            //        }
            //    }
            //}

            if (txtDescF.Text.Trim() != string.Empty && ddlFieldAttF.SelectedIndex != 4 && ddlFieldAttF.SelectedIndex != 5)// || ddlFieldAttF.SelectedValue > 0)
            {
                if (txtReqValueF.Text.Trim() == string.Empty)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Required Parameter');", true);
                    txtReqValueF.Focus();
                    return;
                }
                else
                {
                    if (ddlYes.SelectedIndex != 0)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select the Required Parameter');", true);
                        ddlYes.Focus();
                        return;
                    }
                }
            }
            else
            {
                if (txtReqValueF.Text.Trim() == string.Empty && ddlYes.SelectedIndex == 0)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select the Required Parameter');", true);
                    ddlYes.Focus();
                    return;
                }
            }

            dtCreditScore = (DataTable)ViewState["CreditScore"];
            if (dtCreditScore.Rows[0]["FieldAtt"].ToString() == "")
            {
                dtCreditScore.Rows[0].Delete();
            }
            dr = dtCreditScore.NewRow();
            dr["CrScoreParam_ID"] = "0";
            dr["Desc"] = txtDescF.Text.Trim().Replace("  ", " ");
            dr["FieldAtt"] = ddlFieldAttF.SelectedValue;
            dr["NumericAtt"] = ddlNumericF.SelectedValue;
            if ((ddlFieldAttF.SelectedValue == "4") || (ddlFieldAttF.SelectedValue == "5"))
            {
                dr["DiffPer"] = "-1";
                dr["DiffMark"] = "-1";
            }
            else
            {
                dr["DiffPer"] = txtDiffPerF.Text.Trim();//== "" ? "-1" : txtDiffPerF.Text.Trim();
                dr["DiffMark"] = txtDiffMarkF.Text.Trim();// == "" ? "-1" : txtDiffMarkF.Text.Trim();
            }

            dr["ReqValue1"] = ddlFieldAttF.SelectedValue == "4" ? ddlYes.SelectedValue : txtReqValueF.Text.Trim();
            dr["Score1"] = txtScoreF.Text.Trim();

            dtCreditScore.Rows.Add(dr);
            FunPriBindLookup();
            grvCreditScore.DataSource = dtCreditScore;
            grvCreditScore.DataBind();
            ViewState["CreditScore"] = dtCreditScore;

            if (grvCreditScore.FooterRow != null)
            {
                TextBox txtScoreF1 = (TextBox)grvCreditScore.FooterRow.FindControl("txtScore1F");
                txtScoreF1.SetPercentagePrefixSuffix(10, 4, true,false,"Score");

                TextBox txtDiffPerF1 = (TextBox)grvCreditScore.FooterRow.FindControl("txtDiffPerF");
                txtDiffPerF1.SetPercentagePrefixSuffix(2, 2, true,false, "Difference %");
            }

            TextBox txtDescF1 = (TextBox)grvCreditScore.FooterRow.FindControl("txtDescF");
            txtDescF1.Focus();

            //TextBox txtaddFromAmt1 = (TextBox)grvCreditScore.FooterRow.FindControl("txtAddFromAmount");
            //txtaddFromAmt1.Text = Convert.ToString(Convert.ToDecimal(txtAddToAmount.Text.Trim()) + Convert.ToInt32("1"));

            //For 'Amount' and '=' ,difference mark and per not needed.
            if ((ddlFieldAttF.SelectedValue == "1") && (ddlNumericF.SelectedValue == "5") && (txtDiffPerF.Text != string.Empty) && (txtDiffMarkF.Text != string.Empty))
            {
                txtDiffPerF.Text = string.Empty;
                txtDiffMarkF.Text = string.Empty;
                txtDiffPerF.ReadOnly = true;
                txtDiffMarkF.ReadOnly = true;
                //ddlNumericF.Focus();
                txtDiffMarkF.Attributes.Add("ContentEditable", "false");
                txtDiffPerF.Attributes.Add("ContentEditable", "false");
                return;
            }
        }

    }

    protected void NoofYears_TextChanged(object sender, EventArgs e)
    {
        // for (int intColCount = 14; intColCount > 4; intColCount--)
        // {
        //     grvCreditScore.Columns[intColCount].Visible = true;
        // }
        //int intColVisbile = 2 + Convert.ToInt32(txtNoofYears.Text) * 2;
        //for (int intColCount = 14; intColCount > intColVisbile; intColCount--)
        // {
        //     grvCreditScorColumns[intColCount].Visible = false;
        // }
    }

    protected void ddlFieldAtt_SelectedIndexChanged(object sender, EventArgs e)
    {
        string strFieldAtt = ((DropDownList)sender).ClientID;
        string strVal = strFieldAtt.Substring(strFieldAtt.LastIndexOf("grvCreditScore_")).Replace("grvCreditScore_ctl", "");
        int gRowIndex = Convert.ToInt32(strVal.Substring(0, strVal.LastIndexOf("_")));
        gRowIndex = gRowIndex - 2;
        //if (strFieldAtt.)
        //grvCreditScore.Rows[gRowIndex].FindControl("txtReqValue1").Visible = false;
        //grvCreditScore.Rows[gRowIndex].FindControl("ddlYes1").Visible = true;

        DropDownList ddlFieldAtt = (DropDownList)grvCreditScore.Rows[gRowIndex].FindControl("ddlFieldAtt");

        DropDownList ddlNumericF = (DropDownList)grvCreditScore.Rows[gRowIndex].FindControl("ddlNumeric");
        TextBox txtDiffPerF = (TextBox)grvCreditScore.Rows[gRowIndex].FindControl("txtDiffPer");
        TextBox txtDiffMarkF = (TextBox)grvCreditScore.Rows[gRowIndex].FindControl("txtDiffMark");
        TextBox txtReqValue1 = (TextBox)grvCreditScore.Rows[gRowIndex].FindControl("txtReqValue1");
        TextBox txtScore = (TextBox)grvCreditScore.Rows[gRowIndex].FindControl("txtScore1");
        //Calendar
        DropDownList ddlYes = (DropDownList)grvCreditScore.Rows[gRowIndex].FindControl("ddlYes1");
        ddlYes.SelectedIndex = 0;
        txtReqValue1.Text = "";
        txtScore.Text = txtDiffPerF.Text = txtDiffMarkF.Text = "";

        txtReqValue1.Attributes.Remove("readOnly");

        AjaxControlToolkit.CalendarExtender ceReqVal1 = grvCreditScore.Rows[gRowIndex].FindControl("CalendarExtender1") as AjaxControlToolkit.CalendarExtender;
        AjaxControlToolkit.FilteredTextBoxExtender fteAmount = grvCreditScore.Rows[gRowIndex].FindControl("fteAmount1") as AjaxControlToolkit.FilteredTextBoxExtender;

        if (((DropDownList)sender).SelectedValue == "1")
        {
            fteAmount.ValidChars = ".";
        }
        else if (((DropDownList)sender).SelectedValue == "2")
        {
            fteAmount.ValidChars = ".";
        }
        else if (((DropDownList)sender).SelectedValue == "3")
        {
            fteAmount.ValidChars = ".:";
        }
        else
        {
            fteAmount.ValidChars = "";
        }

        if (((DropDownList)sender).SelectedValue == "5")//date
        {
            txtDiffPerF.Text = "";
            txtDiffMarkF.Text = "";
            txtDiffPerF.Enabled = false;
            txtDiffMarkF.Enabled = false;
            //ddlNumericF.SelectedIndex = 0;
            ddlNumericF.Enabled = true;
            //grvCreditScore.Rows[gRowIndex].FindControl("txtReqValue1").Visible = true;
            txtReqValue1.Visible = true;
            grvCreditScore.Rows[gRowIndex].FindControl("ddlYes1").Visible = false;

            //Calendar
            fteAmount.Enabled = false;
            //txtReqValue1.Attributes.Add("readonly", "readonly");
            ceReqVal1.Enabled = true;
            ceReqVal1.Format = strDateFormat;

            txtReqValue1.Attributes.Add("readOnly", "readOnly");

            if (PageMode != PageModes.Query)
            {
                txtScore.Attributes.Remove("onFocusIn");
                txtDiffPerF.Attributes.Remove("onFocusIn");

                txtReqValue1.Attributes.Add("onfocusOut", "javascript:FunRowControlsEnabled('" + txtReqValue1.ClientID + "','" + txtScore.ClientID + "','" + txtDiffPerF.ClientID + "','" + txtDiffMarkF.ClientID + "', '0', '" + ddlYear.ClientID + "','" + ddlFieldAtt.ClientID + "','" + ddlNumericF.ClientID + "');");
                txtScore.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtReqValue1.ClientID + "','" + txtScore.ClientID + "');");
                txtDiffPerF.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtReqValue1.ClientID + "','" + txtDiffPerF.ClientID + "');");
            }
        }
        else if (((DropDownList)sender).SelectedValue == "4")//text
        {
            txtDiffPerF.Text = "";
            txtDiffMarkF.Text = "";
            txtDiffPerF.Enabled = false;
            txtDiffMarkF.Enabled = false;
            ddlNumericF.SelectedIndex = 0;
            ddlNumericF.Enabled = false;
            grvCreditScore.Rows[gRowIndex].FindControl("txtReqValue1").Visible = false;
            grvCreditScore.Rows[gRowIndex].FindControl("ddlYes1").Visible = true;

            if (PageMode != PageModes.Query)
            {
                txtScore.Attributes.Remove("onFocusIn");
                txtDiffPerF.Attributes.Remove("onFocusIn");

                ddlYes.Attributes.Add("onchange", "javascript:FunReqScoreEnabled('" + ddlYes.ClientID + "','" + txtScore.ClientID + "');");
                txtScore.Attributes.Add("onFocusIn", "javascript:FunReqScoreEnabled('" + ddlYes.ClientID + "','" + txtScore.ClientID + "');");
                txtDiffPerF.Attributes.Add("onFocusIn", "javascript:FunReqScoreEnabled('" + ddlYes.ClientID + "','" + txtDiffPerF.ClientID + "');");
            }

            //Calendar
            fteAmount.Enabled = false;
            txtReqValue1.Attributes.Remove("readonly");
            txtReqValue1.ReadOnly = false;
            ceReqVal1.Enabled = false;
        }
        //else if (((DropDownList)sender).SelectedValue == "3")//ratio
        //{

        //}
        else
        {
            txtDiffPerF.Enabled = true;
            txtDiffMarkF.Enabled = true;
            ddlNumericF.Enabled = true;
            grvCreditScore.Rows[gRowIndex].FindControl("txtReqValue1").Visible = true;
            grvCreditScore.Rows[gRowIndex].FindControl("ddlYes1").Visible = false;

            //Calendar
            fteAmount.Enabled = true;
            txtReqValue1.Attributes.Remove("readonly");
            ceReqVal1.Enabled = false;
            txtReqValue1.ReadOnly = false;

            if (PageMode != PageModes.Query)
            {
                txtScore.Attributes.Remove("onFocusIn");
                txtDiffPerF.Attributes.Remove("onFocusIn");

                txtReqValue1.Attributes.Add("onfocusOut", "javascript:FunRowControlsEnabled('" + txtReqValue1.ClientID + "','" + txtScore.ClientID + "','" + txtDiffPerF.ClientID + "','" + txtDiffMarkF.ClientID + "', '0', '" + ddlYear.ClientID + "','" + ddlFieldAtt.ClientID + "','" + ddlNumericF.ClientID + "');");
                txtScore.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtReqValue1.ClientID + "','" + txtScore.ClientID + "');");
                txtDiffPerF.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtReqValue1.ClientID + "','" + txtDiffPerF.ClientID + "');");
            }
        }

        ddlFieldAtt.Focus();

    }

    protected void ddlFieldAttF_SelectedIndexChanged(object sender, EventArgs e)
    {
        //string strFieldAtt = ((DropDownList)sender).ClientID;
        //string strVal = strFieldAtt.Substring(strFieldAtt.LastIndexOf("grvCreditScore_")).Replace("grvCreditScore_ctl", "");
        //int gRowIndex = Convert.ToInt32(strVal.Substring(0, strVal.LastIndexOf("_")));
        //gRowIndex = gRowIndex - 2;

        DropDownList ddlFieldAttF = (DropDownList)grvCreditScore.FooterRow.FindControl("ddlFieldAttF");

        DropDownList ddlNumericF = (DropDownList)grvCreditScore.FooterRow.FindControl("ddlNumericF");
        TextBox txtDiffPerF = (TextBox)grvCreditScore.FooterRow.FindControl("txtDiffPerF");
        TextBox txtDiffMarkF = (TextBox)grvCreditScore.FooterRow.FindControl("txtDiffMarkF");
        TextBox txtReqValue1F = (TextBox)grvCreditScore.FooterRow.FindControl("txtReqValue1F");
        TextBox txtScore1F = (TextBox)grvCreditScore.FooterRow.FindControl("txtScore1F");
        //  DropDownList ddlFieldAttF1 = (DropDownList)grvCreditScore.FooterRow.FindControl("ddlFieldAttF");
        //Calendar
        DropDownList ddlYesF = (DropDownList)grvCreditScore.FooterRow.FindControl("ddlYes1F");
        ddlYesF.SelectedIndex = 0;
        txtReqValue1F.Text = "";
        txtScore1F.Text = txtDiffPerF.Text = txtDiffMarkF.Text = "";
        AjaxControlToolkit.CalendarExtender ceReqVal1F = grvCreditScore.FooterRow.FindControl("CalendarExtender1F") as AjaxControlToolkit.CalendarExtender;
        AjaxControlToolkit.FilteredTextBoxExtender fteAmount1F = grvCreditScore.FooterRow.FindControl("fteAmount1F") as AjaxControlToolkit.FilteredTextBoxExtender;
        // AjaxControlToolkit.MaskedEditExtender meeAmount = grvCreditScore.FooterRow.FindControl("MEExttxtReqValue1F") as AjaxControlToolkit.MaskedEditExtender;

        txtReqValue1F.Attributes.Remove("readOnly");

        if (((DropDownList)sender).SelectedValue == "1")
        {
            fteAmount1F.ValidChars = ".";
        }
        else if (((DropDownList)sender).SelectedValue == "2")
        {
            fteAmount1F.ValidChars = ".";
        }
        else if (((DropDownList)sender).SelectedValue == "3")
        {
            fteAmount1F.ValidChars = ".:";
        }
        else
        {
            fteAmount1F.ValidChars = "";
        }

        if (((DropDownList)sender).SelectedValue == "5")
        {
            txtDiffPerF.Text = "";
            txtDiffMarkF.Text = "";
            txtDiffPerF.Enabled = false;
            txtDiffMarkF.Enabled = false;
            //ddlNumericF.SelectedIndex = 0;
            ddlNumericF.Enabled = true;

            txtReqValue1F.Visible = true;
            ddlYesF.Visible = false;

            //txtReqValue1F.Attributes.Add("readonly", "readonly");
            //AjaxControlToolkit.CalendarExtender ceReqVal1F = grvCreditScore.FooterRow.FindControl("CalendarExtender1F") as AjaxControlToolkit.CalendarExtender;
            fteAmount1F.Enabled = false;
            ceReqVal1F.Enabled = true;
            ceReqVal1F.Format = strDateFormat;

            txtReqValue1F.Attributes.Add("readOnly", "readOnly");

            if (PageMode != PageModes.Query)
            {
                txtScore1F.Attributes.Remove("onFocusIn");
                txtDiffPerF.Attributes.Remove("onFocusIn");

                txtReqValue1F.Attributes.Add("onfocusOut", "javascript:FunRowControlsEnabled('" + txtReqValue1F.ClientID + "','" + txtScore1F.ClientID + "','" + txtDiffPerF.ClientID + "','" + txtDiffMarkF.ClientID + "', '1', '" + ddlYear.ClientID + "','" + ddlFieldAttF.ClientID + "','" + ddlNumericF.ClientID + "');");
                txtScore1F.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtReqValue1F.ClientID + "','" + txtScore1F.ClientID + "');");

                txtDiffPerF.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtReqValue1F.ClientID + "','" + txtDiffPerF.ClientID + "');");
            }
        }
        else if (((DropDownList)sender).SelectedValue == "4")
        {
            txtDiffPerF.Text = "";
            txtDiffMarkF.Text = "";
            txtDiffPerF.Enabled = false;
            txtDiffMarkF.Enabled = false;
            ddlNumericF.SelectedIndex = 0;
            ddlNumericF.Enabled = false;
            txtReqValue1F.Visible = false;
            ddlYesF.Visible = true;

            if (PageMode != PageModes.Query)
            {
                txtScore1F.Attributes.Remove("onFocusIn");
                txtDiffPerF.Attributes.Remove("onFocusIn");

                ddlYesF.Attributes.Add("onchange", "javascript:FunReqScoreEnabled('" + ddlYesF.ClientID + "','" + txtScore1F.ClientID + "');");
                txtScore1F.Attributes.Add("onFocusIn", "javascript:FunReqScoreEnabled('" + ddlYesF.ClientID + "','" + txtScore1F.ClientID + "');");
                txtDiffPerF.Attributes.Add("onFocusIn", "javascript:FunReqScoreEnabled('" + ddlYesF.ClientID + "','" + txtDiffPerF.ClientID + "');");
            }
            //Calendar
            txtScore1F.Attributes.Add("readonly", "readonly");
            fteAmount1F.Enabled = false;
            ceReqVal1F.Enabled = false;

        }
        //else if (((DropDownList)sender).SelectedValue == "1")
        //{
        //    //AjaxControlToolkit.FilteredTextBoxExtender fteAmount = grvCreditScore.Rows[gRowIndex].FindControl("fteAmount1") as AjaxControlToolkit.FilteredTextBoxExtender;


        //  //  meeAmount.Enabled = true;
        //}
        else
        {
            txtDiffPerF.Enabled = true;
            txtDiffMarkF.Enabled = true;
            ddlNumericF.Enabled = true;
            txtReqValue1F.Visible = true;
            ddlYesF.Visible = false;

            //Calendar
            fteAmount1F.Enabled = true;
            txtReqValue1F.Attributes.Remove("readonly");
            ceReqVal1F.Enabled = false;

            if (PageMode != PageModes.Query)
            {
                txtScore1F.Attributes.Remove("onFocusIn");
                txtDiffPerF.Attributes.Remove("onFocusIn");

                txtReqValue1F.Attributes.Add("onfocusOut", "javascript:FunRowControlsEnabled('" + txtReqValue1F.ClientID + "','" + txtScore1F.ClientID + "','" + txtDiffPerF.ClientID + "','" + txtDiffMarkF.ClientID + "','1', '" + ddlYear.ClientID + "','" + ddlFieldAttF.ClientID + "','" + ddlNumericF.ClientID + "');");
                txtScore1F.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtReqValue1F.ClientID + "','" + txtScore1F.ClientID + "');");
                txtDiffPerF.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtReqValue1F.ClientID + "','" + txtDiffPerF.ClientID + "');");
            }
        }
        // DropDownList ddlFieldAtt = null;
        //foreach (GridViewRow grvData in grvCreditScore.Rows[)
        //{
        //    ddlFieldAtt = ((DropDownList)grvData.FindControl("ddlFieldAtt"));
        //    if ((strFieldAtt == ddlFieldAtt.ClientID))
        //    {

        //    }
        //}

        ddlFieldAttF.Focus();
    }



    protected void ddlYear_SelectedIndexChanged(object sender, EventArgs e)
    {
        bYearBind = false;
        FunGetCreditScoreParameterDetails();
    }

    protected void grvCreditScoreYearValues_RowDataBound(object sender, GridViewRowEventArgs e)
    {

        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            DataTable dtYear = new DataTable();
            dtYear = (DataTable)ViewState["CreditScoreYear"];
            if ((dtYear != null) && (dtYear.Rows[intCountYearValue]["Field_AttributeID"].ToString() == "5"))
            {
                string strReqParam1 = dtYear.Rows[intCountYearValue]["ReqParam1"].ToString();
                string strReqParam2 = dtYear.Rows[intCountYearValue]["ReqParam2"].ToString();
                string strReqParam3 = dtYear.Rows[intCountYearValue]["ReqParam3"].ToString();
                string strReqParam4 = dtYear.Rows[intCountYearValue]["ReqParam4"].ToString();
                string strReqParam5 = dtYear.Rows[intCountYearValue]["ReqParam5"].ToString();
                string strReqParam6 = dtYear.Rows[intCountYearValue]["ReqParam6"].ToString();

                Label lblReqParam1 = (Label)e.Row.FindControl("lblReqParam1");
                Label lblReqParam2 = (Label)e.Row.FindControl("lblReqParam2");
                Label lblReqParam3 = (Label)e.Row.FindControl("lblReqParam3");
                Label lblReqParam4 = (Label)e.Row.FindControl("lblReqParam4");
                Label lblReqParam5 = (Label)e.Row.FindControl("lblReqParam5");
                Label lblReqParam6 = (Label)e.Row.FindControl("lblReqParam6");

                lblReqParam1.Text = strReqParam1 != "" ? DateTime.Parse(strReqParam1, CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat) : "";
                lblReqParam2.Text = strReqParam2 != "" ? DateTime.Parse(strReqParam2, CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat) : "";
                lblReqParam3.Text = strReqParam3 != "" ? DateTime.Parse(strReqParam3, CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat) : "";
                lblReqParam4.Text = strReqParam4 != "" ? DateTime.Parse(strReqParam4, CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat) : "";
                lblReqParam5.Text = strReqParam5 != "" ? DateTime.Parse(strReqParam5, CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat) : "";
                lblReqParam6.Text = strReqParam6 != "" ? DateTime.Parse(strReqParam6, CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat) : "";

            }

            Label lblDescription = (Label)e.Row.FindControl("lblDescription");
            lblDescription.Text = dtYear.Rows[intCountYearValue]["Description"].ToString().Replace(" ", "&nbsp;");

            Label lblScore1 = (Label)e.Row.FindControl("lblScore1");
            Label lblScore2 = (Label)e.Row.FindControl("lblScore2");
            Label lblScore3 = (Label)e.Row.FindControl("lblScore3");
            Label lblScore4 = (Label)e.Row.FindControl("lblScore4");
            Label lblScore5 = (Label)e.Row.FindControl("lblScore5");
            Label lblScore6 = (Label)e.Row.FindControl("lblScore6");
            if (lblScore1 != null && lblScore1.Text != string.Empty)
                lblScore1.Text = Convert.ToDecimal(lblScore1.Text).ToString(Funsetsuffix());
            if (lblScore2 != null && lblScore2.Text != string.Empty)
                lblScore2.Text = Convert.ToDecimal(lblScore2.Text).ToString(Funsetsuffix());
            if (lblScore3 != null && lblScore3.Text != string.Empty)
                lblScore3.Text = Convert.ToDecimal(lblScore3.Text).ToString(Funsetsuffix());
            if (lblScore4 != null && lblScore4.Text != string.Empty)
                lblScore4.Text = Convert.ToDecimal(lblScore4.Text).ToString(Funsetsuffix());
            if (lblScore5 != null && lblScore5.Text != string.Empty)
                lblScore5.Text = Convert.ToDecimal(lblScore5.Text).ToString(Funsetsuffix());
            if (lblScore6 != null && lblScore6.Text != string.Empty)
                lblScore6.Text = Convert.ToDecimal(lblScore6.Text).ToString(Funsetsuffix());

            intCountYearValue++;
        }


    }

    protected void grvCreditScore_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        ObjCreditScoreClient = new CreditMgtServicesReference.CreditMgtServicesClient();
        try
        {
            intErrCode = 0;
            //DataTable dtDelete;
            dtCreditScore = (DataTable)ViewState["CreditScore"];

            //if ((dtCreditScore.Rows.Count == 1)&&(hdnDelete.Value=="0"))
            //{
            //    Utility.FunShowAlertMsg(this.Page, "All records cannot be deleted.");
            //    return;
            //}

            int intCreditScoreParamId = Convert.ToInt32(dtCreditScore.Rows[e.RowIndex]["CrScoreParam_ID"].ToString());
            //dtDelete = (DataTable)ViewState["ClassTable"];
            if (intCreditScoreParamId != 0)
            {
                ObjCreditScoreClient = new CreditMgtServicesReference.CreditMgtServicesClient();
                intErrCode = ObjCreditScoreClient.FunPubDeleteCreditScoreParamDetails(intCreditScoreParamId);
            }
            bool bNewRow = false;
            if (intErrCode == 1)
            {
                Utility.FunShowAlertMsg(this.Page, "Record cannot be deleted.Transaction exists");
                return;
            }
            else if (intErrCode == 2)
            {
                Utility.FunShowAlertMsg(this.Page, "All records cannot be deleted.There should be one parameter in Credit Score Guide");
                return;
            }
            else
            {
                dtCreditScore.Rows.RemoveAt(e.RowIndex);
                if (dtCreditScore.Rows.Count <= 0)
                {
                    DataRow dr;
                    //dtCreditScore.Columns.Add("CrScoreParam_ID");
                    //dtCreditScore.Columns.Add("Desc");
                    //dtCreditScore.Columns.Add("FieldAtt");
                    //dtCreditScore.Columns.Add("NumericAtt");
                    //dtCreditScore.Columns.Add("DiffPer");
                    //dtCreditScore.Columns.Add("DiffMark");
                    //for (int intColCount = 1; intColCount <= intNoofYears; intColCount++)
                    //{
                    //    dtCreditScore.Columns.Add("ReqValue" + intColCount.ToString());
                    //    dtCreditScore.Columns.Add("Score" + intColCount.ToString());
                    //}
                    dr = dtCreditScore.NewRow();
                    dtCreditScore.Rows.Add(dr);
                    bNewRow = true;
                    //dtCreditScore = null;
                }
                FunPriBindLookup();
                grvCreditScore.DataSource = dtCreditScore;
                grvCreditScore.DataBind();
                if (bNewRow)
                {
                    grvCreditScore.Rows[0].Visible = false;
                }
                ViewState["CreditScore"] = dtCreditScore;
                if (intCreditScoreParamId != 0)
                {
                    DataTable dtYear = new DataTable();
                    dtYear = (DataTable)ViewState["CreditScoreYear"];
                    dtYear.Rows.RemoveAt(e.RowIndex);
                    if (dtYear.Rows.Count <= 0)
                        dtYear = null;
                    grvCreditScoreYearValues.DataSource = dtYear;
                    grvCreditScoreYearValues.DataBind();
                    ViewState["CreditScoreYear"] = dtYear;
                }


            }
        }
        catch (Exception ex)
        {
            throw ex;

        }
        finally
        {
            ObjCreditScoreClient.Close();
        }
    }

    protected void grvCreditScore_RowDataBound(object sender, GridViewRowEventArgs e)
    {


        DataTable dtDefaultNew;
        string strReqValue = string.Empty;
        DataView dvSearchView;
        if (e.Row.RowType == DataControlRowType.Footer)
        {

            if (dtDefault != null)
            {
                DropDownList ddlFieldF = (DropDownList)e.Row.FindControl("ddlFieldAttF");
                DropDownList ddlNumericF = (DropDownList)e.Row.FindControl("ddlNumericF");
                DropDownList ddlYesF = (DropDownList)e.Row.FindControl("ddlYes1F");
                TextBox txtDiffPerF = (TextBox)e.Row.FindControl("txtDiffPerF");
                TextBox txtDiffMarkF = (TextBox)e.Row.FindControl("txtDiffMarkF");
                TextBox txtScoreF = ((TextBox)e.Row.FindControl("txtScore1F"));
                TextBox txtReqValue1F = ((TextBox)e.Row.FindControl("txtReqValue1F"));

                

                if (PageMode != PageModes.Query)
                {
                    txtDiffPerF.Attributes.Add("onfocusOut", "javascript:FunDiffMarkEnabled('" + txtDiffPerF.ClientID + "','" + txtDiffMarkF.ClientID + "');");
                    txtDiffMarkF.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtDiffPerF.ClientID + "','" + txtDiffMarkF.ClientID + "');");

                    ddlYesF.Attributes.Add("onchange", "javascript:FunReqScoreEnabled('" + ddlYesF.ClientID + "','" + txtScoreF.ClientID + "');");
                    txtReqValue1F.Attributes.Add("onfocusOut", "javascript:FunRowControlsEnabled('" + txtReqValue1F.ClientID + "','" + txtScoreF.ClientID + "','" + txtDiffPerF.ClientID + "','" + txtDiffMarkF.ClientID + "', '1', '" + ddlYear.ClientID + "','" + ddlFieldF.ClientID + "','" + ddlNumericF.ClientID + "');");
                    txtScoreF.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtReqValue1F.ClientID + "','" + txtScoreF.ClientID + "');");                    

                    txtDiffPerF.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtReqValue1F.ClientID + "','" + txtDiffPerF.ClientID + "');");
                }

                ddlYesF.Visible = false;
                dvSearchView = new DataView(dtDefault);
                dvSearchView.RowFilter = "[Type] LIKE 'ORG_FieldAttribute'";
                dtDefaultNew = dvSearchView.ToTable();
                ddlFieldF.FillDataTable(dtDefaultNew, "Value", "Name");
                dvSearchView.Dispose();

                dvSearchView = new DataView(dtDefault);
                dvSearchView.RowFilter = "[Type] LIKE 'ORG_NumericOperator'";
                dtDefaultNew = dvSearchView.ToTable();
                ddlNumericF.FillDataTable(dtDefaultNew, "Value", "Name");
                dvSearchView.Dispose();

                //for (int intColCount = 1; intColCount <= 1; intColCount++)
                //{
                //    DropDownList ddlYesF = (DropDownList)e.Row.FindControl("ddlYes" + intColCount.ToString() + "F");
                //    ddlYesF.Style.Add("display", "none");
                //    TextBox txtReqValF = (TextBox)e.Row.FindControl("txtReqValue" + intColCount.ToString() + "F");
                //    strReqValue += ",'" + ddlYesF.ClientID + "','" + txtReqValF.ClientID + "'";

                //}
                //ddlFieldF.Attributes.Add("onchange", "fnChangeAttribute('" + ddlFieldF.ClientID + "','" + ddlNumericF.ClientID+"'"+  strReqValue + ")");

                txtScoreF.Attributes.Add("onblur", "javascript:FunDiFFPerandMarkEnabled('" + ddlFieldF.ClientID + "','" + ddlNumericF.ClientID + "','" + txtDiffPerF.ClientID + "','" + txtDiffMarkF.ClientID + "');");                
            }
            if (ddlYear.SelectedIndex > 0)
            {
                e.Row.Visible = false;
            }
            if (strMode == "Q")
            {
                grvCreditScore.ShowFooter = false;
            }
        }

        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            //LinkButton lnkbtnDelete = (LinkButton)e.Row.FindControl("lnkbtnDelete");
            if ((dtCreditScore != null) && (dtCreditScore.Rows[iCount]["FieldAtt"].ToString() != ""))
            {
                DropDownList ddlField = (DropDownList)e.Row.FindControl("ddlFieldAtt");

                Label lblParamID = (Label)e.Row.FindControl("lblParamID");

                if (lblParamID.Text != "0")
                {
                    ddlField.Enabled = false;
                }

                DropDownList ddlNumeric = (DropDownList)e.Row.FindControl("ddlNumeric");
                DropDownList ddlYes = (DropDownList)e.Row.FindControl("ddlYes1");
                ddlYes.Visible = false;

                TextBox txtReqVal = ((TextBox)e.Row.FindControl("txtReqValue1"));
                TextBox txtScore = ((TextBox)e.Row.FindControl("txtScore1"));
                TextBox txtDiffPer = ((TextBox)e.Row.FindControl("txtDiffPer"));
                TextBox txtDiffMark = ((TextBox)e.Row.FindControl("txtDiffMark"));

                txtReqVal.Attributes.Remove("readOnly");

                if (PageMode == PageModes.Modify)
                {
                    LinkButton lnkbtnDelete = (LinkButton)e.Row.FindControl("lnkbtnDelete");
                    //added by saran on 22-Nov-2011 for bug raised by malolan.
                    //lnkbtnDelete.Enabled = false;
                }

                if (PageMode != PageModes.Query)
                {
                    txtDiffPer.Attributes.Add("onfocusOut", "javascript:FunDiffMarkEnabled('" + txtDiffPer.ClientID + "','" + txtDiffMark.ClientID + "');");
                    txtDiffMark.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtDiffPer.ClientID + "','" + txtDiffMark.ClientID + "');");

                    ddlYes.Attributes.Add("onchange", "javascript:FunReqScoreEnabled('" + ddlYes.ClientID + "','" + txtScore.ClientID + "');");

                    txtReqVal.Attributes.Add("onfocusOut", "javascript:FunRowControlsEnabled('" + txtReqVal.ClientID + "','" + txtScore.ClientID + "','" + txtDiffPer.ClientID + "','" + txtDiffMark.ClientID + "', '0', '" + ddlYear.ClientID + "','" + ddlField.ClientID + "','" + ddlNumeric.ClientID + "');");
                    txtScore.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtReqVal.ClientID + "','" + txtScore.ClientID + "');");
                    txtDiffPer.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtReqVal.ClientID + "','" + txtDiffPer.ClientID + "');");                    
                }

                dvSearchView = new DataView(dtDefault);
                dvSearchView.RowFilter = "[Type] LIKE 'ORG_FieldAttribute'";
                dtDefaultNew = dvSearchView.ToTable();
                ddlField.FillDataTable(dtDefaultNew, "Value", "Name");
                dvSearchView.Dispose();
                ddlField.SelectedValue = dtCreditScore.Rows[iCount]["FieldAtt"].ToString();
                txtScore.SetPercentagePrefixSuffix(10, 4, true,false,"Score");
                txtDiffPer.SetPercentagePrefixSuffix(2, 2, true,false, "Difference %");
                dvSearchView = new DataView(dtDefault); ;
                dvSearchView.RowFilter = "[Type] LIKE 'ORG_NumericOperator'";
                dtDefaultNew = dvSearchView.ToTable();
                ddlNumeric.FillDataTable(dtDefaultNew, "Value", "Name");
                dvSearchView.Dispose();
                ddlNumeric.SelectedValue = dtCreditScore.Rows[iCount]["NumericAtt"].ToString();

                txtScore.Attributes.Add("onblur", "javascript:FunDiFFPerandMarkEnabled('" + ddlField.ClientID + "','" + ddlNumeric.ClientID + "','" + txtDiffPer.ClientID + "','" + txtDiffMark.ClientID + "');");

                AjaxControlToolkit.CalendarExtender ceReqVal1 = e.Row.FindControl("CalendarExtender1") as AjaxControlToolkit.CalendarExtender;
                AjaxControlToolkit.FilteredTextBoxExtender fteAmount = e.Row.FindControl("fteAmount1") as AjaxControlToolkit.FilteredTextBoxExtender;

                if (ddlField.SelectedValue == "1")
                {
                    fteAmount.ValidChars = ".";
                }
                else if (ddlField.SelectedValue == "2")
                {
                    fteAmount.ValidChars = ".";
                }
                else if (ddlField.SelectedValue == "3")
                {
                    fteAmount.ValidChars = ".:";
                }
                else
                {
                    fteAmount.ValidChars = "";
                }

                if (ddlField.SelectedValue == "5")
                {
                    txtDiffPer.Enabled = false;
                    txtDiffMark.Enabled = false;
                    //ddlNumeric.Enabled = false;
                    txtReqVal.Visible = true;
                    ddlYes.Visible = false;

                    //Calendar

                    ceReqVal1.Enabled = true;
                    fteAmount.Enabled = false;
                    ceReqVal1.Format = strDateFormat;
                    //txtReqVal.Attributes.Add("readonly", "readonly");
                    txtReqVal.Text = Convert.ToString(dtCreditScore.Rows[iCount]["ReqValue1"].ToString() != "" ? DateTime.Parse(Utility.StringToDate(dtCreditScore.Rows[iCount]["ReqValue1"].ToString()).ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat) : "");
                    txtDiffPer.Text = "";
                    txtDiffMark.Text = "";

                    txtReqVal.Attributes.Add("readOnly", "readOnly");

                    if (PageMode != PageModes.Query)
                    {
                        txtScore.Attributes.Remove("onFocusIn");
                        txtDiffPer.Attributes.Remove("onFocusIn");

                        txtReqVal.Attributes.Add("onfocusOut", "javascript:FunRowControlsEnabled('" + txtReqVal.ClientID + "','" + txtScore.ClientID + "','" + txtDiffPer.ClientID + "','" + txtDiffMark.ClientID + "','0', '" + ddlYear.ClientID + "','" + ddlField.ClientID + "','" + ddlNumeric.ClientID + "');");
                        txtScore.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtReqVal.ClientID + "','" + txtScore.ClientID + "');");
                        txtDiffPer.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtReqVal.ClientID + "','" + txtDiffPer.ClientID + "');");
                    }
                }
                else if (ddlField.SelectedValue == "4")
                {
                    txtDiffPer.Text = "";
                    txtDiffMark.Text = "";
                    txtDiffPer.Enabled = false;
                    txtDiffMark.Enabled = false;
                    ddlNumeric.SelectedIndex = 0;
                    ddlNumeric.Enabled = false;
                    txtReqVal.Visible = false;
                    ddlYes.Visible = true;
                    ddlYes.SelectedValue = dtCreditScore.Rows[iCount]["ReqValue1"].ToString();

                    if (PageMode != PageModes.Query)
                    {
                        txtScore.Attributes.Remove("onFocusIn");
                        txtDiffPer.Attributes.Remove("onFocusIn");

                        ddlYes.Attributes.Add("onchange", "javascript:FunReqScoreEnabled('" + ddlYes.ClientID + "','" + txtScore.ClientID + "');");
                        txtScore.Attributes.Add("onFocusIn", "javascript:FunReqScoreEnabled('" + ddlYes.ClientID + "','" + txtScore.ClientID + "');");
                        txtDiffPer.Attributes.Add("onFocusIn", "javascript:FunReqScoreEnabled('" + ddlYes.ClientID + "','" + txtDiffPer.ClientID + "');");
                    }
                    txtScore.Attributes.Add("readonly", "readonly");
                    //Calendar
                    fteAmount.Enabled = false;
                    ceReqVal1.Enabled = false;
                }
                else
                {
                    txtDiffPer.Enabled = true;
                    txtDiffMark.Enabled = true;
                    ddlNumeric.Enabled = true;
                    txtReqVal.Visible = true;
                    ddlYes.Visible = false;

                    //Calendar
                    fteAmount.Enabled = true;
                    txtReqVal.ReadOnly = false;
                    ceReqVal1.Enabled = false;

                    if (PageMode != PageModes.Query)
                    {
                        txtScore.Attributes.Remove("onFocusIn");
                        txtDiffPer.Attributes.Remove("onFocusIn");

                        txtReqVal.Attributes.Add("onfocusOut", "javascript:FunRowControlsEnabled('" + txtReqVal.ClientID + "','" + txtScore.ClientID + "','" + txtDiffPer.ClientID + "','" + txtDiffMark.ClientID + "','0', '" + ddlYear.ClientID + "','" + ddlField.ClientID + "','" + ddlNumeric.ClientID + "');");
                        txtScore.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtReqVal.ClientID + "','" + txtScore.ClientID + "');");
                        txtDiffPer.Attributes.Add("onFocusIn", "javascript:FunDiffMarkEnabled('" + txtReqVal.ClientID + "','" + txtDiffPer.ClientID + "');");
                    }

                }

                //This is to disable desc,diffper,diffmark,fieldatt,numericope for all other years
                if (ddlYear.SelectedIndex > 0)
                {
                    TextBox txtDesc = (TextBox)e.Row.FindControl("txtDesc");
                    //TextBox txtDiffPer = (TextBox)e.Row.FindControl("txtDiffPer");
                    //TextBox txtDiffMark = (TextBox)e.Row.FindControl("txtDiffMark");
                    txtDesc.Enabled = false;
                    txtDiffPer.Enabled = false;
                    txtDiffMark.Enabled = false;
                    ddlField.Enabled = false;
                    ddlNumeric.Enabled = false;
                }

                dScore += txtScore.Text != "" ? Convert.ToDouble(txtScore.Text) : 0;
                iCount++;


                if (txtScore.Text != string.Empty)
                {
                    txtScore.Text = Convert.ToDecimal(txtScore.Text).ToString(Funsetsuffix());
                }

            }
            txtTotalScore.Text = dScore.ToString(Funsetsuffix());
            //if ((intCreditScoreID > 0) && (strMode == "Q"))
            //{
            //    lnkbtnDelete.Visible = false;
            //}

            //TextBox txtScoreF = (TextBox)grvCreditScore.FooterRow.FindControl("txtScore1F");
            //txtScoreF.SetDecimalPrefixSuffix(10, 4, true, "Score");

            //TextBox txtDiffPerF = (TextBox)grvCreditScore.FooterRow.FindControl("txtDiffPerF");
            //txtDiffPerF.SetDecimalPrefixSuffix(intCompanyID, 2, 2, true);



            if (strMode == "Q")
            {

            }
        }

    }

    #endregion

    #region Page Methods


    private void FunPriBindYear(int iYearsPresent)
    {
        if (bYearBind)
        {
            int index = ddlYear.SelectedIndex;
            ddlYear.Items.Clear();
            string strYear = "";
            string strYearValue = "";
            for (int intColCount = 1; intColCount <= iYearsPresent; intColCount++)
            {
                strYear = "Year" + (intColCount).ToString();
                strYearValue = (intColCount).ToString();
                ddlYear.Items.Add(new ListItem(strYear, strYearValue));
            }
            strYear = "Year" + (iYearsPresent + 1).ToString();
            strYearValue = (iYearsPresent + 1).ToString();
            if (iYearsPresent <= 5)
            {
                ddlYear.Items.Add(new ListItem(strYear, strYearValue));
            }
            ddlYear.SelectedIndex = index;
        }
    }

    /// <summary>
    /// to bind LOB and Product details
    /// </summary>
    private void FunPriBindLOB()
    {
        //LOB List7

        Procparam = new Dictionary<string, string>();
        Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
        Procparam.Add("@Program_ID", "221");
        if (intCreditScoreID == 0)
        {
            Procparam.Add("@Is_Active", "1");
        }
        Procparam.Add("@User_ID", intUserID.ToString());
        ddlLOB.BindDataTable(SPNames.LOBMaster, Procparam, new string[] { "LOB_ID", "LOB_Code", "LOB_Name" });

    }
    private void FunPriBindLookup()
    {
        dictLOB = new Dictionary<string, string>();
        dtDefault = Utility.GetDefaultData("S3G_ORG_GetCreditScoreLookup", dictLOB);

    }

    private void FunPriBindConstitutionProduct()
    {
        //Product Code
        Procparam = new Dictionary<string, string>();
        Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
        Procparam.Add("@LOB_ID", Convert.ToString(ddlLOB.SelectedValue));
        if (intCreditScoreID == 0)
        {
            Procparam.Add("@Is_Active", "1");
        }

        ddlProductCode.BindDataTable(SPNames.TA_ProductMaster, Procparam, new string[] { "Product_ID", "Product_Code", "Product_Name" });


        //Constitution
        Procparam = new Dictionary<string, string>();
        Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
        Procparam.Add("@LOB_ID", Convert.ToString(ddlLOB.SelectedValue));
        if (intCreditScoreID == 0)
        {
            Procparam.Add("@Is_Active", "1");
        }

        ddlConstitution.BindDataTable(SPNames.S3G_Get_ConstitutionMaster, Procparam, new string[] { "Constitution_ID", "ConstitutionName" });

    }

    /// <summary>
    /// This method is used to display User details
    /// </summary>
    private void FunGetCreditScoreParameterDetails()
    {
        ObjCreditScoreClient = new CreditMgtServicesReference.CreditMgtServicesClient();
        try
        {
            dtCreditScore = new DataTable();
            DataRow dr;
            dtCreditScore.Columns.Add("CrScoreParam_ID");
            dtCreditScore.Columns.Add("Desc");
            dtCreditScore.Columns.Add("FieldAtt");
            dtCreditScore.Columns.Add("NumericAtt");
            dtCreditScore.Columns.Add("DiffPer");
            dtCreditScore.Columns.Add("DiffMark");

            dtCreditScore.Columns["DiffPer"].DataType = typeof(string);
            dtCreditScore.Columns["DiffMark"].DataType = typeof(string);

            for (int intColCount = 1; intColCount <= intNoofYears; intColCount++)
            {
                dtCreditScore.Columns.Add("ReqValue" + intColCount.ToString());
                dtCreditScore.Columns.Add("Score" + intColCount.ToString());
            }
            dr = dtCreditScore.NewRow();
            dtCreditScore.Rows.Add(dr);

            if ((intCreditScoreID == 0) && (hdnCreditScoreID.Value == "0"))
            {
                ViewState["CreditScore"] = dtCreditScore;
                grvCreditScore.DataSource = dtCreditScore;
                grvCreditScore.DataBind();
                grvCreditScore.Rows[0].Visible = false;
                //for (int intColCount = 14; intColCount > 4; intColCount--)
                //{
                //    grvCreditScore.Columns[intColCount].Visible = false;
                //}

            }
            else
            {


                ObjS3G_ORG_CreditScoreDataTable = new CreditMgtServices.S3G_ORG_CreditScoreDataTable();
                CreditMgtServices.S3G_ORG_CreditScoreRow ObjCreditScoreRow = null;

                ObjCreditScoreRow = ObjS3G_ORG_CreditScoreDataTable.NewS3G_ORG_CreditScoreRow();

                ObjCreditScoreRow.Company_ID = intCompanyID;
                ObjCreditScoreRow.Created_By = intUserID;
                ObjCreditScoreRow.CreditScore_Guide_ID = Convert.ToInt32(hdnCreditScoreID.Value);
                ObjCreditScoreRow.YearValue = Convert.ToInt32(ddlYear.SelectedValue).ToString();

                ObjS3G_ORG_CreditScoreDataTable.AddS3G_ORG_CreditScoreRow(ObjCreditScoreRow);

                byte[] byteCreditScoreDetails = ObjCreditScoreClient.FunPubQueryTACreditScoreParameterDetails(SerMode, ClsPubSerialize.Serialize(ObjS3G_ORG_CreditScoreDataTable, SerMode));
                dsCreditScore = (DataSet)ClsPubSerialize.DeSerialize(byteCreditScoreDetails, SerializationMode.Binary, typeof(DataSet));

                if ((intCreditScoreID > 0) && (dsCreditScore.Tables[0].Rows.Count > 0))
                {
                    ddlLOB.SelectedValue = dsCreditScore.Tables[0].Rows[0]["LOB_ID"].ToString();
                    FunPriBindConstitutionProduct();
                    ddlProductCode.SelectedValue = dsCreditScore.Tables[0].Rows[0]["Product_ID"].ToString();
                    ddlConstitution.SelectedValue = dsCreditScore.Tables[0].Rows[0]["Constitution_ID"].ToString();
                    chkActive.Checked = Convert.ToBoolean(dsCreditScore.Tables[0].Rows[0]["Is_Active"].ToString());
                    hdnCanEdit.Value = dsCreditScore.Tables[0].Rows[0]["CanEdit"].ToString();
                }
                //if ((dsCreditScore.Tables[1].Rows.Count > 0))
                //{
                if (dsCreditScore.Tables[1].Rows.Count > 0)
                {
                    dtCreditScore = dsCreditScore.Tables[1].Copy();
                    ViewState["CreditScore"] = dtCreditScore;
                    FunPriBindLookup();
                    for (int i = 0; i <= dtCreditScore.Rows.Count - 1; i++)
                    {
                        if (!string.IsNullOrEmpty(dtCreditScore.Rows[i]["Score1"].ToString()) && Convert.ToDecimal(dtCreditScore.Rows[i]["Score1"].ToString()) == 0)
                        {
                            dtCreditScore.Rows[i]["Score1"] = "";
                        }
                    }
                    grvCreditScore.DataSource = dtCreditScore;
                    grvCreditScore.DataBind();
                }
                else
                {
                    FunPriBindLookup();
                    ViewState["CreditScore"] = dtCreditScore;
                    grvCreditScore.DataSource = dtCreditScore;
                    grvCreditScore.DataBind();
                    grvCreditScore.Rows[0].Visible = false;
                }
                if (dsCreditScore.Tables[2].Rows.Count > 0)
                {
                    int intNoofYear = Convert.ToInt32(dsCreditScore.Tables[0].Rows[0]["YearsPresent"].ToString());
                    ViewState["CreditScoreYear"] = dsCreditScore.Tables[2];
                    if (dsCreditScore.Tables[2].Rows.Count > 0)
                    {
                        dsCreditScore.Tables[2].Rows.Add();
                        grvCreditScoreYearValues.DataSource = FunSumScore(dsCreditScore.Tables[2]);
                        grvCreditScoreYearValues.DataBind();

                        for (int i = 0; i <= grvCreditScoreYearValues.Columns.Count - 1; i++)
                        {
                            grvCreditScoreYearValues.Rows[grvCreditScoreYearValues.Rows.Count - 1].Cells[i].Font.Bold = true;
                            grvCreditScoreYearValues.Rows[grvCreditScoreYearValues.Rows.Count - 1].Cells[i].CssClass = "styleGridHeader";
                        }
                    }
                    else
                    {
                        grvCreditScoreYearValues.DataSource = dsCreditScore.Tables[2];
                        grvCreditScoreYearValues.DataBind();
                    }
                    for (int intColCount = 14; intColCount > 4; intColCount--)
                    {
                        grvCreditScoreYearValues.Columns[intColCount].Visible = true;
                    }
                    int intColVisbile = 2 + (intNoofYear * 2);
                    for (int intColCount = 14; intColCount > intColVisbile; intColCount--)
                    {
                        grvCreditScoreYearValues.Columns[intColCount].Visible = false;
                    }
                }

                FunPriBindYear(Convert.ToInt32(dsCreditScore.Tables[0].Rows[0]["YearsPresent"].ToString()));


            }
            if (ddlYear.SelectedIndex > 0)
            {
                grvCreditScore.Columns[7].Visible = false;
            }
            else
            {
                grvCreditScore.Columns[7].Visible = true;
            }

            if (strMode == "")
            {
                if (ddlYear.SelectedIndex == ddlYear.Items.Count - 1)
                {
                    if (bCreate)
                    {
                        btnSave.Enabled = true;
                    }
                    else
                    {
                        btnSave.Enabled = false;
                        grvCreditScore.FooterRow.Visible = false;
                        grvCreditScore.Columns[7].Visible = false;
                    }
                }
                else
                {
                    btnSave.Enabled = false;
                    grvCreditScore.FooterRow.Visible = false;
                    grvCreditScore.Columns[7].Visible = false;
                }
            }
            else
            {
                //Based on UAT

                //grvCreditScore.FooterRow.Visible = false;
                //grvCreditScore.Columns[7].Visible = false;
            }
        }
        catch (FaultException<UserMgtServicesReference.ClsPubFaultException> objFaultExp)
        {
            lblErrorMessage.Text = objFaultExp.Detail.ProReasonRW;
        }
        catch (Exception ex)
        {
            lblErrorMessage.Text = ex.Message;
        }
        finally
        {
            dsCreditScore.Dispose();
            dsCreditScore = null;
            ObjCreditScoreClient.Close();
        }
    }

    private DataTable FunSumScore(DataTable tblCreditScore)
    {
        try
        {
            decimal dblScore1, dblScore2, dblScore3, dblScore4, dblScore5, dblScore6;
            dblScore1 = dblScore2 = dblScore3 = dblScore4 = dblScore5 = dblScore6 = 0;

            for (int i = 0; i <= tblCreditScore.Rows.Count - 2; i++)
            {
                DataRow DRow = tblCreditScore.Rows[i];

                if (!(string.IsNullOrEmpty(DRow["Score1"].ToString())))
                {
                    dblScore1 += Convert.ToDecimal(DRow["Score1"].ToString());
                }
                if (!(string.IsNullOrEmpty(DRow["Score2"].ToString())))
                {
                    dblScore2 += Convert.ToDecimal(DRow["Score2"].ToString());
                }
                if (!(string.IsNullOrEmpty(DRow["Score3"].ToString())))
                {
                    dblScore3 += Convert.ToDecimal(DRow["Score3"].ToString());
                }
                if (!(string.IsNullOrEmpty(DRow["Score4"].ToString())))
                {
                    dblScore4 += Convert.ToDecimal(DRow["Score4"].ToString());
                }
                if (!(string.IsNullOrEmpty(DRow["Score5"].ToString())))
                {
                    dblScore5 += Convert.ToDecimal(DRow["Score5"].ToString());
                }
                if (!(string.IsNullOrEmpty(DRow["Score6"].ToString())))
                {
                    dblScore6 += Convert.ToDecimal(DRow["Score6"].ToString());
                }
            }

            tblCreditScore.Rows[tblCreditScore.Rows.Count - 1]["Description"] = "Total";
            tblCreditScore.Rows[tblCreditScore.Rows.Count - 1]["Score1"] = dblScore1.ToString();
            tblCreditScore.Rows[tblCreditScore.Rows.Count - 1]["Score2"] = dblScore2.ToString();
            tblCreditScore.Rows[tblCreditScore.Rows.Count - 1]["Score3"] = dblScore3.ToString();
            tblCreditScore.Rows[tblCreditScore.Rows.Count - 1]["Score4"] = dblScore4.ToString();
            tblCreditScore.Rows[tblCreditScore.Rows.Count - 1]["Score5"] = dblScore5.ToString();
            tblCreditScore.Rows[tblCreditScore.Rows.Count - 1]["Score6"] = dblScore6.ToString();

            return tblCreditScore;

        }
        catch (Exception ex)
        {

            throw;
        }
    }

    private bool FunPriGenerateCreditScoreParameterXMLDet()
    {
        try
        {

            string strDesc = string.Empty;
            string strFieldAtt = string.Empty;
            string strNumericAtt = string.Empty;
            string strReqValue = string.Empty;
            string strScore = string.Empty;
            string strDiffPer = string.Empty;
            string strDiffMark = string.Empty;
            string strCrScoreParam_ID = string.Empty;

            TextBox txtDesc = null;
            DropDownList ddlFieldAtt = null;
            DropDownList ddlNumericAtt = null;
            TextBox txtReqVal = null;
            TextBox txtScore = null;
            TextBox txtDiffPer = null;
            TextBox txtDiffMark = null;
            Label lblParamID = null;
            DropDownList ddlYes = null;

            dtCreditScore = (DataTable)ViewState["CreditScore"];
            strbCreditScoreDet.Append("<Root>");

            foreach (GridViewRow grvData in grvCreditScore.Rows)
            {

                lblParamID = ((Label)grvData.FindControl("lblParamID"));
                txtDesc = ((TextBox)grvData.FindControl("txtDesc"));
                ddlFieldAtt = ((DropDownList)grvData.FindControl("ddlFieldAtt"));
                ddlNumericAtt = ((DropDownList)grvData.FindControl("ddlNumeric"));
                txtReqVal = ((TextBox)grvData.FindControl("txtReqValue1"));
                txtScore = ((TextBox)grvData.FindControl("txtScore1"));
                txtDiffPer = ((TextBox)grvData.FindControl("txtDiffPer"));
                txtDiffMark = ((TextBox)grvData.FindControl("txtDiffMark"));
                ddlYes = (DropDownList)grvData.FindControl("ddlYes1");
                //txtReqVal.Visible = false;
                //ddlYes.Visible = false;

                //if (txtDesc.Text.Trim() == string.Empty)
                //{
                //    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Description');", true);
                //    txtDesc.Focus();
                //    return false;

                //}
                //else if (ddlFieldAtt.SelectedIndex == 0)
                //{
                //    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select the Field Attribute');", true);
                //    ddlFieldAtt.Focus();
                //    return false;

                //}
                //else if ((ddlFieldAtt.SelectedValue != "4") && (ddlNumericAtt.SelectedIndex == 0))
                //{
                //    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select the Numeric Operator');", true);
                //    ddlNumericAtt.Focus();
                //    return false;

                //}
                //if ((ddlFieldAtt.SelectedValue == "3"))
                //{
                //    if (txtReqVal.Text.Contains(":"))
                //    {
                //        if (txtReqVal.Text.Length == txtReqVal.Text.IndexOf(':'))
                //        {
                //            ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid ratio');", true);
                //            txtReqVal.Focus();

                //        }

                //    }
                //    else
                //    {
                //        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid ratio');", true);
                //        txtReqVal.Focus();

                //    }

                //}


                //if ((ddlFieldAtt.SelectedValue == "1"))
                //{
                //    string[] temp;
                //    temp = (txtReqVal.Text).Split('.');
                //    if (temp.Length > 2)
                //    {
                //        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid Amount');", true);
                //        txtReqVal.Focus();
                //        return false;
                //    }

                //}
                //if ((ddlFieldAtt.SelectedValue == "1"))
                //{
                //    double temp;
                //    temp = Convert.ToDouble(txtReqVal.Text);
                //    if (temp == 0)
                //    {
                //        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the valid Amount');", true);
                //        txtReqVal.Focus();
                //        return false;

                //    }
                //}

                //if (ddlFieldAtt.SelectedValue == "4")
                //{
                //    if (ddlYes.SelectedIndex == 0)
                //    {
                //        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select Yes or No');", true);
                //        ddlYes.Focus();
                //        return false;
                //    }

                //}

                //if ((txtReqVal.Text.Trim() == string.Empty) && (ddlFieldAtt.SelectedValue != "4"))
                //{
                //    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Required Value');", true);
                //    txtReqVal.Focus();
                //    return false;
                //}


                //if (txtScore.Text.Trim() == string.Empty)
                //{
                //    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Score');", true);
                //    txtScore.Focus();
                //    return false;

                //}

                //if ((ddlFieldAtt.SelectedValue != "4") && (ddlFieldAtt.SelectedValue != "5") && (txtDiffPer.Text.Trim() == string.Empty))
                //{
                //    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Difference %');", true);
                //    txtDiffPer.Focus();
                //    return false;

                //}
                //if ((ddlFieldAtt.SelectedValue != "4") && (ddlFieldAtt.SelectedValue != "5") && (txtDiffMark.Text.Trim() == string.Empty))
                //{
                //    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Enter the Difference Mark');", true);
                //    txtDiffMark.Focus();
                //    return false;
                //}

                //if ((ddlFieldAtt.SelectedValue == "2") && (txtReqVal.Text.Length >= 3))
                //{
                //    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Percentage value should not be greater than or equal to 100');", true);
                //    txtReqVal.Focus();
                //    return false;
                //}

                //if ((ddlFieldAtt.SelectedValue == "2") && Convert.ToDecimal(txtReqVal.Text) >= 100)
                //{
                //    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Percentage value should not be greater than or equal to 100');", true);
                //    txtReqVal.Focus();
                //    return false;
                //}

                strCrScoreParam_ID = lblParamID.Text;
                strDesc = txtDesc.Text.Trim();
                strFieldAtt = ddlFieldAtt.SelectedValue;
                strNumericAtt = ddlNumericAtt.SelectedValue;

                if (ddlFieldAtt.SelectedValue == "4")
                {
                    strReqValue = ddlYes.SelectedIndex == 0 ? "-1" : ddlYes.SelectedValue;
                }
                else if (ddlFieldAtt.SelectedValue == "5")
                {
                    strReqValue = "-1";
                    if (!string.IsNullOrEmpty(txtReqVal.Text))
                    {
                        strReqValue = txtReqVal.Text.Trim() == "" ? "-1" : Utility.StringToDate(txtReqVal.Text.ToString()).ToString();
                    }

                    //if (!string.IsNullOrEmpty(txtReqVal.Text))
                    //{
                    //    DateTime dt = new DateTime();
                    //    if (DateTime.TryParse(txtReqVal.Text.Trim(), out dt))
                    //    {
                    //        strReqValue = txtReqVal.Text.Trim() == "" ? "-1" : Utility.StringToDate(dt.ToString()).ToString();
                    //    }
                    //    else
                    //    {
                    //        Utility.FunShowAlertMsg(this, "Required date is not in correct format");
                    //        txtReqVal.Focus();
                    //        return false;
                    //    }
                    //}
                }
                else
                {
                    strReqValue = txtReqVal.Text.Trim() == "" ? "-1" : txtReqVal.Text.Trim();
                }
                //strReqValue = txtReqVal.Text;
                strScore = txtScore.Text == "" ? "-1" : txtScore.Text;
                strDiffPer = txtDiffPer.Text == "" ? "-1" : txtDiffPer.Text;
                strDiffMark = txtDiffMark.Text == "" ? "-1" : txtDiffMark.Text;

                //Calendar


                //strDesc = dtCreditScore.Rows[iCount]["Desc"].ToString();
                //strFieldAtt = dtCreditScore.Rows[iCount]["FieldAtt"].ToString();
                //strNumericAtt = dtCreditScore.Rows[iCount]["NumericAtt"].ToString();
                //strDiffPer = dtCreditScore.Rows[iCount]["DiffPer"].ToString();
                //strDiffMark = dtCreditScore.Rows[iCount]["DiffMark"].ToString();
                //strReqValue = dtCreditScore.Rows[iCount]["ReqValue1"].ToString();
                //strScore = dtCreditScore.Rows[iCount]["Score1"].ToString();

                strbCreditScoreDet.Append(" <Details CrScoreParam_ID='" + strCrScoreParam_ID + "' CrScoreDesc='" + strDesc + "' FieldAttribute='" + strFieldAtt + "'");
                strbCreditScoreDet.Append(" NumericOperator='" + strNumericAtt + "' DifferencePercentage='" + strDiffPer + "'");
                strbCreditScoreDet.Append(" DifferenceMark='" + strDiffMark + "'");
                strbCreditScoreDet.Append(" RequiredParameter='" + strReqValue + "' Score='" + strScore + "' />");
            }
            strbCreditScoreDet.Append("</Root>");
            strXMLCreditScoreDet = strbCreditScoreDet.ToString();
            return true;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    //This is used to implement User Authorization

    private void FunPriDisableControls(int intModeID)
    {
        //Button btnGridSave = (Button)grvCreditScore.FooterRow.FindControl("btnAddCredit");

        switch (intModeID)
        {
            case 0: // Create Mode

                lblHeading.Text = FunPubGetPageTitles(enumPageTitle.Create);
                chkActive.Enabled = false;
                if (!bCreate)
                {

                    btnSave.Enabled = false;
                    grvCreditScore.Columns[7].Visible = false;
                }

                break;

            case 1: // Modify Mode

                lblHeading.Text = FunPubGetPageTitles(enumPageTitle.Modify);

                if (!bModify)
                {

                    btnSave.Enabled = false;
                    //btnGridSave.Enabled = false;
                }
                chkActive.Enabled = true;

                //Based on UAT

                //grvCreditScore.Columns[7].Visible = false;
                ddlLOB.Enabled = false;

                ddlProductCode.Enabled = false;
                ddlConstitution.Enabled = false;

                btnClear.Enabled = false;
                break;

            case -1:// Query Mode


                lblHeading.Text = FunPubGetPageTitles(enumPageTitle.View);

                if (!bQuery)
                {
                    Response.Redirect(strRedirectPage,false);
                }

                if (bClearList)
                {
                    ddlYear.ClearDropDownList();
                    ddlLOB.ClearDropDownList();
                    ddlProductCode.ClearDropDownList();
                    ddlConstitution.ClearDropDownList();
                }
                //grvCreditScore.Enabled = false;

                grvCreditScore.Columns[7].Visible = false;
                btnClear.Enabled = false;
                btnSave.Enabled = false;
                //btnGridSave.Enabled = false;
                chkActive.Enabled = false;

                foreach (GridViewRow e in grvCreditScore.Rows)
                {
                    if (e.RowType == DataControlRowType.DataRow)
                    {
                        TextBox txtDesc = (TextBox)e.FindControl("txtDesc");
                        txtDesc.ReadOnly = true;
                        DropDownList ddlField = (DropDownList)e.FindControl("ddlFieldAtt");
                        ddlField.Enabled = false;
                        DropDownList ddlNumeric = (DropDownList)e.FindControl("ddlNumeric");
                        ddlNumeric.Enabled = false;
                        DropDownList ddlYes = (DropDownList)e.FindControl("ddlYes1");
                        ddlYes.Enabled = false;
                        TextBox txtReqV = (TextBox)e.FindControl("txtReqValue1");
                        txtReqV.ReadOnly = true;
                        TextBox txtScore = (TextBox)e.FindControl("txtScore1");
                        txtScore.ReadOnly = true;
                        TextBox txtdiffPerv = (TextBox)e.FindControl("txtDiffPer");
                        txtdiffPerv.ReadOnly = true;
                        TextBox txtdiffMark = (TextBox)e.FindControl("txtDiffMark");
                        txtdiffMark.ReadOnly = true;
                        AjaxControlToolkit.CalendarExtender CalendarExtender1 = (AjaxControlToolkit.CalendarExtender)e.FindControl("CalendarExtender1");
                        CalendarExtender1.Enabled = false;
                    }
                }

                break;
        }

    }

    //Code end


    private string Funsetsuffix()
    {

        int suffix = 1;
        S3GSession ObjS3GSession = new S3GSession();
        suffix = ObjS3GSession.ProGpsSuffixRW;
        string strformat = "0.";
        for (int i = 1; i <= suffix; i++)
        {
            strformat += "0";
        }
        return strformat;
    }

    protected void Score_TextChanged(object sender, EventArgs e)
    {
        try
        {
            TextBox txtScore = (TextBox)sender;
            //if (txtScore.Text != string.Empty)
            //{
            //    txtScore.Text = Convert.ToDecimal(txtScore.Text).ToString(Funsetsuffix());
            //}

            if (txtTotalScore.Text != string.Empty)
            {
                txtTotalScore.Text = Convert.ToDecimal(txtTotalScore.Text).ToString(Funsetsuffix());
            }

            foreach (GridViewRow GRow in grvCreditScore.Rows)
            {
                TextBox txtDescF = (TextBox)GRow.FindControl("txtDesc");
                DropDownList ddlField = (DropDownList)GRow.FindControl("ddlFieldAtt");
                DropDownList ddlNumeric = (DropDownList)GRow.FindControl("ddlNumeric");
                TextBox txtDiffPer = (TextBox)GRow.FindControl("txtDiffPer");
                TextBox txtDiffMark = (TextBox)GRow.FindControl("txtDiffMark");

                //For 'Amount' and '=' ,difference mark and per not needed.
                if ((ddlField.SelectedValue == "1") && (ddlNumeric.SelectedValue == "5"))
                {
                    txtDiffPer.Text = string.Empty;
                    txtDiffMark.Text = string.Empty;
                    txtDiffPer.ReadOnly = true;
                    txtDiffMark.ReadOnly = true;
                    //ddlNumericF.Focus();
                    txtDiffMark.Attributes.Add("ContentEditable", "false");
                    txtDiffPer.Attributes.Add("ContentEditable", "false");
                    return;
                }
            }

        }
        catch (Exception ex)
        {
        }
    }

    #endregion
}



