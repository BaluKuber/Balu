




#region PageHeader
/// © 2010 SUNDARAM INFOTECH SOLUTIONS P LTD . All rights reserved
/// 
/// <Program Summary>
/// Module Name         :   Loan Admin
/// Screen Name         :   Payment Request
/// Created By          :   S.Kannan
/// Created Date        :   27-July-2010 
/// Purpose             :   To raise the payment request
/// Last Updated By		:   M.Saran 
/// Last Updated Date   :   NULL
/// Reason              :   To raise the payment request
/// Last Updated By		:   Thalaiselvam N
/// Last Updated Date   :   03-Sep-2011
/// Reason              :   Encrypted Password Validation

/// <Program Summary>
#endregion



#region NameSpaces
using System;
using System.Globalization;
using System.Resources;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using S3GBusEntity;
using System.ServiceModel;
using System.Text;
using System.Data;
using System.Configuration;
using System.Collections.Generic;
using System.Linq;
using S3GBusEntity.Origination;
using System.IO;
using System.Web.Security;
using S3GBusEntity.LoanAdmin;

using System.Globalization;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.xml;
using iTextSharp.text.html;
using S3GBusEntity.Reports;

#endregion

public partial class TradeAdvance_S3GTAPaymentRequest : ApplyThemeForProject
{
    LoanAdminAccMgtServicesReference.LoanAdminAccMgtServicesClient ObjLoanAdminAccMgtServicesClient;
    LoanAdminAccMgtServices.S3G_LOANAD_GetPaymentDetailsDataTable ObjPaymentDetailsDt = new LoanAdminAccMgtServices.S3G_LOANAD_GetPaymentDetailsDataTable();

    // to get the user details
    UserInfo userInfo = new UserInfo();

    Dictionary<string, string> Procparam = null;
    int intUserID = 0;
    int intCompanyID = 0;
    string strDateFormat;
    const string strRedirectOnCancel = "S3G_TA_TransLander.aspx?Code=PART";
    string strKey = "Insert";
    string strAlert = "alert('__ALERT__');";
    string strRedirectPageView = "window.location.href='../TradeAdvance/S3G_TA_TransLander.aspx?Code=PART';";
    string strRedirectPageAdd = "window.location.href='../TradeAdvance/S3G_TA_PaymentRequest.aspx?qsMode=C';";

    S3GSession ObjS3GSession = new S3GSession();
    UserInfo ObjUserInfo = new UserInfo();
    DataTable dtPaymenttable = new DataTable();

    // to hold the query string
    string strQsMode = string.Empty;
    string strRequestID = string.Empty;

    ClsSystemJournal ObjSysJournal = new ClsSystemJournal();

    protected void Page_Load(object sender, EventArgs e)
    {
        ObjLoanAdminAccMgtServicesClient = new LoanAdminAccMgtServicesReference.LoanAdminAccMgtServicesClient();
        try
        {

            #region Application Standard Date Format

            strDateFormat = ObjS3GSession.ProDateFormatRW;                              // to get the standard date format of the Application
            CalendarExtenderFromDate.Format = strDateFormat;                            // assigning the first textbox with the End date
            CalendarExtenderToDate.Format = strDateFormat;                              // assigning the first textbox with the start date
            CalendarExtenderValueDate.Format = strDateFormat;
            CalendarExtenderPaymentRequestDate.Format = strDateFormat;
            CalendarExtenderInstrumentDate.Format = strDateFormat;


            #endregion

            if (Request.QueryString["Popup"] != null)
                btnCancel.Enabled = false;


            #region User Information
            UserInfo ObjUserInfo = new UserInfo();
            intCompanyID = ObjUserInfo.ProCompanyIdRW;
            intUserID = ObjUserInfo.ProUserIdRW;
            #endregion
            GetQueryString();


            ucCustomerCodeLov.strControlID = ucCustomerCodeLov.ClientID;
            TextBox txtName = ucCustomerCodeLov.FindControl("txtName") as TextBox;
            txtName.Attributes.Add("onfocus", "fnLoadCustomer()");
            ucCustomerAddress.ShowCustomerCode = false;
            // for password popup
            ModalPopupExtenderPassword.Enabled = false;
            FunPaymentDatatableDefinition();
            if (!IsPostBack)
            {


                ViewState["Sum"] = 0;

                txtPaymentRequestDate.Text = DateTime.Now.ToString(strDateFormat);
                //txtValueDate.Enabled = false;
                txtValueDate.Enabled = false;
                txtValueDate.Text = DateTime.Now.ToString(strDateFormat);
                txtFromDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtFromDate.ClientID + "','" + strDateFormat + "',true,  false);");
                txtToDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtToDate.ClientID + "','" + strDateFormat + "',true,  false);");

                // to get the payment request details - start
                LoanAdminAccMgtServices.S3G_LOANAD_GetPaymentDetailsRow ObjPaymentDetailsRow;
                ObjPaymentDetailsRow = ObjPaymentDetailsDt.NewS3G_LOANAD_GetPaymentDetailsRow();

                ObjPaymentDetailsRow.Entity_ID = -1;
                ObjPaymentDetailsRow.Payment_Request_ID = -1;
                ObjPaymentDetailsRow.Request_No = string.IsNullOrEmpty(strRequestID) ? -1 : Convert.ToInt32(strRequestID);
                ObjPaymentDetailsRow.LOB_ID = -1;
                ObjPaymentDetailsRow.Branch_ID = -1;
                ObjPaymentDetailsRow.PayTypeID = "-1";

                ObjPaymentDetailsDt.AddS3G_LOANAD_GetPaymentDetailsRow(ObjPaymentDetailsRow);



                SerializationMode SerMode = SerializationMode.Binary;

                byte[] bytesPaymentRequestDetails = ObjLoanAdminAccMgtServicesClient.FunPubTAQueryGetCreditParameterRequestDetails(SerMode, ClsPubSerialize.Serialize(ObjPaymentDetailsDt, SerMode));
                ObjPaymentDetailsDt = (LoanAdminAccMgtServices.S3G_LOANAD_GetPaymentDetailsDataTable)ClsPubSerialize.DeSerialize(bytesPaymentRequestDetails, SerializationMode.Binary, typeof(LoanAdminAccMgtServices.S3G_LOANAD_GetPaymentDetailsDataTable));
                if (ObjPaymentDetailsDt != null && ObjPaymentDetailsDt.Rows.Count == 0)
                {
                    ObjPaymentDetailsDt.Columns.Add("Application_ID");
                    ObjPaymentDetailsDt.Columns.Add("Tranche_ID");

                    DataRow dr_requestDetails = ObjPaymentDetailsDt.NewS3G_LOANAD_GetPaymentDetailsRow();
                    
                    dr_requestDetails["Customer_ID"] = -1; // dummy
                    ObjPaymentDetailsDt.Rows.Add(dr_requestDetails);
                    grvPaymentDetails.DataSource = ObjPaymentDetailsDt;

                    // ViewState["grvPaymentDetails"] = ObjPaymentDetailsDt;
                    grvPaymentDetails.DataBind();
                    grvPaymentDetails.Rows[0].Visible = false;
                }
                else
                {
                    grvPaymentDetails.DataSource = ObjPaymentDetailsDt;
                    ViewState["grvPaymentDetails"] = ObjPaymentDetailsDt;
                    grvPaymentDetails.DataBind();
                }
                //new Datatable
                FunPriInitDropdownsControls();



                // to change the view - depend on the query string
                FunPriFormActToMode();




            }
            FunPriSetMaxLength();
            // WF Initializtion 
            ProgramCode = "229";
            // WORK FLOW IMPLEMENTATION
            if (PageMode == PageModes.WorkFlow)
            {
                try
                {
                    ViewState["PageMode"] = PageModes.WorkFlow;
                    PreparePageForWorkFlowLoad();
                    if (ViewState["strRequestID"] != null)
                        strRequestID = ViewState["strRequestID"].ToString();
                }
                catch (Exception ex)
                {
                      ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
                    Utility.FunShowAlertMsg(this.Page, "Invalid data to load, access from menu");
                }
            }
            FunLoadPayToDetails();




        }
        catch (TimeoutException tex)
        {
            Utility.FunShowAlertMsg(this, tex.ToString());
        }
        finally
        {
            ObjLoanAdminAccMgtServicesClient.Close();
        }


    }


    public void FunLoadPayToDetails()
    {
        try
        {
            if (ddlLOB.SelectedIndex > 0)
                ucCustomerCodeLov.strLOBID = ddlLOB.SelectedValue;
            if (ddlPayTo.SelectedIndex > 0)
            {
                switch (ddlPayTo.SelectedValue)
                {
                    case "1":
                        ucCustomerCodeLov.strLOV_Code = "CMD";
                        break;
                    case "2":
                        ucCustomerCodeLov.strLOV_Code = "ENDSA";
                        break;
                    case "3":
                        ucCustomerCodeLov.strLOV_Code = "ENFIA";
                        break;
                    case "4":
                        ucCustomerCodeLov.strLOV_Code = "ENDMA";
                        break;
                    case "5":
                        ucCustomerCodeLov.strLOV_Code = "ENDBTCOLL";
                        break;
                    case "6":
                        ucCustomerCodeLov.strLOV_Code = "ENVENDOR";
                        break;
                    case "7":
                        ucCustomerCodeLov.strLOV_Code = "ENSUNDRY";
                        break;
                    case "8":
                        //ucCustomerCodeLov.strLOV_Code = "ENDEALER";
                        ucCustomerCodeLov.strLOV_Code = "TADLR";
                        break;
                    case "9":
                        ucCustomerCodeLov.strLOV_Code = "ENBROK";
                        break;
                    case "10":
                        ucCustomerCodeLov.strLOV_Code = "ENEMP";
                        break;
                    case "11":
                        ucCustomerCodeLov.strLOV_Code = "ENINS";
                        break;

                    default:
                        ucCustomerCodeLov.strLOV_Code = "CMD";
                        break;
                }
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }


    #region Workflow Methods
    /// <summary>
    /// Workflow Function
    /// </summary>
    private void PreparePageForWorkFlowLoad()
    {
        try
        {
            if (!IsPostBack)
            {
                WorkFlowSession WFSessionValues = new WorkFlowSession();
                // Get The IDVALUE from Document Sequence #

                Procparam = new Dictionary<string, string>();
                Procparam.Add("@DocumentNo", WFSessionValues.WorkFlowDocumentNo);
                Procparam.Add("@Company_Id", intCompanyID.ToString());
                DataTable dt = new DataTable();
                dt = Utility.GetDefaultData("S3G_WORKFLOW_PAYMENTREQ_MOD", Procparam);
                if (dt.Rows.Count > 0)//If Exist i.e Modify Mode
                {
                    strRequestID = dt.Rows[0]["Doc_ID"].ToString();
                    ViewState["strRequestID"] = strRequestID;
                    FunPriLoadFormControls();
                    FunloadGridPayments();
                    ModifyMode();
                }
                else
                {
                    DataTable HeaderValues = GetHeaderDetailsFromPANUMandSANUM(WFSessionValues.PANUM, ProgramCode, WFSessionValues.SANUM);
                    ddlLOB.SelectedValue = WFSessionValues.LOBId.ToString();
                    ddlBranch.SelectedValue = WFSessionValues.BranchID.ToString();
                    if (HeaderValues.Rows.Count > 0)
                    {
                        grvPaymentDetails.DataSource = HeaderValues;
                        grvPaymentDetails.DataBind();
                        ViewState["grvPaymentDetails"] = HeaderValues;
                        grvPaymentDetails.Columns[grvPaymentDetails.Columns.Count - 1].Visible = false;
                        grvPaymentDetails.FooterRow.Visible = false;
                        ddlPayTo.SelectedValue = HeaderValues.Rows[0]["PayTo"].ToString();
                        FunLoadPaymentAdjustment();
                        FunPriLoadCustomerEntityDtls(HeaderValues.Rows[0]["Cashflow_entity_code"].ToString());
                        ViewState["hdnCustorEntityID"] = HeaderValues.Rows[0]["Cashflow_entity_code"].ToString();
                        if (HeaderValues.Rows[0]["Cashflow_entity_type"].ToString() == "145")
                        {
                            ucCustomerAddress.Caption = "Entity";
                            FunPriLoadPaytypeingrid("8");
                        }
                        else
                        {
                            ucCustomerAddress.Caption = "Customer";
                            FunPriLoadPaytypeingrid("1");
                        }
                        FunPriDisableCtrlsWF();
                        if (!string.IsNullOrEmpty(lbltotalPaymentAdjust.Text))
                        {
                            txtDocAmount.Text = lbltotalPaymentAdjust.Text;
                        }
                    }
                }

            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    #endregion
    private void FunPriDisableCtrlsWF()
    {
        ddlPaymentStatus.SelectedValue = "1";
        TabPanelPBD.Enabled =
        btnPrintVoucher.Visible =
        btnPrintCheque.Visible =
        btnCoveringLetter.Visible =
        btnCancelPayment.Visible =
        PanelPayType.Enabled =
        imgFromDate.Visible =
        imgToDate.Visible = false;
        ddlLOB.ClearDropDownList();
        ddlBranch.ClearDropDownList();
        PnlCustEntityInformation.Enabled = false;
        ucCustomerCodeLov.ButtonEnabled = false;

    }
    private void FunPaymentDatatableDefinition()
    {
        dtPaymenttable.Columns.Add("Request_No");
        dtPaymenttable.Columns.Add("LOB_ID");
        dtPaymenttable.Columns.Add("Branch_ID");
        //dtPaymenttable.Columns.Add("Location_Code");
        dtPaymenttable.Columns.Add("PANum");
        dtPaymenttable.Columns.Add("SANum");
        dtPaymenttable.Columns.Add("Asset_ID");
        dtPaymenttable.Columns.Add("Asset");
        dtPaymenttable.Columns.Add("PayTypeID");
        dtPaymenttable.Columns.Add("Flow_Type");
        dtPaymenttable.Columns.Add("RefDocNo");
        dtPaymenttable.Columns.Add("Cashflow_ID");
        dtPaymenttable.Columns.Add("GL_Code");
        dtPaymenttable.Columns.Add("SL_Code");
        dtPaymenttable.Columns.Add("Account_Setup_ID");
        dtPaymenttable.Columns.Add("Description");
        dtPaymenttable.Columns.Add("Amount");
        dtPaymenttable.Columns.Add("Application_ID");
        dtPaymenttable.Columns.Add("Tranche_ID");
    }

    private void FunPriSetMaxLength()
    {
        try
        {
            txtDocAmount.CheckGPSLength(true);
            if (grvPaymentDetails != null)
            {
                if (grvPaymentDetails.FooterRow != null)
                {
                    TextBox txtFooterAmount = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterAmount") as TextBox;
                    txtFooterAmount.CheckGPSLength(true, "Amount");
                }

            }
            if (grvPaymentAdjustment != null)
            {
                if (grvPaymentAdjustment.FooterRow != null)
                {
                    TextBox txtFooterAmount = (TextBox)grvPaymentAdjustment.FooterRow.FindControl("txtFooterAmount") as TextBox;
                    txtFooterAmount.CheckGPSLength(true, "Amount");
                }


            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }


    private void fundisablecontrols(string qsmode)
    {
        PanelPayType.Enabled = false;
        imgFromDate.Visible = false;
        imgToDate.Visible = false;
        PnlCustEntityInformation.Enabled = true;
        ucCustomerCodeLov.ButtonEnabled = true;
        if (ddlPayTo.SelectedValue == "50")
        {

            PnlCustEntityInformation.Enabled = false;
            ucCustomerCodeLov.ButtonEnabled = false;
        }
        switch (qsmode)
        {
            case "Q":
                btnSave.Enabled = false;
                btnCancelPayment.Visible = false;
                ddlPayMode.ClearDropDownList();
                ddlCurrencyCode.ClearDropDownList();
                chkAccountBased.ClearDropDownList();
                txtFromDate.Enabled =
                CalendarExtenderFromDate.Enabled =
                CalendarExtenderPaymentRequestDate.Enabled =
                CalendarExtenderValueDate.Enabled =
                txtToDate.Enabled =
                CalendarExtenderToDate.Enabled = false;
                txtDocAmount.ReadOnly = true;
                txtFromDate.Attributes.Remove("onblur");
                txtToDate.Attributes.Remove("onblur");
                if (PanelPaymentAdjustment != null && PanelPaymentAdjustment.Visible)
                {
                    //ddlAddOrLess.ClearDropDownList();
                    //ddlPaytypeadjust.ClearDropDownList();
                }
                PnlCustEntityInformation.Enabled = false;
                ucCustomerCodeLov.ButtonEnabled = false;
                if (grvPaymentDetails != null)
                {
                    grvPaymentDetails.Columns[grvPaymentDetails.Columns.Count - 1].Visible = false;
                    for (int rowcount = 0; rowcount < grvPaymentDetails.Rows.Count; rowcount++)
                    {
                        TextBox lblDescription = (TextBox)grvPaymentDetails.Rows[rowcount].FindControl("lblDescription");
                        TextBox lblAmount = (TextBox)grvPaymentDetails.Rows[rowcount].FindControl("lblAmount");
                        lblDescription.ReadOnly = true;
                        lblAmount.ReadOnly = true;

                    }
                }
                if (grvPaymentAdjustment != null)
                {
                    grvPaymentAdjustment.Columns[grvPaymentAdjustment.Columns.Count - 1].Visible = false;
                }
                break;
            case "M":
                //CalendarExtenderValueDate.Enabled =
                CalendarExtenderPaymentRequestDate.Enabled = false;
                if (PanelPaymentAdjustment != null && PanelPaymentAdjustment.Visible)
                {
                    //ddlAddOrLess.ClearDropDownList();
                    //ddlPaytypeadjust.ClearDropDownList();
                }
                PnlCustEntityInformation.Enabled = false;
                ucCustomerCodeLov.ButtonEnabled = false;
                break;
            default:
                //TabPanelPBD.Enabled = false;

                break;

        }

    }




    private void FunloadGridPayments()
    {
        try
        {
            DataSet Dsgrid = new DataSet();
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Request_No", strRequestID);
            Procparam.Add("@Company_ID", intCompanyID.ToString());
            Dsgrid = Utility.GetDataset("S3G_TA_GetPaymentRequestGriddetailsMOD", Procparam);
            if (Dsgrid.Tables[0].Rows.Count > 0)
            {
                grvPaymentDetails.DataSource = Dsgrid.Tables[0];
                grvPaymentDetails.DataBind();
                ViewState["grvPaymentDetails"] = Dsgrid.Tables[0];
                grvPaymentDetails.FooterRow.Visible = false;
                foreach (DataRow dr in Dsgrid.Tables[0].Rows)
                {
                    if (dr["RefDocNo"].ToString() != string.Empty)
                    {
                        grvPaymentDetails.Columns[4].Visible = true;
                    }

                }
            }
            if (Dsgrid.Tables[1].Rows.Count > 0)
            {
                grvPaymentAdjustment.DataSource = Dsgrid.Tables[1];
                grvPaymentAdjustment.DataBind();
                ViewState["grvPaymentAdjust"] = Dsgrid.Tables[1];
                grvPaymentAdjustment.FooterRow.Visible = false;
            }

        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void calcSumAmountDetails()
    {
        if (grvPaymentDetails != null)
        {
            decimal sum = 0;
            foreach (GridViewRow grvPaymentDetailsRow in grvPaymentDetails.Rows)
            {

                TextBox lblAmount = (TextBox)grvPaymentDetailsRow.FindControl("lblAmount");
                Label lblFlowType = (Label)grvPaymentDetailsRow.FindControl("lblFlowType");

                if (!(string.IsNullOrEmpty(lblAmount.Text)))
                    sum += (Convert.ToDecimal(lblAmount.Text));

            }
            lblPaymentDetailsTotal.Text = (sum).ToString();
            lbltotalPaymentAdjust.Text = (sum).ToString();
        }
    }

    private void calcSumAmount()
    {
        if (grvPaymentAdjustment != null)
        {
            decimal sum = 0;
            decimal Total = 0;
            foreach (GridViewRow grvPaymentDetailsRow in grvPaymentAdjustment.Rows)
            {
                Label lblAddOrLess = (Label)grvPaymentDetailsRow.FindControl("lblAddOrLess");
                Label lblAmount = (Label)grvPaymentDetailsRow.FindControl("lblAmount");


                if (!(string.IsNullOrEmpty(lblAmount.Text)))
                    sum = (Convert.ToDecimal(lblAmount.Text));
                if (lblAddOrLess.Text.ToLower() == "add")
                {
                    Total += sum;
                }
                else if (lblAddOrLess.Text.ToLower() == "less")
                {
                    Total -= sum;
                }
                lbltotalPaymentAdjust.Text = (Convert.ToDecimal(lblPaymentDetailsTotal.Text) + Total).ToString();

            }

        }
    }


    private void FunLockControlsInQueryMode()
    {
        if (grvPaymentAdjustment.FooterRow != null)
            grvPaymentAdjustment.FooterRow.Visible = false;
        if (grvPaymentDetails.FooterRow != null)
            grvPaymentDetails.FooterRow.Visible = false;
        ddlCurrencyCode.Enabled = false;
        PnlCustEntityInformation.Enabled = false;
        ucCustomerCodeLov.ButtonEnabled = false;
    }



    private void FunLoadPaymentAdjustment()
    {
        if (strQsMode == "C")
            FunpriBlank();
        /*
        if ((string.Compare(strQsMode, "Q") == 0) || (string.Compare(strQsMode, "M") == 0))
        {
            if (Procparam == null)
                Procparam = new Dictionary<string, string>();
            else
                Procparam.Clear();
            Procparam.Add("@Request_No", strRequestID);
            DataTable dtAdjustment = Utility.GetDefaultData(SPNames.S3G_LOANAD_GetPaymentAdjustments, Procparam);
            ViewState["PaymentAdjustment"] = grvPaymentAdjustment.DataSource = dtAdjustment;
            grvPaymentAdjustment.DataBind();
            //FunLoadPaymentAdjustment();
            if (dtAdjustment == null || dtAdjustment.Rows.Count == 0)

                FunpriBlank();

            lbltotalPaymentAdjust.Text = Convert.ToDecimal((lblPaymentDetailsTotal.Text)).ToString();

            for (int i = 0; i < dtAdjustment.Rows.Count; i++)
            {
                if (string.Compare(dtAdjustment.Rows[i]["AddOrLess"].ToString(), "Add") == 0)
                {
                    lbltotalPaymentAdjust.Text = (Convert.ToDecimal((lbltotalPaymentAdjust.Text)) +
                        Convert.ToDecimal(dtAdjustment.Rows[i]["Amount"].ToString())).ToString();
                }
                else
                {
                    lbltotalPaymentAdjust.Text = (Convert.ToDecimal((lbltotalPaymentAdjust.Text)) -
                        Convert.ToDecimal(dtAdjustment.Rows[i]["Amount"].ToString())).ToString();
                }
            }
        }
        else
        {
        FunpriBlank();
           
        }*/

    }

    private void FunpriBlank()
    {
        DataColumn AddOrLess = new DataColumn("AddOrLess", System.Type.GetType("System.String"));
        DataColumn PayType = new DataColumn("PayType", System.Type.GetType("System.String"));
        DataColumn PayTypeID = new DataColumn("PayTypeID", System.Type.GetType("System.String"));
        DataColumn SANum = new DataColumn("SANum", System.Type.GetType("System.String"));
        DataColumn PANum = new DataColumn("PANum", System.Type.GetType("System.String"));
        DataColumn GL_Code = new DataColumn("GL_Code", System.Type.GetType("System.String"));
        DataColumn SL_Code = new DataColumn("SL_Code", System.Type.GetType("System.String"));
        DataColumn Amount = new DataColumn("Amount", System.Type.GetType("System.String"));
        DataColumn Remarks = new DataColumn("Remarks", System.Type.GetType("System.String"));
        DataColumn Application_ID = new DataColumn("Application_ID", System.Type.GetType("System.String"));
        DataColumn Tranche_ID = new DataColumn("Tranche_ID", System.Type.GetType("System.String"));

        DataTable dt = new DataTable();
        dt.Columns.Add(AddOrLess);
        dt.Columns.Add(PayType);
        dt.Columns.Add(PayTypeID);
        dt.Columns.Add(PANum);
        dt.Columns.Add(SANum);
        dt.Columns.Add(GL_Code);
        dt.Columns.Add(SL_Code);
        dt.Columns.Add(Amount);
        dt.Columns.Add(Remarks);
        dt.Columns.Add(Application_ID);
        dt.Columns.Add(Tranche_ID);

        DataRow dr = dt.NewRow();
        dt.Rows.Add(dr);

        grvPaymentAdjustment.DataSource = dt;
        grvPaymentAdjustment.DataBind();
        //FunLoadPaymentAdjustment();
        grvPaymentAdjustment.Rows[0].Visible = false;

        ViewState["PaymentAdjustment"] = dt;
        ViewState["grvPaymentAdjust"] = dt;
    }

    /// <summary>
    /// To change the form depending on the Mode set by the Query String.
    /// </summary>
    private void FunPriFormActToMode()
    {
        imgPaymentRequestDate.Visible = false;
        switch (Convert.ToChar(strQsMode))
        {
            case 'Q':   // query Mode
                lblPaymentRequest.Text = FunPubGetPageTitles(enumPageTitle.View);
                FunPriLoadFormControls();
                FunloadGridPayments();
                QueryView();
                ddlPayMode.ClearDropDownList();
                break;
            case 'M':   // modify Mode
                // FunPriLockControls(true);
                lblPaymentRequest.Text = FunPubGetPageTitles(enumPageTitle.Modify);
                FunPriLoadFormControls();
                FunloadGridPayments();
                Procparam = new Dictionary<string, string>();
                Procparam.Add("@Company_ID", intCompanyID.ToString());
                Procparam.Add("@LOB_ID", ddlLOB.SelectedValue);
                //Procparam.Add("@Branch_ID", ddlBranch.SelectedValue);
                Procparam.Add("@Location_Id", ddlBranch.SelectedValue);
                Procparam.Add("@Closure_Date", Utility.StringToDate(txtPaymentRequestDate.Text).ToString());

                //DataTable chkmonthendclosure = new DataTable();
                //chkmonthendclosure = Utility.GetDefaultData("S3G_LOANAD_ValidateMonthClosure", Procparam);

                string chkmonthendclosure = Utility.ValidateMonthClosure("S3G_LOANAD_ValidateMonthClosure", Procparam);

                if (chkmonthendclosure == "5")
                {
                    Utility.FunShowAlertMsg(this, "Modification is not allowed for a closed month");
                    QueryView();
                }
                else
                {
                    ModifyMode();
                }
                ddlPayMode.ClearDropDownList();
                break;
            case 'C':   // create mode
                lblPaymentRequest.Text = FunPubGetPageTitles(enumPageTitle.Create);
                ddlPaymentStatus.SelectedValue = "1";
                /* PanelPaymentAdjustment.Visible =
                 PanelPaymentDetails.Visible = false;*/
                btnGo.Enabled = false;
                //         grvPaymentAdjustment.FooterRow.Visible = false;
                PnlCustEntityInformation.Enabled = true;
                ucCustomerCodeLov.ButtonEnabled = false;
                btnPrintVoucher.Visible =
                btnPrintCheque.Visible =
                btnCoveringLetter.Visible =
                btnCancelPayment.Visible = false;
                FunLoadPaymentAdjustment();
                FunPriLoadGLcodes();
                if (ddlPayTo.SelectedValue == "50" && chkAccountBased.SelectedValue == "1")
                {
                    FunDisableGLSLCodeGrid(true);
                    FundisableGridValidation(false);
                }
                else
                {
                    FunDisableGLSLCodeGrid(false);
                    FundisableGridValidation(true);
                }

                //TabPanelPBD.Enabled = false;

                break;
            default:
                break;
        }
    }
    private void ModifyMode()
    {
        try
        {
            RBLCompanyCashorBankAcct.Visible =
            btnGo.Visible = false;
            btnPrintVoucher.Enabled =
            rfvcmbCustomer.Enabled = false;
            RequiredFieldValidator8.Enabled = false;
            btnCoveringLetter.Visible =
            btnCancelPayment.Visible = true;

            lblChequeStatus.Visible =
            ddlChequeStatus.Visible = false;
            ddlLOB.Enabled = ddlBranch.Enabled = false;

            //funshowPaymentdetailsgrid(strQsMode);

            if (Convert.ToInt32(ddlPaymentStatus.SelectedValue) >= 2)
                fundisablecontrols("Q");
            else
                fundisablecontrols("M");

            if (ddlPaymentStatus.SelectedValue == "3")   // if (dtPaymentRequest.Rows[0]["Pmt_Voucher_status"] == 3)  -- then enable the user to print the voucher
                btnPrintVoucher.Enabled = true;

            if (ddlPayMode.SelectedValue == "1")
            {
                if (ViewState["IsVoucher_Print"] != null)
                {
                    if (Convert.ToString(ViewState["IsVoucher_Print"]) == "P" || Convert.ToString(ViewState["IsVoucher_Print"]) == "D")  // enble btncheque only if the voucher was printed.
                    {
                        btnPrintCheque.Enabled = true;
                        btnCoveringLetter.Enabled = true;
                    }
                    else
                    {
                        btnPrintCheque.Enabled = false;
                        btnCoveringLetter.Enabled = false;
                    }
                }
                ddlChequeStatus.Visible = true;
                lblChequeStatus.Visible = true;
            }

            //if (ddlPaymentStatus.SelectedValue == "3")
            //{
            if (ddlPayMode.SelectedValue == "1" || ddlPayMode.SelectedValue == "2")//Enabled the payment bank details tab if the payment is approved and the pay mode is cheque or DD
            {

                FunEnableDisableInstrumentTabs(true);
                if (ddlPayMode.SelectedValue == "2") //Instrument Number is User Enterable for DD
                {
                    txtInstrumentNumber.ReadOnly = false;
                    btnPrintCheque.Visible = false;

                }
                else
                {
                    txtInstrumentNumber.ReadOnly = true;
                    btnPrintCheque.Visible = true;
                }
            }
            //}
            /*if (ddlPayMode.SelectedValue == "2")
            {
                RBLCompanyCashorBankAcct.Visible = true;


                if (ViewState["IsVoucher_Print"] != null)
                {
                    if (Convert.ToString(ViewState["IsVoucher_Print"]) == "P" || Convert.ToString(ViewState["IsVoucher_Print"]) == "D")
                    {
                        if (Convert.ToInt32(ddlbankname.SelectedValue) > 0)//Radio button selection only in front end
                        {
                            RBLCompanyCashorBankAcct.SelectedValue = "1";
                            rfvbankname.Enabled = rfvtxtGLCode.Enabled =
                                rfvbanknameC.Enabled =
                                rfvtxtGLCodeC.Enabled =
                                RFVAcctNumber.Enabled =
                                RFVAcctNumberC.Enabled =
                                RFVIFSC_CodeC.Enabled =
                                RFVIFSC_Code.Enabled =
                                true;

                        }
                        else
                        {
                            RBLCompanyCashorBankAcct.SelectedValue = "0";
                            rfvbanknameC.Enabled =
                            rfvtxtGLCodeC.Enabled =
                            rfvbankname.Enabled = rfvtxtGLCode.Enabled =
                                                            RFVAcctNumber.Enabled =
                                RFVAcctNumberC.Enabled =
                                RFVIFSC_CodeC.Enabled =
                                RFVIFSC_Code.Enabled =

                            false;
                        }
                        btnCoveringLetter.Enabled = true;
                        ImageInstrumentDate.Visible = false;
                        FunPriPayDtstabDDValidation(false);
                    }
                    else
                    {
                        btnCoveringLetter.Enabled = false;
                        FunPriPayDtstabDDValidation(true);
                    }
                }
            }*/
            if (ddlPayMode.SelectedValue == "2")
            {
                RBLCompanyCashorBankAcct.Visible = true;
                if (Convert.ToInt32(ddlbankname.SelectedValue) > 0)//Radio button selection only in front end
                {
                    RBLCompanyCashorBankAcct.SelectedValue = "1";
                }
                else
                {
                    RBLCompanyCashorBankAcct.SelectedValue = "0";
                }
                if (txtInstrumentNumber.Text != string.Empty)
                {
                    RBLCompanyCashorBankAcct.Enabled = false;
                    ddlbankname.ClearDropDownList();
                    ddlAcctNumber.ClearDropDownList();
                    ImageInstrumentDate.Visible = false;
                    //txtInstrumentNumber.ReadOnly = true;
                }
                else
                {
                    RBLCompanyCashorBankAcct.Enabled = true;
                    ImageInstrumentDate.Visible = true;
                }
            }


            if (ddlPayTo.SelectedValue == "50" && chkAccountBased.SelectedValue == "1")
            {
                FunDisableGLSLCodeGrid(true);
                FundisableGridValidation(false);
            }
            else
            {
                FunDisableGLSLCodeGrid(false);
                FundisableGridValidation(true);
            }
            FunChkDocdateReprintcheque();

            if (Convert.ToInt32(ddlPaymentStatus.SelectedValue) < 3)
            {
                btnPrintCheque.Visible = btnPrintVoucher.Visible = btnCoveringLetter.Visible = false;
            }

            if (Convert.ToInt32(ddlPaymentStatus.SelectedValue) > 2)
            {
                ddlbankname.ClearDropDownList();
                ddlAcctNumber.ClearDropDownList();
                RBLCompanyCashorBankAcct.Enabled = false;
            }


        }
        catch (Exception ex)
        {
        }
    }

    private void QueryView()
    {
        try
        {
            btnGo.Visible = false;
            btnPrintVoucher.Visible =
            btnPrintCheque.Visible =
            btnCoveringLetter.Visible =
            btnCancelPayment.Visible = false;
            RBLCompanyCashorBankAcct.Visible = false;
            //btnCalculate.Visible = false;

            FunPriLockControls(false);
            FunLockControlsInQueryMode();
            ddlChequeStatus.Visible = true;
            lblChequeStatus.Visible = true;
            //funshowPaymentdetailsgrid(strQsMode);

            fundisablecontrols("Q");

            if (ddlPayMode.SelectedValue == "1" || ddlPayMode.SelectedValue == "2")
            {
                TabPanelPBD.Enabled = true;
                txtInstrumentNumber.ReadOnly = true;
                txtInstrumentDate.ReadOnly = true;
                CalendarExtenderInstrumentDate.Enabled = false;
                ddlbankname.ClearDropDownList();
                if (ddlAcctNumber.Items.Count > 0)
                    ddlAcctNumber.ClearDropDownList();
                txtRemarks.ReadOnly = true;
                if (ddlPayMode.SelectedValue == "1")
                {
                    ddlChequeStatus.Visible = true;
                    lblChequeStatus.Visible = true;
                }
                else
                {
                    ddlChequeStatus.Visible = false;
                    lblChequeStatus.Visible = false;
                }
                if (ViewState["IsVoucher_Print"] != null)
                {
                    if (Convert.ToString(ViewState["IsVoucher_Print"]) == "P" || Convert.ToString(ViewState["IsVoucher_Print"]) == "D")  // enble btncheque only if the voucher was printed.
                    {
                        btnCoveringLetter.Visible = true;
                    }
                }
            }
            else
                TabPanelPBD.Enabled = false;
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunChkDocdateReprintcheque()
    {
        if (DateTime.Now > Utility.StringToDate(txtPaymentRequestDate.Text).AddMonths(1))
        {
            btnPrintCheque.Enabled = false;
            if (btnPrintCheque.Text == "Print Cheque")
            {
                btnCoveringLetter.Enabled = false;
            }
            else
            {
                btnCoveringLetter.Enabled = true;
            }
        }
    }

    private void FunEnableDisableInstrumentTabs(bool blnflag)
    {

        TabPanelPBD.Enabled = blnflag;
        rfvbankname.Enabled = blnflag;
        rfvbanknameC.Enabled =
            rfvtxtGLCodeC.Enabled =
        rfvtxtGLCode.Enabled = blnflag;
        RFVAcctNumber.Enabled = blnflag;
        RFVAcctNumberC.Enabled = blnflag;
        RFVIFSC_CodeC.Enabled = blnflag;
        RFVIFSC_Code.Enabled = blnflag;

        rfvtxtInstrumentNumber.Enabled = blnflag;
        rfvtxtInstrumentDate.Enabled = blnflag;

    }


    private void FunPriLoadFormControls()
    {
        try
        {
            if (Procparam != null)
            {
                Procparam.Clear();
            }
            else
            {
                Procparam = new Dictionary<string, string>();
            }

            Procparam.Add("@Company_ID", intCompanyID.ToString());
            Procparam.Add("@Request_No", strRequestID);
            FunPriLoadFormControls(Utility.GetDefaultData("S3G_TA_GetPaymentRequest", Procparam));
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void FunPriLoadFormControls(DataTable dtPaymentRequest)
    {
        if (dtPaymentRequest != null && dtPaymentRequest.Rows.Count > 0)
        {
            ddlLOB.SelectedValue = dtPaymentRequest.Rows[0]["LOB_ID"].ToString();
            //ddlBranch.SelectedValue = dtPaymentRequest.Rows[0]["Branch_ID"].ToString();
            ddlBranch.SelectedValue = dtPaymentRequest.Rows[0]["Location_ID"].ToString();
            txtPaymentRequestNo.Text = dtPaymentRequest.Rows[0]["Payment_Request_No"].ToString();
            txtPaymentRequestDate.Text = Convert.ToDateTime(Utility.StringToDate(dtPaymentRequest.Rows[0]["Payment_Request_Date"].ToString())).ToString(strDateFormat);
            txtValueDate.Text = Convert.ToDateTime(Utility.StringToDate(dtPaymentRequest.Rows[0]["Value_Date"].ToString())).ToString(strDateFormat);
            ddlPayMode.SelectedValue = dtPaymentRequest.Rows[0]["Pay_Mode_Code"].ToString();
            if (ddlPayMode.SelectedValue != "3")
            {
                TabPanelPBD.Enabled = true;
            }
            else
            {
                TabPanelPBD.Enabled = false;
            }
            chkAccountBased.SelectedValue = dtPaymentRequest.Rows[0]["Account_Based"].ToString();
            ddlCurrencyCode.SelectedValue = dtPaymentRequest.Rows[0]["Currency_ID"].ToString();

            //txtDocAmount.Text = Convert.ToDecimal(dtPaymentRequest.Rows[0]["Pay_Amount"].ToString()).ToString("0.00"); // doc Amount
            txtDocAmount.Text = dtPaymentRequest.Rows[0]["Pay_Amount"].ToString();
            ddlPayTo.SelectedValue = dtPaymentRequest.Rows[0]["Pay_To_Type_Code"].ToString(); // paytotypecode in DB

            FunPriLoadPayType(ddlPayTo.SelectedValue, 0);
            ddlPaymentStatus.SelectedValue = dtPaymentRequest.Rows[0]["Pmt_Voucher_status"].ToString();

            ViewState["IsVoucher_Print"] = dtPaymentRequest.Rows[0]["IsVoucher_Print"].ToString();  // N- not printed, P - Printed, D - Duplicate

            ViewState["IsCheque_Print"] = dtPaymentRequest.Rows[0]["IsCheque_Print"].ToString();    // N- not printed, P - Printed, D - Duplicate


            // ddlPaymentStatus.SelectedValue = dtPaymentRequest.Rows[0]["Status"].ToString();
            //For Instrument 
            if (dtPaymentRequest.Rows[0]["Bank_ID"] != null && Convert.ToString(dtPaymentRequest.Rows[0]["Bank_ID"]) != string.Empty && Convert.ToInt32(dtPaymentRequest.Rows[0]["Bank_ID"]) > 0)
            {
                ddlbankname.SelectedValue = dtPaymentRequest.Rows[0]["Bank_ID"].ToString();
                FunPriLoadAcctNumbers();
            }
            if (dtPaymentRequest.Rows[0]["GL_ACCOUNT"] != null && Convert.ToString(dtPaymentRequest.Rows[0]["GL_ACCOUNT"]) != string.Empty)
                txtGLCode.Text = dtPaymentRequest.Rows[0]["GL_ACCOUNT"].ToString();
            if (dtPaymentRequest.Rows[0]["SL_ACCOUNT"] != null && Convert.ToString(dtPaymentRequest.Rows[0]["SL_ACCOUNT"]) != string.Empty)
                txtSLCode.Text = dtPaymentRequest.Rows[0]["SL_ACCOUNT"].ToString();
            if (dtPaymentRequest.Rows[0]["Instrument_No"] != null && Convert.ToString(dtPaymentRequest.Rows[0]["Instrument_No"]) != string.Empty)
                txtInstrumentNumber.Text = dtPaymentRequest.Rows[0]["Instrument_No"].ToString();
            if (dtPaymentRequest.Rows[0]["Instrument_Date"] != null && Convert.ToString(dtPaymentRequest.Rows[0]["Instrument_Date"]) != string.Empty)
                txtInstrumentDate.Text = Convert.ToDateTime(Utility.StringToDate(dtPaymentRequest.Rows[0]["Instrument_Date"].ToString())).ToString(strDateFormat);
            if (dtPaymentRequest.Rows[0]["branchname"] != null && Convert.ToString(dtPaymentRequest.Rows[0]["branchname"]) != string.Empty)
                ViewState["BankBranch"] = dtPaymentRequest.Rows[0]["branchname"].ToString();
            if (dtPaymentRequest.Rows[0]["ACCT_NUMBER"] != null && Convert.ToString(dtPaymentRequest.Rows[0]["ACCT_NUMBER"]) != string.Empty)
                ViewState["AccountNumber"] = dtPaymentRequest.Rows[0]["ACCT_NUMBER"].ToString();
            if (dtPaymentRequest.Rows[0]["BankMaster_Details_ID"] != null && Convert.ToString(dtPaymentRequest.Rows[0]["BankMaster_Details_ID"]) != string.Empty)
                ddlAcctNumber.SelectedValue = dtPaymentRequest.Rows[0]["BankMaster_Details_ID"].ToString();
            if (dtPaymentRequest.Rows[0]["branchname"] != null && Convert.ToString(dtPaymentRequest.Rows[0]["branchname"]) != string.Empty)
                txtBankbranch.Text = dtPaymentRequest.Rows[0]["branchname"].ToString();
            if (dtPaymentRequest.Rows[0]["IFSC_CODE"] != null && Convert.ToString(dtPaymentRequest.Rows[0]["IFSC_CODE"]) != string.Empty)
                txtIFSC_Code.Text = dtPaymentRequest.Rows[0]["IFSC_CODE"].ToString();
            //For RadiobuttonSelection

            if (ddlPayMode.SelectedValue == "1")
            {
                if (dtPaymentRequest.Rows[0]["IsCheque_Print"].ToString() != null && dtPaymentRequest.Rows[0]["IsVoucher_Print"].ToString() != string.Empty)
                {
                    if (Convert.ToString(dtPaymentRequest.Rows[0]["IsCheque_Print"]).Trim() != "N")
                    {
                        btnPrintCheque.Text = "Reprint Cheque";
                        FunPriSetRemarksMandatory(true);
                    }
                    else
                    {
                        FunPriSetRemarksMandatory(false);
                        btnPrintCheque.Text = "Print Cheque";
                    }

                    //For Cheque status
                    FunPriToSetChequeStatus(dtPaymentRequest.Rows[0]["IsCheque_Print"].ToString());
                    //FunPriLoadBankCodes();
                }

            }
            FunPriGetExchangeRate();

            if (Convert.ToInt32(ddlPaymentStatus.SelectedValue) == 2 || Convert.ToInt32(ddlPaymentStatus.SelectedValue) == 4 || Convert.ToInt32(ddlPaymentStatus.SelectedValue) == 5)
            {
                FunPriLockControls(false);
            }



            //if (!(string.IsNullOrEmpty(dtPaymentRequest.Rows[0]["Entity_ID"].ToString())))
            //{
            //    PnlCustEntityInformation.Enabled = true;
            //    ucCustomerCodeLov.ButtonEnabled = true;
            //    ucCustomerAddress.Caption = "Customer";
            //    FunPriLoadCustomerEntityDtls(dtPaymentRequest.Rows[0]["Customer_ID"].ToString());
            //    /*ddlCustomerCode.SelectedValue = dtPaymentRequest.Rows[0]["Customer_ID"].ToString();
            //    txtCustomerName.Text = dtPaymentRequest.Rows[0]["Customer_Name"].ToString();
            //    txtAddress.Text = dtPaymentRequest.Rows[0]["Comm_Address1"].ToString() + "\n" +
            //                    dtPaymentRequest.Rows[0]["Comm_Address2"].ToString() + "\n" +
            //                    dtPaymentRequest.Rows[0]["Comm_City"].ToString() + "\n" +
            //                    dtPaymentRequest.Rows[0]["Comm_State"].ToString() + "\n" +
            //                    dtPaymentRequest.Rows[0]["Comm_Country"].ToString() + "\n" +
            //                    dtPaymentRequest.Rows[0]["Comm_Pincode"].ToString();
            //    txtMobile.Text = dtPaymentRequest.Rows[0]["Comm_Mobile"].ToString();
            //    txtTelePhone.Text = dtPaymentRequest.Rows[0]["Comm_Telephone"].ToString();
            //    txtEMail.Text = dtPaymentRequest.Rows[0]["Comm_EMail"].ToString();
            //    txtwebsite.Text = dtPaymentRequest.Rows[0]["Comm_Website"].ToString();*/
            //}

            //else
            //{
                PnlCustEntityInformation.Enabled = true;
                ucCustomerCodeLov.ButtonEnabled = false;
                ucCustomerAddress.Caption = "Entity";
                FunPriLoadCustomerEntityDtls(dtPaymentRequest.Rows[0]["Entity_ID"].ToString());

            //}

            if (ddlPayTo.SelectedIndex > 0)
            {
                if (ddlPayTo.SelectedValue == "11")
                {
                    ucCustomerAddress.Caption = "Insurance Company";
                    lblCode.Text = "Insurance Company Code";
                }

            }
            // Added for Bank details cannot modify one time if it is created....as per bashyam sir on 13/10/2011

            if (ddlPayMode.SelectedIndex > 0)//for cheque
            {
                if (ddlPayMode.SelectedValue == "1" && Convert.ToInt32(ddlPaymentStatus.SelectedValue) > 2)
                {
                    if (dtPaymentRequest.Rows[0]["IsCheque_Print"].ToString() != null && dtPaymentRequest.Rows[0]["IsCheque_Print"].ToString() != "N")
                    {
                        ddlbankname.ClearDropDownList();
                        ddlAcctNumber.ClearDropDownList();
                        //ImageInstrumentDate.Visible = false;
                    }
                }

            }

        }
    }

    private void FunPriToSetChequeStatus(string chequeStatus)
    {
        switch (chequeStatus)
        {
            case "N":
                ddlChequeStatus.SelectedValue = "1";
                break;
            case "P":
                ddlChequeStatus.SelectedValue = "2";
                break;
            case "D":
                ddlChequeStatus.SelectedValue = "3";
                break;
            default:
                ddlChequeStatus.SelectedValue = "1";
                break;
        }
    }

    private void FunPriLockControls(bool blnLock)
    {
        // other controls (other than textboxes)
        ddlLOB.Enabled =
        ddlBranch.Enabled =

        imgValueDate.Visible =

        ddlPayMode.Enabled =

        chkAccountBased.Enabled =
        ddlPayTo.Enabled =
        imgFromDate.Visible =
        imgToDate.Visible =

        btnSave.Enabled =
        btnCancelPayment.Enabled =
        blnLock;


        //txtCurrencyValue.ReadOnly =
        txtDocAmount.ReadOnly =
        txtFromDate.ReadOnly =
        txtToDate.ReadOnly =
        !blnLock;
    }


    private void GetQueryString()
    {
        if (Request.QueryString.Get("qsMode") != null)
        {
            if (string.Compare("Q", Request.QueryString.Get("qsMode")) == 0)
            {
                ViewState["IsVoucher_Print"] =
                ViewState["IsCheque_Print"] = "N";
                btnPrintCheque.Enabled =
                btnPrintVoucher.Enabled = true;
                strQsMode = "Q";
            }
            else if (string.Compare("M", Request.QueryString.Get("qsMode")) == 0)
            {
                strQsMode = "M";
            }
            else if (string.Compare("C", Request.QueryString.Get("qsMode")) == 0)
            {
                strQsMode = "C";
            }
            else
            {
                strQsMode = "D";//Dummy
            }
        }
        if (Request.QueryString.Get("qsViewId") != null)  // to get the Request ID
        {
            FormsAuthenticationTicket TicketViewID = FormsAuthentication.Decrypt(Request.QueryString.Get("qsViewId"));
            strRequestID = TicketViewID.Name;
        }
    }



    private void FunPriInitDropdownsControls()
    {
        FunPriLoadBranch();
        FunPriLoadLOB();
        FunPriLoadRequest();  // to do refer to DB - Lookup - once the SQL table design get over.
        FunPriLoadPayMode(); // to do refer to DB - Lookup - once the SQL table design get over.
        FunPriLoadCurrencyCode();
        FunPriLoadPayTo(); // to do refer to DB - Lookup - once the SQL table design get over.       
        //FunPriLoad_CustomerCode();
        FunPriLoadBankCodes();
        FunPriLoadChequeStatus();
        //FunPriLoadGLcodes();
        System.Web.UI.WebControls.ListItem liSelect = new System.Web.UI.WebControls.ListItem("--Select--", "0");
        ddlAcctNumber.Items.Insert(0, liSelect);
    }

    //SLCode
    private void FunPriLoadSLcodes(string GridType, string GLCODE)
    {
        DropDownList ddlFooterSL_Code = new DropDownList();
        if (Procparam == null)
            Procparam = new Dictionary<string, string>();
        else
            Procparam.Clear();
        Procparam.Add("@Option", "12");
        Procparam.Add("@Company_ID", intCompanyID.ToString());
        if (GLCODE != "" || GLCODE != string.Empty)
            Procparam.Add("@GLCode", GLCODE);
        switch (GridType)
        {
            case "PD":
                ddlFooterSL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSL_Code");
                break;
            case "PA":
                ddlFooterSL_Code = ((DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterSL_Code"));
                break;
        }
        ddlFooterSL_Code.BindDataTable("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam, new string[] { "SL_Code", "SL_Code" });
    }

    //GL Code
    private void FunPriLoadGLcodes()
    {
        if (Procparam == null)
            Procparam = new Dictionary<string, string>();
        else
            Procparam.Clear();
        Procparam.Add("@Option", "12");
        Procparam.Add("@Company_ID", intCompanyID.ToString());
        //DataSet DS = Utility.GetDataset("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam);
        //if (DS.Tables[0].Rows.Count > 0)
        //{
        if (chkAccountBased.SelectedValue == "1")
            Procparam.Add("@OptionPay_To", "1");
        if (grvPaymentDetails.FooterRow != null)
        {
            DropDownList ddlFooterGL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterGL_Code");
            ddlFooterGL_Code.BindDataTable("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam, new string[] { "GL_Code", "GL_Code" });
        }
        if (grvPaymentAdjustment.FooterRow != null)
        {
            DropDownList ddlFooterGL_Code = ((DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterGL_Code"));
            ddlFooterGL_Code.BindDataTable("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam, new string[] { "GL_Code", "GL_Code" });

        }
        //}
    }

    //Bank Codes
    private void FunPriLoadBankCodes()
    {
        try
        {
            if (Procparam == null)
                Procparam = new Dictionary<string, string>();
            else
                Procparam.Clear();
            Procparam.Add("@Option", "1");
            Procparam.Add("@Company_ID", intCompanyID.ToString());
            //if (Convert.ToInt32(ddlLOB.SelectedValue) > 0)
            //    Procparam.Add("@LobID", ddlLOB.SelectedValue);
            if (Convert.ToInt32(ddlBranch.SelectedValue) > 0)
                Procparam.Add("@LocationID", ddlBranch.SelectedValue);
            ddlbankname.BindDataTable("S3G_ORG_GetPmtReqBankdetails", Procparam, new string[] { "SYS_BANK_CODE", "BANK_NAME" });
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }



    /// <summary>
    /// this is to add tooltip to your dropdown box 
    /// </summary>
    /// <param name="dt_PaymentEntityPANSANDetails"></param>

    private void FunPriAddToolTip(DropDownList ddl)
    {
        if (ddl != null && ddl.Items.Count > 0)
        {
            for (int i = 0; i < ddl.Items.Count; i++)
            {
                ddl.Items[i].Attributes.Add("title", ddl.Items[i].Text);
            }
        }
    }



    protected void txtInstrumentDate_OnTextChanged(object sender, EventArgs e)
    {
        try
        {
            string Keyvalue = S3GBusEntity.ClsPubConfigReader.FunPubReadConfig("InstrumentDate");
            if ((Utility.StringToDate(txtInstrumentDate.Text) < (DateTime.Now.AddDays(-Convert.ToInt32(Keyvalue)))) ||
                (Utility.StringToDate(txtInstrumentDate.Text) > (DateTime.Now.AddDays(Convert.ToInt32(Keyvalue)))))
            {
                Utility.FunShowAlertMsg(this, "Instrument Date cannot be lesser or greater than " + Keyvalue + " days");
                txtInstrumentDate.Text = "";
                return;
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void Desc_TextChanged(object sender, EventArgs e)
    {
        try
        {
            TextBox txt = (TextBox)sender;
            GridViewRow gvRow = (GridViewRow)txt.Parent.Parent;
            Label lblActualAmount = (Label)grvPaymentDetails.Rows[gvRow.RowIndex].FindControl("lblActualAmount");
            Label lblPrimeAccountNumber = (Label)grvPaymentDetails.Rows[gvRow.RowIndex].FindControl("lblPrimeAccountNumber");
            Label lblSubAccountNumber = (Label)grvPaymentDetails.Rows[gvRow.RowIndex].FindControl("lblSubAccountNumber");
            Label lblPayTypeID = (Label)grvPaymentDetails.Rows[gvRow.RowIndex].FindControl("lblPayTypeID");
            TextBox lblAmount = (TextBox)grvPaymentDetails.Rows[gvRow.RowIndex].FindControl("lblAmount");
            TextBox lblDescription = (TextBox)grvPaymentDetails.Rows[gvRow.RowIndex].FindControl("lblDescription");

            if (Convert.ToDecimal(lblAmount.Text) == 0)
            {
                Utility.FunShowAlertMsg(this, "Amount cannot be zero");
                lblAmount.Text = lblActualAmount.Text;
                return;
            }
            if ((lblPrimeAccountNumber.Text != "" || lblPrimeAccountNumber.Text != string.Empty))
            {
                if (Convert.ToDecimal(lblAmount.Text) > Convert.ToDecimal(lblActualAmount.Text))
                {
                    Utility.FunShowAlertMsg(this, "Amount should not exceed Rs." + lblActualAmount.Text);
                    lblAmount.Text = lblActualAmount.Text;
                    return;
                }
            }
            if (lblPayTypeID.Text == "215")
            {
                if (Convert.ToDecimal(lblAmount.Text) > Convert.ToDecimal(lblActualAmount.Text))
                {
                    Utility.FunShowAlertMsg(this, "Amount should not exceed Rs. " + lblActualAmount.Text);
                    lblAmount.Text = lblActualAmount.Text;
                    return;
                }
            }
            calcSumAmountDetails();
            calcSumAmount();
            Funupdatedatatable();
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }

    protected void RBLCompanyCashorBankAcct_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (RBLCompanyCashorBankAcct.SelectedValue == "0")
        {
            rfvbankname.Enabled =
            rfvtxtGLCode.Enabled =
            rfvbanknameC.Enabled =
            RFVAcctNumber.Enabled =
            RFVIFSC_Code.Enabled =
             RFVAcctNumberC.Enabled =
            RFVIFSC_CodeC.Enabled =
            rfvtxtGLCodeC.Enabled = false;
            lblBankName.CssClass = "styleDisplayLabel";
            lblGLcode.CssClass = "styleDisplayLabel";
            lblAcctnumber.CssClass = "styleDisplayLabel";
            lblIFSC_Code.CssClass = "styleDisplayLabel";
            txtInstrumentDate.Text = txtInstrumentNumber.Text = txtGLCode.Text = txtSLCode.Text = txtBankbranch.Text =
                txtIFSC_Code.Text = "";
            ddlbankname.SelectedIndex = -1;
            ddlAcctNumber.SelectedIndex = -1;
        }
        else
        {
            rfvbankname.Enabled =
            rfvtxtGLCode.Enabled =
            rfvbanknameC.Enabled =
           RFVAcctNumber.Enabled =
            RFVIFSC_Code.Enabled =
             RFVAcctNumberC.Enabled =
            RFVIFSC_CodeC.Enabled =
            rfvtxtGLCodeC.Enabled = true;
            lblBankName.CssClass = "styleReqFieldLabel";
            lblGLcode.CssClass = "styleReqFieldLabel";
            lblAcctnumber.CssClass = "styleReqFieldLabel";
            lblIFSC_Code.CssClass = "styleReqFieldLabel";
            txtInstrumentDate.Text = txtInstrumentNumber.Text = txtGLCode.Text = txtSLCode.Text = txtBankbranch.Text =
                txtIFSC_Code.Text = "";
            ddlbankname.SelectedIndex = -1;
            ddlAcctNumber.SelectedIndex = -1;
        }
    }


    protected void ddlAcctNumber_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (Procparam == null)
            Procparam = new Dictionary<string, string>();
        else
            Procparam.Clear();
        Procparam.Add("@Option", "5");
        Procparam.Add("@SYS_BANK_CODE", ddlAcctNumber.SelectedValue);
        DataSet DS = Utility.GetDataset("S3G_ORG_GetPmtReqBankdetails", Procparam);

        if (DS.Tables[0].Rows.Count > 0)
        {
            txtIFSC_Code.Text = DS.Tables[0].Rows[0]["IFSC_CODE"].ToString();
            txtBankbranch.Text = DS.Tables[0].Rows[0]["branchname"].ToString();
            txtGLCode.Text = DS.Tables[0].Rows[0]["GL_ACCOUNT"].ToString();
            txtSLCode.Text = DS.Tables[0].Rows[0]["SL_ACCOUNT"].ToString();
            if (ddlPaymentStatus.SelectedValue == "3")
            {
                if (ddlPayMode.SelectedValue == "1")
                    txtInstrumentNumber.Text = DS.Tables[0].Rows[0]["LAST_USED_NUMBER"].ToString();
                txtInstrumentDate.Text = DateTime.Now.ToString(strDateFormat);
            }
            txtRemarks.Text = "";
            ViewState["BankBranch"] = DS.Tables[0].Rows[0]["branchname"].ToString();
            ViewState["AccountNumber"] = DS.Tables[0].Rows[0]["ACCT_NUMBER"].ToString();

        }
    }


    protected void ddlbankname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        txtInstrumentDate.Text =
            txtGLCode.Text =
            txtInstrumentNumber.Text =
            txtIFSC_Code.Text =
            txtBankbranch.Text =
            txtSLCode.Text = "";
        if (ddlAcctNumber.Items.Count > 0 && ddlAcctNumber.SelectedIndex > 0)
            ddlAcctNumber.SelectedIndex = -1;
        if (ddlbankname.SelectedIndex > 0)
            //FunPriLoadBankdetails();
            FunPriLoadAcctNumbers();

    }


    private void FunPriLoadAcctNumbers()
    {
        try
        {

            if (Procparam == null)
                Procparam = new Dictionary<string, string>();
            else
                Procparam.Clear();
            Procparam.Add("@Option", "2");
            Procparam.Add("@Company_ID", intCompanyID.ToString());
            Procparam.Add("@SYS_BANK_CODE", ddlbankname.SelectedValue);
            DataSet DS = Utility.GetDataset("S3G_ORG_GetPmtReqBankdetails", Procparam);
            if (DS.Tables[0].Rows.Count > 0)
            {
                if (DS.Tables[0].Rows[0]["ErrorCode"].ToString() == "54")
                {
                    Utility.FunShowAlertMsg(this, "Selected bank GLCode is not in Account setup master.");
                    ddlbankname.SelectedIndex = -1;
                    return;
                }
            }


            if (Procparam == null)
                Procparam = new Dictionary<string, string>();
            else
                Procparam.Clear();
            Procparam.Add("@Option", "4");
            Procparam.Add("@SYS_BANK_CODE", ddlbankname.SelectedValue);
            ddlAcctNumber.BindDataTable("S3G_ORG_GetPmtReqBankdetails", Procparam, new string[] { "BankMaster_Details_ID", "ACCT_NUMBER" });
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    private void FunPriLoadChequeStatus()
    {
        try
        {
            if (Procparam == null)
                Procparam = new Dictionary<string, string>();
            else
                Procparam.Clear();
            Procparam.Add("@Option", "14");
            Procparam.Add("@Company_ID", intCompanyID.ToString());
            ddlChequeStatus.BindDataTable("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam, new string[] { "ChequeStatusID", "ChequeStatus" });
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void FunPriLoadBankdetailsPmtReq()
    {
        try
        {
            if (Procparam == null)
                Procparam = new Dictionary<string, string>();
            else
                Procparam.Clear();
            Procparam.Add("@Option", "3");
            Procparam.Add("@Company_ID", intCompanyID.ToString());
            Procparam.Add("@Request_No", strRequestID);
            DataSet DS = Utility.GetDataset("S3G_ORG_GetPmtReqBankdetails", Procparam);
            if (DS.Tables[0].Rows.Count > 0)
            {
                txtGLCode.Text = DS.Tables[0].Rows[0]["GL_ACCOUNT"].ToString();
                txtSLCode.Text = DS.Tables[0].Rows[0]["SL_ACCOUNT"].ToString();
                //if (ddlPayMode.SelectedValue == "1")
                txtInstrumentNumber.Text = DS.Tables[0].Rows[0]["Instrument_No"].ToString();
                txtInstrumentDate.Text = Convert.ToDateTime(DS.Tables[0].Rows[0]["Instrument_Date"].ToString()).ToString(strDateFormat);
                txtRemarks.Text = "";

            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw;
        }
    }



    private void FunPriLoadBankdetails()
    {
        try
        {
            if (Procparam == null)
                Procparam = new Dictionary<string, string>();
            else
                Procparam.Clear();
            Procparam.Add("@Option", "2");
            Procparam.Add("@Company_ID", intCompanyID.ToString());
            Procparam.Add("@SYS_BANK_CODE", ddlbankname.SelectedValue);
            DataSet DS = Utility.GetDataset("S3G_ORG_GetPmtReqBankdetails", Procparam);
            if (DS.Tables[1].Rows.Count > 0)
            {
                if (DS.Tables[1].Rows[0]["ErrorCode"].ToString() == "54")
                {
                    Utility.FunShowAlertMsg(this, "Selected bank GLCode is not in Account setup master.");
                    return;
                }
            }
            /*if (DS.Tables[0].Rows.Count > 0)
             {
                 txtGLCode.Text = DS.Tables[0].Rows[0]["GL_ACCOUNT"].ToString();
                 txtSLCode.Text = DS.Tables[0].Rows[0]["SL_ACCOUNT"].ToString();
                 if (ddlPayMode.SelectedValue == "1")
                     txtInstrumentNumber.Text = DS.Tables[0].Rows[0]["LAST_USED_NUMBER"].ToString();
                 txtRemarks.Text = "";
                 ViewState["BankBranch"] = DS.Tables[0].Rows[0]["branchname"].ToString();
                 ViewState["AccountNumber"] = DS.Tables[0].Rows[0]["ACCT_NUMBER"].ToString();
             }*/
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void ddlPayType_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (ddlPayType.SelectedIndex > 0)
            {
                btnGo.Enabled = true;
                RFVtxtFromDate.Enabled = RFVtxtToDate.Enabled = true;
                lblFromDate.CssClass = "styleReqFieldLabel";
                lblToDate.CssClass = "styleReqFieldLabel";
                //if (grvPaymentDetails != null && grvPaymentDetails.FooterRow != null)
                //{
                //    grvPaymentDetails.FooterRow.Visible = false;
                //}
            }
            else
            {
                btnGo.Enabled = false;
                RFVtxtFromDate.Enabled = RFVtxtToDate.Enabled = false;
                txtFromDate.Text = txtToDate.Text = "";
                lblFromDate.CssClass = "styleDisplayLabel";
                lblToDate.CssClass = "styleDisplayLabel";
                //if (grvPaymentDetails != null && grvPaymentDetails.FooterRow != null)
                //{
                //    grvPaymentDetails.FooterRow.Visible = true;
                //}

            }
            //fundisablepaymentdtlsgrid();
            //FunPriLoadPaytypeingrid(ddlPayTo.SelectedValue);
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void ddlPayMode_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (ddlPayMode.SelectedValue == "3")
            {
                TabPanelPBD.Enabled = false;
            }
            else
            {
                TabPanelPBD.Enabled = true;
                if (ddlPayMode.SelectedValue == "2")
                {
                    RBLCompanyCashorBankAcct.Visible = true;
                    RBLCompanyCashorBankAcct.Enabled = true;
                    txtInstrumentNumber.ReadOnly = false;
                }
                else
                {
                    RBLCompanyCashorBankAcct.Enabled = false;
                    RBLCompanyCashorBankAcct.Visible = false;
                    txtInstrumentNumber.ReadOnly = true;
                    rfvBankNameSave.Enabled = rfvAcctNumberSave.Enabled = true;
                }
                FunPriLoadBankCodes();
            }
            txtInstrumentDate.Text = txtInstrumentNumber.Text = txtGLCode.Text = txtSLCode.Text = txtBankbranch.Text =
               txtIFSC_Code.Text = "";
            ddlbankname.SelectedIndex = -1;
            ddlAcctNumber.SelectedIndex = -1;

        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void ddlPayTo_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            FunGridBlank();
            RFVtxtFromDate.Enabled = RFVtxtToDate.Enabled = false;
            txtFromDate.Text = txtToDate.Text = "";
            lblFromDate.CssClass = "styleDisplayLabel";
            lblToDate.CssClass = "styleDisplayLabel";
            PnlCustEntityInformation.Enabled = true;
            ucCustomerCodeLov.ButtonEnabled = true;
            rfvcmbCustomer.Enabled = true;
            RequiredFieldValidator8.Enabled = true;
            chkAccountBased.Enabled = false;//this is applicable only for general
            chkAccountBased.SelectedValue = "0";
            TextBox txtCode = ucCustomerCodeLov.FindControl("txtName") as TextBox;
            txtCode.Text = "";
            txtCustomerCode.Text = "";
            ucCustomerAddress.ClearCustomerDetails();
            ViewState["hdnCustorEntityID"] = null;
            lblCode.Text = "Customer/Entity";
            rfvcmbCustomer.ErrorMessage = RequiredFieldValidator8.ErrorMessage = "Select a Customer/Entity";
            //PanelPaymentAdjustment.Visible = true;
            if (ddlPayTo != null && ddlPayTo.SelectedIndex > 0)
            {

                ddlPayType.Items.Clear();
                ddlPayType.Enabled = true;
                FunPriLoadPayType(ddlPayTo.SelectedValue, 0);
                FunPriLoadGLcodes();
                if (ddlPayTo.SelectedValue == "50")
                {
                    PnlCustEntityInformation.Enabled = false;
                    ucCustomerCodeLov.ButtonEnabled = false;
                    ddlPayType.Enabled = true;
                    FunPriLoadPANUM();
                    if (chkAccountBased.SelectedValue == "1")
                    {
                        FunDisableGLSLCodeGrid(true);
                        FundisableGridValidation(false);
                    }
                    else
                    {
                        FunDisableGLSLCodeGrid(false);
                        FundisableGridValidation(true);
                    }
                    rfvcmbCustomer.Enabled = false;
                    RequiredFieldValidator8.Enabled = false;
                    chkAccountBased.Enabled = true;
                    //if (chkAccountBased.SelectedValue == "1")
                    //{
                    //    FunProAcctBasedCtrlsValidation(false);
                    //}
                    //else
                    //{
                    //    FunProAcctBasedCtrlsValidation(true);
                    //}
                }
                else if (ddlPayTo.SelectedValue == "1")
                {

                    ucCustomerAddress.Caption = "Customer";
                    FunDisableGLSLCodeGrid(false);
                    FundisableGridValidation(true);
                }
                else if (ddlPayTo.SelectedValue == "11")
                {

                    ucCustomerAddress.Caption = "Insurance Company";
                    rfvcmbCustomer.ErrorMessage = RequiredFieldValidator8.ErrorMessage = "Select a Insurance Company";
                    lblCode.Text = "Insurance Company Code";
                    FunDisableGLSLCodeGrid(false);
                    FundisableGridValidation(true);
                }
                else
                {
                    ucCustomerAddress.Caption = "Entity";
                    FunDisableGLSLCodeGrid(false);
                    FundisableGridValidation(true);
                }

            }
            else
            {
                if (ddlPayType != null && ddlPayType.Items.Count > 0)
                {
                    ddlPayType.Items.Clear();
                    ddlPayType.Enabled = false;

                }
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FundisableGridValidation(bool blnflag)
    {
        if (grvPaymentDetails.FooterRow != null)
        {
            RequiredFieldValidator RFVddlPrimeAccountNumber = (RequiredFieldValidator)grvPaymentDetails.FooterRow.FindControl("RFVddlPrimeAccountNumber");
            RequiredFieldValidator RFVddlFooterFlowType = (RequiredFieldValidator)grvPaymentDetails.FooterRow.FindControl("RFVddlFooterFlowType");
            RFVddlPrimeAccountNumber.Enabled = RFVddlFooterFlowType.Enabled = blnflag;
        }
        if (grvPaymentAdjustment.FooterRow != null)
        {
            RequiredFieldValidator RFVddlPrimeAccountNumberA = (RequiredFieldValidator)grvPaymentAdjustment.FooterRow.FindControl("RFVddlPrimeAccountNumber");
            RequiredFieldValidator RFVddlFooterFlowTypeA = (RequiredFieldValidator)grvPaymentAdjustment.FooterRow.FindControl("RFVddlFooterFlowType");
            RFVddlPrimeAccountNumberA.Enabled = RFVddlFooterFlowTypeA.Enabled = blnflag;
        }
    }

    private void FunDisableGLSLCodeGrid(bool blnflag)
    {
        if (grvPaymentDetails.FooterRow != null)
        {
            DropDownList ddlFooterGL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterGL_Code");
            DropDownList ddlFooterSL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSL_Code");
            TextBox txtFooterAmount = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterAmount");

            ddlFooterGL_Code.Enabled = ddlFooterSL_Code.Enabled = blnflag;
            if (ddlPayTo.SelectedValue == "50")
            {
                txtFooterAmount.ReadOnly = true;
                if (chkAccountBased.SelectedValue == "1")
                    txtFooterAmount.ReadOnly = false;
            }
            else if (ddlPayTo.SelectedValue == "11")
            {
                txtFooterAmount.ReadOnly = true;
            }
            else
            {
                txtFooterAmount.ReadOnly = false;
            }

        }
        if (grvPaymentAdjustment.FooterRow != null)
        {
            DropDownList ddlFooterGL_CodeA = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterGL_Code");
            DropDownList ddlFooterSL_CodeA = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterSL_Code");
            ddlFooterGL_CodeA.Enabled = ddlFooterSL_CodeA.Enabled = blnflag;
        }
    }



    private void FunPriLoadPayType(string strPayto, int selopt) // To do: here I want to use the SQL Lookup table once the sql  table design get over.
    {
        try
        {
            string strProcName = "S3G_LOANAD_GetPaymentTypedetails";
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_ID", intCompanyID.ToString());
            Procparam.Add("@LOB_ID", ddlLOB.SelectedValue);
            if (ddlLOB.SelectedItem.Text.ToLower().Split('-')[0].ToString().Trim() == "ol")
            {
                Procparam.Add("@LOB_Code", "OL");
            }
            switch (strPayto.ToLower())
            {
                case "50":
                    Procparam.Add("@Option", "1");
                    if (selopt == 0)
                        ddlPayType.BindDataTable(strProcName, Procparam, new string[] { "ID", "Name" });
                    if (grvPaymentDetails.FooterRow != null)
                    {
                        DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
                        ddlFooterFlowType.BindDataTable(strProcName, Procparam, new string[] { "ID", "Name" });
                    }
                    if (grvPaymentAdjustment.FooterRow != null)
                    {
                        DropDownList ddlFooterPayType = ((DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPayType"));
                        ddlFooterPayType.BindDataTable(strProcName, Procparam, new string[] { "ID", "Name" });

                    }
                    break;
                case "1":
                    Procparam.Add("@Option", "2");
                    if (selopt == 0)
                        ddlPayType.BindDataTable(strProcName, Procparam, new string[] { "CashFlow_ID", "CashFlowFlag_Desc" });
                    if (grvPaymentDetails.FooterRow != null)
                    {
                        DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
                        ddlFooterFlowType.BindDataTable(strProcName, Procparam, new string[] { "CashFlow_ID", "CashFlowFlag_Desc" });


                    }
                    if (grvPaymentAdjustment.FooterRow != null)
                    {
                        Procparam.Add("@Adjustmentvalue", "1");
                        DropDownList ddlFooterPayType = ((DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPayType"));
                        ddlFooterPayType.BindDataTable(strProcName, Procparam, new string[] { "CashFlow_ID", "CashFlowFlag_Desc" });
                    }
                    break;
                case "11":
                    Procparam.Add("@Option", "5");
                    if (selopt == 0)
                        ddlPayType.BindDataTable(strProcName, Procparam, new string[] { "CashFlow_ID", "CashFlowFlag_Desc" });
                    if (grvPaymentDetails.FooterRow != null)
                    {
                        DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
                        ddlFooterFlowType.BindDataTable(strProcName, Procparam, new string[] { "CashFlow_ID", "CashFlowFlag_Desc" });


                    }
                    if (grvPaymentAdjustment.FooterRow != null)
                    {
                        Procparam.Add("@Adjustmentvalue", "1");
                        DropDownList ddlFooterPayType = ((DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPayType"));
                        ddlFooterPayType.BindDataTable(strProcName, Procparam, new string[] { "CashFlow_ID", "CashFlowFlag_Desc" });
                    }
                    break;
                default:
                    Procparam = new Dictionary<string, string>();
                    Procparam.Add("@Option", "4");
                    Procparam.Add("@Company_ID", intCompanyID.ToString());
                    Procparam.Add("@Param1", ddlLOB.SelectedValue);
                    if (PageMode == PageModes.Create)
                    {
                        Procparam.Add("@Mode", "1");
                    }

                    if (selopt == 0)
                        ddlPayType.BindDataTable("S3G_TA_GetDetailsForPayment", Procparam, new string[] { "CashFlow_ID", "CashFlowFlag_Desc" });

                    if (grvPaymentDetails.FooterRow != null)
                    {
                        DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
                        ddlFooterFlowType.BindDataTable("S3G_TA_GetDetailsForPayment", Procparam, new string[] { "CashFlow_ID", "CashFlowFlag_Desc" });

                    }
                    if (grvPaymentAdjustment.FooterRow != null)
                    {
                        DropDownList ddlFooterPayType = ((DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPayType"));
                        ddlFooterPayType.BindDataTable("S3G_TA_GetDetailsForPayment", Procparam, new string[] { "CashFlow_ID", "CashFlowFlag_Desc" });
                    }
                    break;

            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }




    private void FunPriLoadPayTo() // To do: here I want to use the SQL Lookup table once the sql  table design get over.
    {
        try
        {
            if (Procparam != null)
                Procparam.Clear();
            else
                Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_ID", intCompanyID.ToString());
            Procparam.Add("@Option", "10");
            ddlPayTo.BindDataTable("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam, new string[] { "Lookup_Code", "Lookup_Description" });
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    private void FunPriLoadCurrencyCode()
    {
        try
        {
            if (Procparam != null)
                Procparam.Clear();
            else
                Procparam = new Dictionary<string, string>();

            Procparam.Add("@Company_ID", intCompanyID.ToString());

            if (ddlCurrencyCode != null)
            {
                DataTable dtDefaultCurrency = Utility.GetDefaultData(SPNames.S3G_Get_Currency_Details_ByCompanyID, Procparam);
                if (dtDefaultCurrency != null && dtDefaultCurrency.Rows.Count > 0)
                {
                    ViewState["DefaultCurrencyID"] = dtDefaultCurrency.Rows[0]["Currency_ID"];
                    ddlCurrencyCode.SelectedValue = dtDefaultCurrency.Rows[0]["Currency_ID"].ToString();
                }

                Procparam.Add("@Currency_ID", "0");
                Procparam.Add("@IS_Active", "1");
                ddlCurrencyCode.BindDataTable("S3G_Get_Currency_Details", Procparam, new string[] { "Currency_ID", "Currency_Code", "Currency_Name" });
                Procparam.Clear();
                ViewState["CurrencyExchangeRate"] = Utility.GetDefaultData(SPNames.S3G_Get_ExchangeRate_Details, Procparam);

                if (ViewState["DefaultCurrencyID"] == null || string.IsNullOrEmpty(ViewState["DefaultCurrencyID"].ToString()))
                {
                    ViewState["DefaultCurrencyID"] = -1;
                }
                else
                {
                    txtCurrencyValue.Text = "";
                }
                FunPriGetExchangeRate();

            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }


    protected void ddlCurrencyCode_SelectedIndexChanged(object sender, EventArgs e)
    {
        FunPriGetExchangeRate();
    }

    private void FunPriGetExchangeRate()
    {

        DataTable dtCurrencyExchangeRate = (DataTable)ViewState["CurrencyExchangeRate"];

        if (ddlCurrencyCode != null && ddlCurrencyCode.SelectedIndex > 0 && ddlCurrencyCode.Items.Count > 2
            && Convert.ToInt32(ddlCurrencyCode.SelectedValue) != Convert.ToInt32(ViewState["DefaultCurrencyID"]))
        {
            dtCurrencyExchangeRate.DefaultView.RowFilter = "Exchange_Currency_ID = " + ddlCurrencyCode.SelectedValue;
            dtCurrencyExchangeRate = dtCurrencyExchangeRate.DefaultView.ToTable();

            if (dtCurrencyExchangeRate != null && dtCurrencyExchangeRate.Rows.Count > 0)
            {
                txtCurrencyValue.Text = Convert.ToDecimal(dtCurrencyExchangeRate.Rows[0]["Exchange_Value"].ToString()).ToString();
            }
            else
            {
                txtCurrencyValue.Text = "";
                Utility.FunShowAlertMsg(this, "No Exchange Rate value found");
                ddlCurrencyCode.SelectedIndex = -1;
            }

        }
        else
        {
            txtCurrencyValue.Text = "";
        }
        defaultCurrency.Visible = false;
        // same currency code
        if (Convert.ToInt32(ddlCurrencyCode.SelectedValue) == Convert.ToInt32(ViewState["DefaultCurrencyID"]))
        {
            defaultCurrency.Visible = true;
        }

    }

    private void FunPriLoadPayMode() // To do: here I want to use the SQL Lookup table once the sql  table design get over.
    {
        DataTable dtPayMode = new DataTable("PayModeTable");
        DataColumn dcID = new DataColumn("ID");
        DataColumn dcPayMode = new DataColumn("PayMode");
        dtPayMode.Columns.Add(dcID);
        dtPayMode.Columns.Add(dcPayMode);

        DataRow drSelect = dtPayMode.NewRow();
        DataRow drCash = dtPayMode.NewRow();
        DataRow drCheque = dtPayMode.NewRow();
        DataRow drDemandDraft = dtPayMode.NewRow();



        drSelect["ID"] = 0;
        drSelect["PayMode"] = "--Select--";

        drCash["ID"] = 3;
        drCash["PayMode"] = "Cash";


        drCheque["ID"] = 1;
        drCheque["PayMode"] = "Cheque";

        drDemandDraft["ID"] = 2;
        drDemandDraft["PayMode"] = "Demand Draft";



        dtPayMode.Rows.Add(drSelect);
        dtPayMode.Rows.Add(drCash);
        dtPayMode.Rows.Add(drCheque);
        dtPayMode.Rows.Add(drDemandDraft);

        ddlPayMode.DataSource = dtPayMode;
        ddlPayMode.DataValueField = "ID";
        ddlPayMode.DataTextField = "PayMode";
        ddlPayMode.DataBind();
    }

    private void FunPriLoadRequest()  // To do: here I want to use the SQL Lookup table once the sql  table design get over.
    {
        try
        {
            if (Procparam != null)
                Procparam.Clear();
            else
                Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_ID", intCompanyID.ToString());
            Procparam.Add("@Option", "11");
            ddlPaymentStatus.BindDataTable("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam, new string[] { "PaymentStatusID", "PaymentStatus" });
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriLoadBranch()
    {
        // branch
        try
        {
            if (Procparam != null)
                Procparam.Clear();
            else
                Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
            Procparam.Add("@User_ID", Convert.ToString(intUserID));
            Procparam.Add("@Program_Id", "229");
            if (ddlLOB.SelectedIndex > 0)
                Procparam.Add("@Lob_Id", ddlLOB.SelectedValue);
            Procparam.Add("@Is_Active", "1");
            //ddlBranch.BindDataTable(SPNames.BranchMaster_LIST, Procparam, new string[] { "Branch_ID", "Branch" });
            ddlBranch.BindDataTable(SPNames.BranchMaster_LIST, Procparam, new string[] { "Location_Id", "Location_Name" });
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }
    private void FunPriLoadLOB()
    {
        // LOB ComboBoxLOBSearch
        try
        {
            if (Procparam != null)
                Procparam.Clear();
            else
                Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
            Procparam.Add("@User_ID", Convert.ToString(intUserID));
            Procparam.Add("@Program_Id", "229");
            Procparam.Add("@Is_Active", "1");
            ddlLOB.BindDataTable(SPNames.LOBMaster, Procparam, new string[] { "LOB_ID", "LOB_Code", "LOB_Name" });
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }



    private bool FuncalculateDocAmount()
    {
        int boolflag = 0;
        if (Convert.ToDecimal(lbltotalPaymentAdjust.Text) > 0)
        {
            if (Convert.ToDecimal(lbltotalPaymentAdjust.Text) == Convert.ToDecimal(txtDocAmount.Text))
                boolflag = 1;
            else
                boolflag = 0;
        }
        else if (Convert.ToDecimal(lblPaymentDetailsTotal.Text) > 0)
        {
            if (Convert.ToDecimal(lblPaymentDetailsTotal.Text) == Convert.ToDecimal(txtDocAmount.Text))
                boolflag = 1;
            else
                boolflag = 0;
        }
        return Convert.ToBoolean(boolflag);
    }



    private void FunPriLoadPANUM()
    {
        try
        {
            if (ddlPayTo.SelectedValue == "11")
            {
                Procparam = new Dictionary<string, string>();
                Procparam.Add("@Option", "1");
                Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
                if (ddlLOB.SelectedIndex > 0)
                    Procparam.Add("@Lob_Id", ddlLOB.SelectedValue);
                if (ddlBranch.SelectedIndex > 0)
                {
                    //Procparam.Add("@Branch_ID", ddlBranch.SelectedValue);
                    Procparam.Add("@Location_ID", ddlBranch.SelectedValue);
                }
                if (ViewState["hdnCustorEntityID"] != null && ViewState["hdnCustorEntityID"].ToString() != string.Empty)
                {

                    Procparam.Add("@Ins_Company_Id", ViewState["hdnCustorEntityID"].ToString());
                }
                if (grvPaymentDetails != null && grvPaymentDetails.FooterRow != null)
                {
                    DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
                    ddlFooterPrimeAccountNumber.BindDataTable("S3G_LOANAD_GetPaymentRequestInsuranceDetails", Procparam, new string[] { "PANum", "PANum" });
                }
                if (grvPaymentAdjustment != null && grvPaymentAdjustment.FooterRow != null)
                {
                    DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
                    ddlFooterPrimeAccountNumber.BindDataTable("S3G_LOANAD_GetPaymentRequestInsuranceDetails", Procparam, new string[] { "PANum", "PANum" });
                }


            }
            else
            {
                //Procparam = new Dictionary<string, string>();
                //Procparam.Add("@Option", "1");
                //Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
                //if (ddlLOB.SelectedIndex > 0)
                //    Procparam.Add("@Lob_Id", ddlLOB.SelectedValue);
                //if (ddlBranch.SelectedIndex > 0)
                //{
                //    //Procparam.Add("@Branch_ID", ddlBranch.SelectedValue);
                //    Procparam.Add("@Location_ID", ddlBranch.SelectedValue);
                //}
                //if (ddlPayTo.SelectedIndex > 0)
                //{
                //    if (ddlPayTo.SelectedValue == "1")
                //        Procparam.Add("@Payto", "144");
                //    else if (ddlPayTo.SelectedValue == "50")
                //        Procparam.Add("@OptionPay_To", "1");
                //    else
                //        Procparam.Add("@Payto", "145");

                //}
                //if (ViewState["hdnCustorEntityID"] != null && ViewState["hdnCustorEntityID"].ToString() != string.Empty)
                //{

                //    Procparam.Add("@EntityId", ViewState["hdnCustorEntityID"].ToString());
                //}
                //if (ddlLOB.SelectedItem.Text.ToLower().Split('-')[0].ToString().Trim() == "ft")
                //{
                //    Procparam.Add("@LOB_Code", "FT");
                //}
                //if (ddlLOB.SelectedItem.Text.ToLower().Split('-')[0].ToString().Trim() == "ol")
                //{
                //    Procparam.Add("@LOB_Code", "OL");
                //}
                //if (grvPaymentDetails != null && grvPaymentDetails.FooterRow != null)
                //{
                //    DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
                //    ddlFooterPrimeAccountNumber.BindDataTable("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam, new string[] { "PANum", "PANum" });

                //    //s3g to sfl - kuppu - july 12 -- starts
                //    DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
                //    DropDownList ddlFooterSL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSL_Code");
                //    TextBox txtFooterDescription = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterDescription");
                //    TextBox txtFooterAmount = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterAmount");

                //    ddlFooterFlowType.SelectedIndex = 0;
                //    ddlFooterSL_Code.SelectedIndex = 0;
                //    txtFooterDescription.Text = string.Empty;
                //    txtFooterAmount.Text = string.Empty;

                //    // --ends--

                //}

                Procparam = new Dictionary<string, string>();
                Procparam.Add("@Company_ID", intCompanyID.ToString());
                Procparam.Add("@Entity_ID", ViewState["hdnCustorEntityID"].ToString());
                if (PageMode == PageModes.Create)
                {
                    Procparam.Add("@Mode", "0");
                }
                else
                {
                    Procparam.Add("@Mode", "0");
                }
                Procparam.Add("@Option", "1");

                DropDownList ddlFooterPANUM = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
                ddlFooterPANUM.BindDataTable("S3G_TA_GetDetailsForPayment", Procparam, new string[] { "Application_ID", "Application_Number" });


                if (grvPaymentAdjustment != null && grvPaymentAdjustment.FooterRow != null)
                {
                    DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
                    ddlFooterPrimeAccountNumber.BindDataTable("S3G_TA_GetDetailsForPayment", Procparam, new string[] { "Application_ID", "Application_Number" });

                    //s3g to sfl - kuppu - july 12 -- starts
                    DropDownList ddlFooterAddOrLess = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterAddOrLess");
                    DropDownList ddlFooterPayType = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPayType");
                    TextBox txtFooterDescription = (TextBox)grvPaymentAdjustment.FooterRow.FindControl("txtFooterDescription");
                    TextBox txtFooterAmount = (TextBox)grvPaymentAdjustment.FooterRow.FindControl("txtFooterAmount");

                    ddlFooterAddOrLess.SelectedIndex = 0;
                    ddlFooterPayType.SelectedIndex = 0;
                    txtFooterDescription.Text = string.Empty;
                    txtFooterAmount.Text = string.Empty;
                    // --ends--
                }
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriLoadRefDocnoIVE()
    {
        try
        {
            DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Option", "16");
            Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));

            if (ddlBranch.SelectedIndex > 0)
            {
                //Procparam.Add("@Branch_ID", ddlBranch.SelectedValue);
                Procparam.Add("@Location_ID", ddlBranch.SelectedValue);
            }
            if (ViewState["hdnCustorEntityID"] != null && ViewState["hdnCustorEntityID"].ToString() != string.Empty)
            {
                Procparam.Add("@EntityId", ViewState["hdnCustorEntityID"].ToString());
            }

            DropDownList ddlFooterRefDocNo = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterRefDocNo");
            ddlFooterRefDocNo.BindDataTable("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam, new string[] { "Ref_No", "Ref_No" });
            if (ddlFooterRefDocNo.Items.Count < 2)
            {
                ddlFooterFlowType.SelectedIndex = -1;
                grvPaymentDetails.Columns[4].Visible = false;
                RequiredFieldValidator RFVddlPrimeAccountNumber = (RequiredFieldValidator)grvPaymentDetails.FooterRow.FindControl("RFVddlPrimeAccountNumber");
                RFVddlPrimeAccountNumber.Enabled = true;
                Utility.FunShowAlertMsg(this, "Payment not made for the selected Customer/Entity");
                return;
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void FunPriLoadRefDocno()
    {
        try
        {
            DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
            DropDownList ddlFooterSubAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSubAccountNumber");
            DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Option", "7");
            Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
            if (ddlLOB.SelectedIndex > 0)
                Procparam.Add("@Lob_Id", ddlLOB.SelectedValue);
            if (ddlBranch.SelectedIndex > 0)
            {
                //Procparam.Add("@Branch_ID", ddlBranch.SelectedValue);
                Procparam.Add("@Location_ID", ddlBranch.SelectedValue);
            }
            Procparam.Add("@PANum", ddlFooterPrimeAccountNumber.SelectedValue);
            if (ddlFooterSubAccountNumber.SelectedIndex > 0)
                Procparam.Add("@SANum", ddlFooterSubAccountNumber.SelectedValue);
            if (ViewState["hdnCustorEntityID"] != null && ViewState["hdnCustorEntityID"].ToString() != string.Empty)
            {
                Procparam.Add("@EntityId", ViewState["hdnCustorEntityID"].ToString());
            }
            if (ddlLOB.SelectedItem.Text.ToLower().Split('-')[0].ToString().Trim() == "ol")
            {
                Procparam.Add("@LOB_Code", "OL");
            }
            DropDownList ddlFooterRefDocNo = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterRefDocNo");
            ddlFooterRefDocNo.BindDataTable("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam, new string[] { "Ref_No", "Ref_No" });
            if (ddlFooterRefDocNo.Items.Count < 2)
            {
                ddlFooterFlowType.SelectedIndex = -1;
                grvPaymentDetails.Columns[4].Visible = false;
                Utility.FunShowAlertMsg(this, "Payment already made / not applicable for the selected Prime Account Number");
                return;
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void FunPriloadDim2Insurance()
    {
        try
        {
            DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
            DropDownList ddlFooterSubAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSubAccountNumber");
            DropDownList ddlFooterDIM2 = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterDIM2");
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Option", "3");
            Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
            if (ddlFooterPrimeAccountNumber.SelectedIndex > 0)
                Procparam.Add("@PANum", ddlFooterPrimeAccountNumber.SelectedValue);
            if (ddlFooterSubAccountNumber.SelectedIndex > 0)
                Procparam.Add("@SANum", ddlFooterSubAccountNumber.SelectedValue);
            if (ViewState["hdnCustorEntityID"] != null && ViewState["hdnCustorEntityID"].ToString() != string.Empty)
            {
                Procparam.Add("@Ins_Company_Id", ViewState["hdnCustorEntityID"].ToString());
            }
            if (txtValueDate.Text.Length > 0)//validate the policy from date  with value date in payment request
                Procparam.Add("@From_Date", Utility.StringToDate(txtValueDate.Text).ToString());
            ddlFooterDIM2.BindDataTable("S3G_LOANAD_GetPaymentRequestInsuranceDetails", Procparam, new string[] { "ASSET_ID", "Asset_Code", "Asset_Description" });

        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void FunPriLoadDim2(string Option)
    {
        try
        {
            DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
            DropDownList ddlFooterSubAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSubAccountNumber");
            DropDownList ddlFooterRefDocNo = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterRefDocNo");

            Procparam = new Dictionary<string, string>();
            if (Option == "5")
            {
                Procparam.Add("@Option", Option);
                Procparam.Add("@PANum", ddlFooterPrimeAccountNumber.SelectedValue);
            }
            else if (Option == "6")
            {
                Procparam.Add("@Option", Option);
                Procparam.Add("@SANum", ddlFooterSubAccountNumber.SelectedValue);
                Procparam.Add("@PANum", ddlFooterPrimeAccountNumber.SelectedValue);
            }
            else if (Option == "Asset")
            {
                Procparam.Add("@Option", "9");
                if (ddlFooterRefDocNo.SelectedIndex > 0)
                    Procparam.Add("@Ref_No", ddlFooterRefDocNo.SelectedValue);
                if (ddlLOB.SelectedItem.Text.ToLower().Split('-')[0].ToString().Trim() == "ol")
                {
                    Procparam.Add("@LOB_Code", "OL");
                }
            }
            Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
            if (grvPaymentDetails != null && grvPaymentDetails.FooterRow != null)
            {
                DropDownList ddlFooterDIM2 = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterDIM2");
                if (Option == "Asset")
                {
                    ddlFooterDIM2.BindDataTable("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam, new string[] { "ASSET_ID", "Asset_Code", "Asset_Description" });
                }
                else
                {
                    ddlFooterDIM2.BindDataTable("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam, new string[] { "ASSET_ID", "Lease_Asset_No", "Asset_Description" });
                }
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }



    private void FunPriLoadSANUM(string Payreqgrid)
    {
        try
        {
            DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
            DropDownList ddlFooterSubAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSubAccountNumber");
            DropDownList ddlFooterPrimeAccountNumberA = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
            DropDownList ddlFooterSubAccountNumberA = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterSubAccountNumber");
            Procparam = new Dictionary<string, string>();

            if (ddlPayTo.SelectedValue == "50")
            {
                Procparam.Add("@Option", "2");
                Procparam.Add("@OptionPay_To", "1");
                Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
                if (Payreqgrid == "PD")
                {
                    if (ddlFooterPrimeAccountNumber.SelectedIndex > 0)
                        Procparam.Add("@PANum", ddlFooterPrimeAccountNumber.SelectedValue);
                    ddlFooterSubAccountNumber.BindDataTable("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam, new string[] { "SANum", "SANum" });
                }
                else
                {
                    if (ddlFooterPrimeAccountNumberA.SelectedIndex > 0)
                        Procparam.Add("@PANum", ddlFooterPrimeAccountNumberA.SelectedValue);
                    ddlFooterSubAccountNumberA.BindDataTable("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam, new string[] { "SANum", "SANum" });
                }

            }
            else
            {
                Dictionary<string, string> dictParam = new Dictionary<string, string>();
                //Procparam.Add("@Type", "2");
                //Procparam.Add("@Company_ID", intCompanyID.ToString());
                //Procparam.Add("@LOB_ID", ddlLOB.SelectedValue);
                ////Procparam.Add("@Branch_ID", ddlBranch.SelectedValue);
                //Procparam.Add("@Location_ID", ddlBranch.SelectedValue);
                //Procparam.Add("@Is_Closed", "1");
                //Procparam.Add("@ParamSA_Status", "0,6,7,26,45,47,55");
                //if (Payreqgrid == "PD")
                //{
                //    if (ddlFooterPrimeAccountNumber.SelectedIndex > 0)
                //        Procparam.Add("@PANum", ddlFooterPrimeAccountNumber.SelectedItem.Text);
                //    ddlFooterSubAccountNumber.BindDataTable("S3G_LOANAD_GetPLASLA_AIE", Procparam, new string[] { "SANum", "SANum" });
                //}
                //else
                //{
                //    if (ddlFooterPrimeAccountNumberA.SelectedIndex > 0)
                //        Procparam.Add("@PANum", ddlFooterPrimeAccountNumberA.SelectedItem.Text);
                //    ddlFooterSubAccountNumberA.BindDataTable("S3G_LOANAD_GetPLASLA_AIE", Procparam, new string[] { "SANum", "SANum" });
                //}

                Procparam.Add("@Company_ID", intCompanyID.ToString());
                if (PageMode == PageModes.Create)
                {
                    Procparam.Add("@Mode", "0");
                }
                else
                {
                    Procparam.Add("@Mode", "1");
                }

                Procparam.Add("@Option", "1");

                if (Payreqgrid == "PD")
                {
                    Procparam.Add("@Application_ID", ddlFooterPrimeAccountNumber.SelectedValue);
                    ddlFooterSubAccountNumber.BindDataTable("S3G_TA_GetDetailsForPayment", Procparam, new string[] { "Tranche_ID", "Tranche_Ref_No" });
                }
                else
                {
                    Procparam.Add("@Application_ID", ddlFooterPrimeAccountNumberA.SelectedValue);
                    ddlFooterSubAccountNumberA.BindDataTable("S3G_TA_GetDetailsForPayment", Procparam, new string[] { "Tranche_ID", "Tranche_Ref_No" });
                }


            }
            if (ddlLOB.SelectedItem.Text.ToLower().Split('-')[0].ToString().Trim() == "ol")
            {
                if (ddlFooterSubAccountNumber.Items.Count < 2)
                {
                    FunPriLoadDim2("5");
                }

            }
            if (ddlPayTo.SelectedValue == "11")
            {
                FunPriloadDim2Insurance();
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }


    /// <summary>
    /// This method is used to populate GLcode for Insurance "Pay TO"
    /// </summary>
    private void FunPriloadGLSLCodeInsurance()
    {
        try
        {
            DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
            DropDownList ddlFooterSubAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSubAccountNumber");
            DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
            DropDownList ddlFooterGL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterGL_Code");
            DropDownList ddlFooterSL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSL_Code");
            TextBox txtFooterDescription = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterDescription");
            TextBox txtFooterAmount = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterAmount");
            Label lblFooterActualAmount = (Label)grvPaymentDetails.FooterRow.FindControl("lblFooterActualAmount");

        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void FunPriLoadGLSLcodes()
    {
        try
        {

            DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
            DropDownList ddlFooterSubAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSubAccountNumber");
            DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
            DropDownList ddlFooterGL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterGL_Code");
            DropDownList ddlFooterSL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSL_Code");
            TextBox txtFooterDescription = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterDescription");
            TextBox txtFooterAmount = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterAmount");
            Label lblFooterActualAmount = (Label)grvPaymentDetails.FooterRow.FindControl("lblFooterActualAmount");


            DataSet Ds = FunGetGLSLForPayType(ddlFooterPrimeAccountNumber, ddlFooterSubAccountNumber, ddlFooterFlowType);
            if (Ds.Tables[0].Rows.Count > 0)
            {
                ddlFooterGL_Code.SelectedValue = Ds.Tables[0].Rows[0]["GL_Code"].ToString();
                if (Convert.ToString(Ds.Tables[0].Rows[0]["SL_Code"]) != string.Empty && Convert.ToString(Ds.Tables[0].Rows[0]["SL_Code"]) != "")
                    ddlFooterSL_Code.SelectedValue = Ds.Tables[0].Rows[0]["SL_Code"].ToString();
                txtFooterDescription.Text = Ds.Tables[0].Rows[0]["Description"].ToString();

                txtFooterAmount.Text = Ds.Tables[0].Rows[0]["Amount"].ToString();
                lblFooterActualAmount.Text = Ds.Tables[0].Rows[0]["Amount"].ToString();

                ddlFooterGL_Code.Enabled = ddlFooterSL_Code.Enabled = false;
            }
            else
            {

                if (Ds.Tables[1].Rows.Count > 0)
                {
                    if (Convert.ToInt32(Ds.Tables[1].Rows[0]["ErrorCode"].ToString()) == 1)
                    {
                        Utility.FunShowAlertMsg(this, "GL Code is not defined for the selected Pay Type");
                        ddlFooterFlowType.SelectedIndex = -1;
                        ddlFooterGL_Code.SelectedIndex = -1;
                        return;
                    }
                    else if (Convert.ToInt32(Ds.Tables[1].Rows[0]["ErrorCode"].ToString()) == 2)
                    {
                        Utility.FunShowAlertMsg(this, "Payment already made for this account");
                        ddlFooterFlowType.SelectedIndex = -1;
                        ddlFooterGL_Code.SelectedIndex = -1;
                        return;
                    }
                    else if (Convert.ToInt32(Ds.Tables[1].Rows[0]["ErrorCode"].ToString()) == 3)
                    {
                        Utility.FunShowAlertMsg(this, "Payment not made for this account");
                        ddlFooterFlowType.SelectedIndex = -1;
                        ddlFooterGL_Code.SelectedIndex = -1;
                        if (ddlFooterPrimeAccountNumber.SelectedIndex > 0)
                            ddlFooterPrimeAccountNumber.SelectedIndex = -1;
                        if (ddlFooterSubAccountNumber.SelectedIndex > 0)
                        {
                            ddlFooterSubAccountNumber.SelectedIndex = -1;
                            ddlFooterSubAccountNumber.ClearDropDownList();
                        }
                        return;
                    }
                    else if (Convert.ToInt32(Ds.Tables[1].Rows[0]["ErrorCode"].ToString()) == 4)
                    {
                        Utility.FunShowAlertMsg(this, "Payment not defined for the selected Customer/Entity");
                        ddlFooterFlowType.SelectedIndex = -1;
                        ddlFooterGL_Code.SelectedIndex = -1;
                        if (ddlFooterPrimeAccountNumber.SelectedIndex > 0)
                            ddlFooterPrimeAccountNumber.SelectedIndex = -1;
                        if (ddlFooterSubAccountNumber.SelectedIndex > 0)
                        {
                            ddlFooterSubAccountNumber.SelectedIndex = -1;
                            ddlFooterSubAccountNumber.ClearDropDownList();
                        }
                        return;
                    }
                }


            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    private void FunPriLoadGLSLcodesPaymentadjustment()
    {
        try
        {

            DropDownList ddlFooterAddOrLess = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterAddOrLess");
            DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
            DropDownList ddlFooterSubAccountNumber = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterSubAccountNumber");
            DropDownList ddlFooterFlowType = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPayType");
            DropDownList ddlFooterGL_Code = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterGL_Code");
            DropDownList ddlFooterSL_Code = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterSL_Code");
            TextBox txtFooterDescription = (TextBox)grvPaymentAdjustment.FooterRow.FindControl("txtFooterDescription");
            TextBox txtFooterAmount = (TextBox)grvPaymentAdjustment.FooterRow.FindControl("txtFooterAmount");
            Procparam = new Dictionary<string, string>();
            if (Convert.ToInt32(ddlFooterAddOrLess.SelectedValue) > 0)
            {
                Procparam.Add("@Option", "15");
                Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
                Procparam.Add("@FlowTypeID", ddlFooterFlowType.SelectedValue);
                Procparam.Add("@FlowDescription", ddlFooterFlowType.SelectedItem.Text);
                Procparam.Add("@AddorLess", ddlFooterAddOrLess.SelectedValue);
                Procparam.Add("@Lob_Id", ddlLOB.SelectedValue);
                //Procparam.Add("@Branch_ID", ddlBranch.SelectedValue);
                Procparam.Add("@Location_ID", ddlBranch.SelectedValue);
                if (ddlPayTo.SelectedValue == "50")
                    Procparam.Add("@OptionPay_To", "1");

                DataTable Dtaddorless = new DataTable();
                Dtaddorless = Utility.GetDefaultData("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam);
                if (Dtaddorless.Rows.Count > 0)
                {
                    ddlFooterGL_Code.SelectedValue = Dtaddorless.Rows[0]["GL_Code"].ToString();
                    if (Convert.ToString(Dtaddorless.Rows[0]["SL_Code"]) != string.Empty && Convert.ToString(Dtaddorless.Rows[0]["SL_Code"]) != "")
                        ddlFooterSL_Code.SelectedValue = Dtaddorless.Rows[0]["SL_Code"].ToString();
                    txtFooterDescription.Text = Dtaddorless.Rows[0]["Description"].ToString();
                }
                else
                {
                    ddlFooterFlowType.SelectedIndex = -1;
                    Utility.FunShowAlertMsg(this, "GL Code is not defined for the selected Pay Type");
                    return;
                }
            }
            else
            {
                Utility.FunShowAlertMsg(this, "select Add or Less");
                return;
            }


        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private DataSet FunGetGLSLForPayType(DropDownList ddlFooterPrimeAccountNumber, DropDownList ddlFooterSubAccountNumber, DropDownList ddlFooterFlowType)
    {

        DataSet Ds = new DataSet();
        Procparam = new Dictionary<string, string>();
        if (ddlFooterFlowType.SelectedIndex > 0)
        {
            if ((ddlFooterFlowType.SelectedValue == "64" || ddlFooterFlowType.SelectedValue == "66" || ddlFooterFlowType.SelectedValue == "68" || ddlFooterFlowType.SelectedValue == "69") && ddlPayTo.SelectedValue != "50")
            {
                Procparam.Add("@Option", "4");
                Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
                Procparam.Add("@FlowTypeID", ddlFooterFlowType.SelectedValue);
                Procparam.Add("@Lob_Id", ddlLOB.SelectedValue);
                //Procparam.Add("@Branch_ID", ddlBranch.SelectedValue);
                Procparam.Add("@Location_ID", ddlBranch.SelectedValue);
            }
            else
            {
                Procparam.Add("@Option", "3");
                Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
                if (ddlLOB.SelectedIndex > 0)
                    Procparam.Add("@Lob_Id", ddlLOB.SelectedValue);
                if (ddlFooterPrimeAccountNumber.SelectedIndex > 0)
                    Procparam.Add("@PANum", ddlFooterPrimeAccountNumber.SelectedValue);
                if (ddlFooterSubAccountNumber.SelectedIndex > 0)
                    Procparam.Add("@SANum", ddlFooterSubAccountNumber.SelectedValue);
                Procparam.Add("@FlowTypeID", ddlFooterFlowType.SelectedValue);
                if (ddlPayTo.SelectedValue == "1")
                    Procparam.Add("@Payto", "144");
                else if (ddlPayTo.SelectedValue == "50")
                    Procparam.Add("@OptionPay_To", "1");
                else
                    Procparam.Add("@Payto", "145");
                if (ViewState["hdnCustorEntityID"] != null && ViewState["hdnCustorEntityID"].ToString() != string.Empty)
                {

                    Procparam.Add("@EntityId", ViewState["hdnCustorEntityID"].ToString());
                }
            }
            Ds = Utility.GetDataset("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam);

        }

        return Ds;

    }

    protected void ddlLOB_SelectedIndexChanged(object sender, EventArgs e)
    {

        FunClearForm();
        ddlBranch.SelectedIndex = -1;
        FunPriLoadBranch();
        if (ddlLOB.SelectedIndex > 0)
        {
            ddlPayTo.Enabled = true;

        }
        else
        {
            ddlPayTo.Enabled = false;
        }
    }
    protected void ddlBranch_SelectedIndexChanged(object sender, EventArgs e)
    {
        FunClearForm();
    }





    protected void btnCancelPass_Click(object sender, EventArgs e)
    {
        chkAccountBased.SelectedValue = "0";
    }
    protected void btnPassword_Click(object sender, EventArgs e)
    {
        S3GAdminServicesReference.S3GAdminServicesClient ObjS3GAdminServices = new S3GAdminServicesReference.S3GAdminServicesClient();
        try
        {

            if (ObjS3GAdminServices.FunPubPasswordValidation(intUserID, txtPassword.Text.Trim()) > 0)
            {
                Utility.FunShowAlertMsg(this, "Incorrect Password");
                chkAccountBased.SelectedValue = "0";
            }
            else   // correct password
            {
                if (ddlPayTo.SelectedValue == "50")
                {
                    FunProAcctBasedCtrlsValidation(false);
                    FunPriLoadGLcodes();
                }
                else
                {
                    FunProAcctBasedCtrlsValidation(true);
                    FunPriLoadGLcodes();
                }
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {
            ObjS3GAdminServices.Close();
        }
    }

    protected void FunProAcctBasedCtrlsValidation(bool blnflaG)
    {
        PanelPayType.Enabled = blnflaG;
        if (ddlPayTo.SelectedValue == "50" && chkAccountBased.SelectedValue == "1")
        {
            FunDisableGLSLCodeGrid(true);
            FundisableGridValidation(false);
        }
        else
        {
            FunDisableGLSLCodeGrid(false);
            FundisableGridValidation(true);
        }

        if (grvPaymentDetails.FooterRow != null)
        {
            DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
            DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
            DropDownList ddlFooterSubAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSubAccountNumber");
            DropDownList ddlFooterDIM2 = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterDIM2");
            TextBox txtFooterAmount = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterAmount");
            ddlFooterFlowType.Enabled = ddlFooterPrimeAccountNumber.Enabled =
                ddlFooterSubAccountNumber.Enabled = ddlFooterDIM2.Enabled = blnflaG;

        }
        if (grvPaymentDetails.FooterRow != null)
        {
            DropDownList ddlFooterPayType = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPayType");
            DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
            DropDownList ddlFooterSubAccountNumber = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterSubAccountNumber");
            ddlFooterPayType.Enabled = ddlFooterPrimeAccountNumber.Enabled =
                ddlFooterSubAccountNumber.Enabled = blnflaG;

        }
    }


    protected void chkAccountBased_SelectedIndexChanged(object sender, EventArgs e)
    {

        if (chkAccountBased.SelectedValue == "1")
        {
            lblErrorMessagePass.Text = string.Empty;
            if (ModalPopupExtenderPassword.Enabled == false)
            {
                ModalPopupExtenderPassword.Enabled = true;

            }

            ModalPopupExtenderPassword.Show();
        }
        else //If Account based is no
        {
            fundisablepaymentdtlsgrid();
            FunProAcctBasedCtrlsValidation(true);
            //FunPriLoadPayType(ddlPayTo.SelectedValue, 0);
            FunPriLoadGLcodes();
            FunPriLoadPayType(ddlPayTo.SelectedValue, 0);
        }
    }

    private bool IsUserValid(string pass)
    {
        CreditMgtServicesReference.CreditMgtServicesClient ObjMgtCreditMgtClient;
        ObjMgtCreditMgtClient = new CreditMgtServicesReference.CreditMgtServicesClient();
        try
        {
            string userName = userInfo.ProUserNameRW;

            CreditMgtServices.S3G_ORG_UserIsValidRow ObjUserIsValidRow;
            CreditMgtServices.S3G_ORG_UserIsValidDataTable ObjUserIsValidDataTable = new CreditMgtServices.S3G_ORG_UserIsValidDataTable();


            ObjUserIsValidRow = ObjUserIsValidDataTable.NewS3G_ORG_UserIsValidRow();

            ObjUserIsValidRow.User_Name = userName;
            ObjUserIsValidRow.Password = pass;

            ObjUserIsValidDataTable.AddS3G_ORG_UserIsValidRow(ObjUserIsValidRow);

            SerializationMode SerMode = new SerializationMode();

            byte[] bytesUserValid = ObjMgtCreditMgtClient.FunPubQueryUserIsValid(SerMode, ClsPubSerialize.Serialize(ObjUserIsValidDataTable, SerMode));
            DataTable dt_User = (CreditMgtServices.S3G_ORG_UserIsValidDataTable)ClsPubSerialize.DeSerialize(bytesUserValid, SerializationMode.Binary, typeof(CreditMgtServices.S3G_ORG_UserIsValidDataTable));

            if (dt_User != null && dt_User.Rows.Count == 1)
            {
                return true;
            }
            return false;
        }
        finally
        {
            ObjMgtCreditMgtClient.Close();// Changed by Manikandan. R to close object
            // ObjMgtCreditMgtClient.Close();  // closing the WCF connection
        }
    }


    protected void btnCancel_Click(object sender, EventArgs e)
    {
        // wf cancel
        if (PageMode == PageModes.WorkFlow)
            ReturnToWFHome();
        else
            Response.Redirect(strRedirectOnCancel);
    }



    private void FunClearPaymentdtlgridfooter()
    {
        DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
        DropDownList ddlFooterSubAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSubAccountNumber");
        DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
        DropDownList ddlFooterGL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterGL_Code");
        DropDownList ddlFooterSL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSL_Code");
        TextBox txtFooterDescription = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterDescription");
        TextBox txtFooterAmount = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterAmount");
        ddlFooterSL_Code.SelectedIndex = ddlFooterGL_Code.SelectedIndex = -1;
        txtFooterDescription.Text = txtFooterAmount.Text = "";
        ddlFooterFlowType.SelectedIndex = -1;
        if (ddlFooterSubAccountNumber != null && ddlFooterSubAccountNumber.Items.Count > 0)
        {
            ddlFooterSubAccountNumber.Items.Clear();
        }
    }
    private void FunClearPaymentAdjustgridfooter()
    {
        DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
        DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
        DropDownList ddlFooterGL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterGL_Code");
        DropDownList ddlFooterSL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSL_Code");
        TextBox txtFooterDescription = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterDescription");
        TextBox txtFooterAmount = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterAmount");
        txtFooterDescription.Text = txtFooterAmount.Text = "";
        ddlFooterGL_Code.SelectedIndex = ddlFooterSL_Code.SelectedIndex = ddlFooterFlowType.SelectedIndex = -1;
    }

    private void FunClearForm()
    {

        ddlPayTo.SelectedIndex =
            //ddlCurrencyCode.SelectedIndex=
            //ddlPaytypeadjust.SelectedIndex= -1;
        ddlPayMode.SelectedIndex = -1;
        txtCurrencyValue.Text =
            txtDocAmount.Text =
            txtFromDate.Text =
            txtToDate.Text =
            //txtValueDate.Text = 
            "";
        //FunPriClearEntityCodeControls();
        PnlCustEntityInformation.Enabled = true;

        //FunPriClearEntityCodeControls();
        //FunPriClearCustomerCodeControls();
        ddlPayType.SelectedIndex = -1;
        btnGo.Enabled = false;
        FunGridBlank();
        PnlCustEntityInformation.Enabled = true;
        ucCustomerCodeLov.ButtonEnabled = false;
        chkAccountBased.SelectedValue = "0";
        chkAccountBased.Enabled = false;

        TextBox txtCode = ucCustomerCodeLov.FindControl("txtName") as TextBox;
        txtCode.Text = "";
        txtCustomerCode.Text = "";
        ucCustomerAddress.ClearCustomerDetails();
        if (ViewState["DefaultCurrencyID"] != null)
        {
            ddlCurrencyCode.SelectedValue = ViewState["DefaultCurrencyID"].ToString();
        }
    }

    private void FunGridBlank()
    {
        if (grvPaymentAdjustment != null)
            FunpriBlank();
        if (grvPaymentAdjustment.FooterRow != null)
            grvPaymentAdjustment.FooterRow.Visible = true;

        if (grvPaymentDetails != null)
        {
            fundisablepaymentdtlsgrid();
            if (grvPaymentDetails.FooterRow != null)
                grvPaymentDetails.FooterRow.Visible = true;

        }
    }
    private void fundisablepaymentdtlsgrid()
    {
        ObjLoanAdminAccMgtServicesClient = new LoanAdminAccMgtServicesReference.LoanAdminAccMgtServicesClient();
        try
        {


            SerializationMode SerMode = SerializationMode.Binary;

            byte[] bytesPaymentRequestDetails = ObjLoanAdminAccMgtServicesClient.FunPubTAQueryGetCreditParameterRequestDetails(SerMode, ClsPubSerialize.Serialize(ObjPaymentDetailsDt, SerMode));
            ObjPaymentDetailsDt = (LoanAdminAccMgtServices.S3G_LOANAD_GetPaymentDetailsDataTable)ClsPubSerialize.DeSerialize(bytesPaymentRequestDetails, SerializationMode.Binary, typeof(LoanAdminAccMgtServices.S3G_LOANAD_GetPaymentDetailsDataTable));
            if (ObjPaymentDetailsDt != null && ObjPaymentDetailsDt.Rows.Count == 0)
            {
                ObjPaymentDetailsDt.Columns.Add("Application_ID");
                ObjPaymentDetailsDt.Columns.Add("Tranche_ID");

                DataRow dr_requestDetails = ObjPaymentDetailsDt.NewS3G_LOANAD_GetPaymentDetailsRow();
                dr_requestDetails["PANum"] = "-1"; // dummy
                ObjPaymentDetailsDt.Rows.Add(dr_requestDetails);
                grvPaymentDetails.DataSource = ObjPaymentDetailsDt;

                ViewState["grvPaymentDetails"] = ObjPaymentDetailsDt;
                grvPaymentDetails.DataBind();
                grvPaymentDetails.Rows[0].Visible = false;
            }
            FunpriBlank();
            FunPriLoadPANUM();
            FunPriLoadGLcodes();
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {

            ObjLoanAdminAccMgtServicesClient.Close();
        }
    }


    protected void btnGo_Click(object sender, EventArgs e)
    {
        try
        {

            if (Utility.StringToDate(txtToDate.Text) < Utility.StringToDate(txtFromDate.Text))
            {
                Utility.FunShowAlertMsg(this, "To Date should be greater than From Date");
                return;
            }

            DataSet Ds = new DataSet();
            PanelPaymentDetails.Visible = true;
            if (ddlPayTo.SelectedValue == "11")
            {
                Procparam = new Dictionary<string, string>();
                Procparam.Add("@Option", "2");
                Procparam.Add("@Lob_Id", ddlLOB.SelectedValue);
                //Procparam.Add("@Branch_ID", ddlBranch.SelectedValue);
                Procparam.Add("@Location_ID", ddlBranch.SelectedValue);
                Procparam.Add("@Company_Id", intCompanyID.ToString());
                Procparam.Add("@FlowTypeID", ddlPayType.SelectedValue);
                Procparam.Add("@From_Date", Utility.StringToDate(txtFromDate.Text).ToString());
                Procparam.Add("@To_Date", Utility.StringToDate(txtToDate.Text).ToString());
                if (ViewState["hdnCustorEntityID"] != null && ViewState["hdnCustorEntityID"].ToString() != string.Empty)
                {
                    Procparam.Add("@Ins_Company_Id", ViewState["hdnCustorEntityID"].ToString());
                }
                Ds = Utility.GetDataset("S3G_LOANAD_GetPaymentRequestInsuranceDetails", Procparam);
            }
            else
            {
                Procparam = new Dictionary<string, string>();
                //if (ddlPayTo.SelectedValue == "1")
                //    Procparam.Add("@ID", "144");
                //else if (ddlPayTo.SelectedValue != "50")
                //    Procparam.Add("@ID", "145");
                //if (ViewState["hdnCustorEntityID"] != null && ViewState["hdnCustorEntityID"].ToString() != string.Empty)
                //{

                //    Procparam.Add("@EntityId", ViewState["hdnCustorEntityID"].ToString());
                //}
                //if (ddlLOB.SelectedItem.Text.ToLower().Split('-')[0].ToString().Trim() == "ol")
                //{
                //    Procparam.Add("@LOB_Code", "OL");
                //}
                //else if (ddlLOB.SelectedItem.Text.ToLower().Split('-')[0].ToString().Trim() == "ft")
                //{
                //    Procparam.Add("@LOB_Code", "FT");
                //}
                //if (string.Compare(ddlPayTo.SelectedItem.ToString(), "General") == 0)
                //    Procparam.Add("@Option", "1");
                //if (ddlPayType.SelectedValue == "202")
                //{
                //    Procparam.Add("@Option", "2");
                //    Procparam.Add("@Insepection_By_Code", ddlPayTo.SelectedValue);

                //}
                //else if (ddlPayType.SelectedValue == "215")
                //{
                //    Procparam.Add("@Option", "3");
                //}

                Procparam.Add("@Company_ID", intCompanyID.ToString());
                Procparam.Add("@Param1", ddlLOB.SelectedValue);
                Procparam.Add("@Param2", ViewState["hdnCustorEntityID"].ToString());
                Procparam.Add("@Option", "5");
                Procparam.Add("@Param3", Utility.StringToDate(txtFromDate.Text).ToString());
                Procparam.Add("@Param4", Utility.StringToDate(txtToDate.Text).ToString());

                Ds = Utility.GetDataset("S3G_TA_GetDetailsForPayment", Procparam);
            }

            if (Ds.Tables[0].Rows.Count > 0)
            {
                if (ddlPayType.SelectedValue == "202" || ddlPayType.SelectedValue == "215")
                    grvPaymentDetails.Columns[4].Visible = true;
                else
                    grvPaymentDetails.Columns[4].Visible = false;
                grvPaymentDetails.DataSource = Ds.Tables[0];
                grvPaymentDetails.DataBind();
                grvPaymentDetails.FooterRow.Visible = false;
                ViewState["grvPaymentDetails"] = Ds.Tables[0];
            }
            else
            {

                grvPaymentDetails.DataSource = null;
                grvPaymentDetails.DataBind();
                lblPaymentDetailsTotal.Text = "0";
                fundisablepaymentdtlsgrid();
                FunPriLoadPaytypeingrid(ddlPayTo.SelectedValue);
                ddlPayType.SelectedIndex = -1;
                RFVtxtFromDate.Enabled = RFVtxtToDate.Enabled = false;
                if (ddlPayTo.SelectedValue == "50" && chkAccountBased.SelectedValue == "1")
                {
                    FunDisableGLSLCodeGrid(true);
                    FundisableGridValidation(false);
                }
                else
                {
                    FunDisableGLSLCodeGrid(false);
                    FundisableGridValidation(true);
                }
                txtFromDate.Text = txtToDate.Text = "";
                lblFromDate.CssClass = "styleDisplayLabel";
                lblToDate.CssClass = "styleDisplayLabel";
                btnGo.Enabled = false;
                Utility.FunShowAlertMsg(this, "Payment not defined for the selected Pay Type");
                return;
            }
            FunPriLoadPaytypeingrid(ddlPayTo.SelectedValue);
            Ds.Dispose();
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }



    private void Funupdatedatatable()
    {
        try
        {
            DataTable dt = new DataTable();
            dt = (DataTable)ViewState["grvPaymentDetails"];
            if (dt.Rows.Count > 0)
            {
                if (grvPaymentDetails != null)
                    for (int tableRow = 0; tableRow < grvPaymentDetails.Rows.Count; tableRow++)
                    {
                        dt.Rows[tableRow].BeginEdit();
                        TextBox txtEntered_Amount = (TextBox)grvPaymentDetails.Rows[tableRow].FindControl("lblAmount");
                        TextBox lblDescription = (TextBox)grvPaymentDetails.Rows[tableRow].FindControl("lblDescription");
                        dt.Rows[tableRow]["Amount"] = txtEntered_Amount.Text.ToString();
                        dt.Rows[tableRow]["Description"] = lblDescription.Text.ToString();
                        dt.Rows[tableRow].EndEdit();
                        dt.AcceptChanges();
                    }
                ViewState["grvPaymentDetails"] = dt;
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void FunPriLoadCustomerEntityDtls(string HdnId)
    {
        try
        {

            ViewState["hdnCustorEntityID"] = HdnId;
            if (ddlPayTo.SelectedValue == "50")// For general Pay To
            {
                PnlCustEntityInformation.Enabled = false;
                txtCustomerCode.Visible = false;
            }
            else
            {
                DataTable dtCustEntityDtls = new DataTable();
                Procparam = new Dictionary<string, string>();
                Procparam.Add("@Company_Id", intCompanyID.ToString());
                Procparam.Add("@ID", HdnId);
                if (ddlPayTo.SelectedValue == "1")// For Customer Pay To
                {
                    Procparam.Add("@TypeID", "144");

                }
                else//For All other Entity Types
                {
                    Procparam.Add("@TypeID", "145");

                }
                dtCustEntityDtls = Utility.GetDefaultData("S3G_LOANAD_GETCustomerorEntityDetails", Procparam);
                if (dtCustEntityDtls.Rows.Count > 0)
                {
                    TextBox txtName = (TextBox)ucCustomerCodeLov.FindControl("txtName");
                    txtName.Text = txtCustomerCode.Text = dtCustEntityDtls.Rows[0]["Code"].ToString();

                    ucCustomerAddress.SetCustomerDetails(dtCustEntityDtls.Rows[0]["Code"].ToString(),
                            dtCustEntityDtls.Rows[0]["Address1"].ToString() + "\n" +
                    dtCustEntityDtls.Rows[0]["Address2"].ToString() + "\n" +
                    dtCustEntityDtls.Rows[0]["city"].ToString() + "\n" +
                    dtCustEntityDtls.Rows[0]["state"].ToString() + "\n" +
                    dtCustEntityDtls.Rows[0]["country"].ToString() + "\n" +
                    dtCustEntityDtls.Rows[0]["pincode"].ToString(), dtCustEntityDtls.Rows[0]["Name"].ToString(),
                    dtCustEntityDtls.Rows[0]["Telephone"].ToString(),
                    dtCustEntityDtls.Rows[0]["Mobile"].ToString(),
                    dtCustEntityDtls.Rows[0]["email"].ToString(), dtCustEntityDtls.Rows[0]["website"].ToString());
                    ViewState["Address"] = dtCustEntityDtls;
                }

            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }


    }

    protected void btnCreateCustomer_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlPayTo.SelectedIndex > 0)
            {

                HiddenField HdnId = ucCustomerCodeLov.FindControl("hdnID") as HiddenField;
                if (HdnId != null)
                {
                    ViewState["hdnCustorEntityID"] = HdnId.Value;
                }
                FunPriLoadCustomerEntityDtls(HdnId.Value);

                FunPriLoadPANUM();
                FunPriLoadGLcodes();
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }


    protected void btnSave_Click(object sender, EventArgs e)
    {
        try
        {


            // this is to save the payment request.
            #region Save Payment request
            DataTable pmtdts = new DataTable();

            if (ViewState["grvPaymentDetails"] != null)
            {
                pmtdts = (DataTable)ViewState["grvPaymentDetails"];
            }
            if (pmtdts.Rows.Count == 0)
            {
                Utility.FunShowAlertMsg(this, "Add atleast one Payment details");
                return;
            }
            else if (Convert.ToString(pmtdts.Rows[0]["PANum"]) == "-1" && (pmtdts.Rows.Count == 1))
            {
                Utility.FunShowAlertMsg(this, "Add atleast one Payment details");
                return;
            }
            // To check payment should be greater than 0.
            if (Convert.ToDecimal(lbltotalPaymentAdjust.Text) <= 0)
            {
                Utility.FunShowAlertMsg(this, "Payment Total amount should be greater than zero");
                return;
            }

            if (FuncalculateDocAmount())
            {
                string strbMissedValues = string.Empty;

                LoanAdminAccMgtServices.S3G_LOANAD_PaymentRequestDataTable PaymentRequestDataTable = new LoanAdminAccMgtServices.S3G_LOANAD_PaymentRequestDataTable();
                LoanAdminAccMgtServices.S3G_LOANAD_PaymentRequestRow PaymentRequestDataRow = PaymentRequestDataTable.NewS3G_LOANAD_PaymentRequestRow();

                PaymentRequestDataRow.Company_ID = intCompanyID;
                PaymentRequestDataRow.LOB_ID =
                    (ddlLOB != null && Convert.ToInt32(ddlLOB.SelectedValue) > 0) ?
                        Convert.ToInt32(ddlLOB.SelectedValue) : -1;


                PaymentRequestDataRow.Branch_ID =
                    (ddlBranch != null && Convert.ToInt32(ddlBranch.SelectedValue) > 0) ?
                        Convert.ToInt32(ddlBranch.SelectedValue) : -1;


                PaymentRequestDataRow.Payment_Request_No = string.Empty;// to send Null - in create mode
                PaymentRequestDataRow.Request_No = -1;//Primary Key
                PaymentRequestDataRow.Payment_Request_Date = Utility.StringToDate(txtPaymentRequestDate.Text);
                // PaymentRequestDataRow.Value_Date = DateTime.Now;
                PaymentRequestDataRow.Value_Date = Utility.StringToDate(txtValueDate.Text);

                PaymentRequestDataRow.Pay_Type_Code =
                   (ddlPayType != null && ddlPayType.SelectedIndex > 0) ?
                       Convert.ToInt32(ddlPayType.SelectedValue) : -1;

                PaymentRequestDataRow.Pay_Mode_Code =
                   (ddlPayMode != null && ddlPayMode.SelectedIndex > 0) ?
                       Convert.ToInt32(ddlPayMode.SelectedValue) : -1;

                PaymentRequestDataRow.Currency_ID =
                   (ddlCurrencyCode != null && ddlCurrencyCode.SelectedIndex > 0) ?
                       Convert.ToInt32(ddlCurrencyCode.SelectedValue) : -1;

                if (strQsMode == "C")
                {
                    PaymentRequestDataRow.Mode = 0;
                    PaymentRequestDataRow.Requestno = 0;
                }
                else if (PageMode == PageModes.WorkFlow)
                {

                    if (!string.IsNullOrEmpty(strRequestID))
                    {
                        if (Convert.ToInt32(strRequestID) > 0)
                        {
                            PaymentRequestDataRow.Mode = 1;
                            PaymentRequestDataRow.Requestno = Convert.ToInt32(strRequestID);
                        }
                    }
                    else
                    {
                        PaymentRequestDataRow.Mode = 0;
                        PaymentRequestDataRow.Requestno = 0;
                    }

                }
                else
                {
                    PaymentRequestDataRow.Mode = 1;
                    PaymentRequestDataRow.Requestno = Convert.ToInt32(strRequestID);
                }

                PaymentRequestDataRow.Exchange_Rate_ID = -1;

                PaymentRequestDataRow.Pay_Amount = Convert.ToDecimal(txtDocAmount.Text);

                if (ddlPayTo != null && ddlPayTo.SelectedIndex > 0)
                {
                    PaymentRequestDataRow.Pay_To_Type_Code = Convert.ToInt32(ddlPayTo.SelectedValue);
                    PaymentRequestDataRow.Pay_To_Code = Convert.ToInt32(ddlPayTo.SelectedValue);
                }
                else
                {
                    PaymentRequestDataRow.Pay_To_Type_Code = -1;
                    PaymentRequestDataRow.Pay_To_Code = -1;
                }
                if (ddlPayTo.SelectedValue != "50" && ddlPayTo.SelectedValue != "1")
                {
                    if (ViewState["hdnCustorEntityID"] != null && ViewState["hdnCustorEntityID"].ToString() != string.Empty)
                    {
                        PaymentRequestDataRow.Vendor_Code = Convert.ToInt32(ViewState["hdnCustorEntityID"].ToString());
                    }
                    else
                    {
                        PaymentRequestDataRow.Vendor_Code = -1;
                    }
                }
                else
                    PaymentRequestDataRow.Vendor_Code = -1;
                //if (ddlPayTo.SelectedValue == "1")
                //{
                //    PaymentRequestDataRow.Customer_ID = Convert.ToInt32(ViewState["hdnCustorEntityID"].ToString());
                //}
                //else
                //{
                //    PaymentRequestDataRow.Customer_ID = -1;
                //}
                PaymentRequestDataRow.Customer_ID = Convert.ToInt32(ViewState["hdnCustorEntityID"].ToString());
                if (ddlPayTo.SelectedValue == "50")
                {
                    PaymentRequestDataRow.Pay_To_Name = "General";
                    PaymentRequestDataRow.Pay_To_Address = "General";
                }
                else
                {
                    PaymentRequestDataRow.Pay_To_Name = ucCustomerAddress.CustomerName;
                    PaymentRequestDataRow.Pay_To_Address = ucCustomerAddress.CustomerAddress;
                }

                PaymentRequestDataRow.Pmt_Voucher_status = false;  // check this

                PaymentRequestDataRow.Cancelled_Date = Convert.ToDateTime("1/1/1700"); // will handle in SP
                if (ViewState["IsVoucher_Print"] != null)
                {
                    PaymentRequestDataRow.IsVoucher_Print = (string)ViewState["IsVoucher_Print"];
                }
                else
                {
                    PaymentRequestDataRow.IsVoucher_Print = "N";
                }

                if (ViewState["IsCheque_Print"] != null)
                {
                    PaymentRequestDataRow.IsCheque_Print = (string)ViewState["IsCheque_Print"];
                }

                else
                {
                    PaymentRequestDataRow.IsCheque_Print = "N";
                }
                PaymentRequestDataRow.Account_Based = chkAccountBased.SelectedValue;
                PaymentRequestDataRow.Created_By = intUserID;
                PaymentRequestDataRow.Created_On = Convert.ToDateTime("1/1/1700"); // will handle in SP
                PaymentRequestDataRow.Modified_By = -1; // Since it is insert mode we dont want to handle here
                PaymentRequestDataRow.Modified_Date = Convert.ToDateTime("1/1/1700"); // will handle in SP
                PaymentRequestDataRow.TXN_ID = -1; // 
                if (grvPaymentDetails.Rows.Count > 0)
                {
                    PaymentRequestDataRow.XML_PaymentDetails = grvPaymentDetails.FunPubFormXml(enumGridType.TemplateGrid);
                }
                else
                    PaymentRequestDataRow.XML_PaymentDetails = "<Root></Root>";
                if (ViewState["grvPaymentAdjust"] != null)
                {
                    if (((DataTable)ViewState["grvPaymentAdjust"]).Rows.Count > 0 && ((DataTable)ViewState["grvPaymentAdjust"]).Rows[0]["AddOrLess"].ToString() != "")
                    {
                        PaymentRequestDataRow.XML_PaymentAdjustment = grvPaymentAdjustment.FunPubFormXml(enumGridType.TemplateGrid);
                    }
                    else
                    {
                        PaymentRequestDataRow.XML_PaymentAdjustment = "<Root></Root>";
                    }
                }
                else
                {
                    PaymentRequestDataRow.XML_PaymentAdjustment = "<Root></Root>";
                }

                //Observation raised by Sudharsan. updated dated on 14-Nov-2011. by saran
                if (ddlAcctNumber.SelectedIndex >= 0)
                    PaymentRequestDataRow.Bank_ID = Convert.ToInt32(ddlAcctNumber.SelectedValue);
                else

                    PaymentRequestDataRow.Bank_ID = -1;
                if (ddlPayMode.SelectedValue == "1")
                {
                    PaymentRequestDataRow.Instrument_Type = "C";

                }
                else if (ddlPayMode.SelectedValue == "2")
                {
                    PaymentRequestDataRow.Instrument_Type = "D";

                }
                if (txtInstrumentNumber.Text != string.Empty)
                    PaymentRequestDataRow.Instrument_No = txtInstrumentNumber.Text;

                PaymentRequestDataRow.Instrument_Status = true;
                if (txtInstrumentDate.Text != string.Empty)
                    PaymentRequestDataRow.Instrument_Date = Utility.StringToDate(txtInstrumentDate.Text).ToString();

                //if(txtRemarks.Text !=string.Empty)
                //PaymentRequestDataRow.Remarks = txtRemarks.Text;

                if (ddlPayMode.SelectedValue == "1" && Convert.ToString(ViewState["IsCheque_Print"]) != "P")
                    PaymentRequestDataRow.Is_Update_Req = 1;
                else
                    PaymentRequestDataRow.Is_Update_Req = 0;

                //update if it is cheque or dd
                if (ddlPayMode.SelectedValue == "1" || ddlPayMode.SelectedValue == "2")
                {
                    //if (ddlAcctNumber.SelectedIndex > 0)
                    //{
                    PaymentRequestDataRow.Is_Instrument = 1;
                    //}
                    //else
                    //{

                    //}

                }
                else
                {
                    PaymentRequestDataRow.Is_Instrument = 0;
                }
                PaymentRequestDataTable.AddS3G_LOANAD_PaymentRequestRow(PaymentRequestDataRow);


                ObjLoanAdminAccMgtServicesClient = new LoanAdminAccMgtServicesReference.LoanAdminAccMgtServicesClient();
                SerializationMode SMode = SerializationMode.Binary;


                // FunPriSysJournalEntry();
                string paynum = string.Empty;
                int request_no = 0;
                int errCode = ObjLoanAdminAccMgtServicesClient.FunPubTACreateOrModifyPaymentRequest(out paynum, out request_no, SMode, ClsPubSerialize.Serialize(PaymentRequestDataTable, SMode));
                //int errCode =99;


                if (errCode == 1 || errCode == 2 || errCode == 0)
                {
                    // this is to save the payment request details.
                    if (isWorkFlowTraveler)
                    {
                        WorkFlowSession WFValues = new WorkFlowSession();
                        try
                        {
                            int intWorkflowStatus = UpdateWorkFlowTasks(CompanyId.ToString(), UserId.ToString(), WFValues.LOBId, WFValues.BranchID, paynum, WFValues.WorkFlowProgramId, WFValues.WorkFlowStatusID.ToString(), WFValues.PANUM, WFValues.SANUM, WFValues.ProductId);
                            //Code Added by Ganapathy on 22/10/2012 to avoid double save click BEGINS
                            btnSave.Enabled = false;
                            //END
                            strAlert = "";

                        }
                        catch (Exception ex)
                        {
                            strAlert = " Work Flow is not Assigned";
                        }
                        ShowWFAlertMessage(paynum, ProgramCode, strAlert);
                        return;
                    }
                    else if (strQsMode == "C")
                    {

                        // FORCE PULL IMPLEMENTATION KR
                        DataTable WFFP = new DataTable();

                        if (CheckForForcePullOperation(ProgramCode, "", null, "L", CompanyId, out WFFP))
                        {
                            DataRow dtrForce = WFFP.Rows[0];
                            int intWorkflowStatus = UpdateWorkFlowTasks(CompanyId.ToString(), UserId.ToString(), int.Parse(dtrForce["LOBId"].ToString()), int.Parse(dtrForce["LocationID"].ToString()), "", int.Parse(dtrForce["WFPROGRAMID"].ToString()), dtrForce["WFSTATUSID"].ToString(), "", "", int.Parse(dtrForce["PRODUCTID"].ToString()));
                            //Code Added by Ganapathy on 22/10/2012 to avoid double save click BEGINS
                            btnSave.Enabled = false;
                            //END
                        }
                        strAlert = "Payment Request \"" + paynum + "\"  saved successfully";
                        strAlert += @"\n\nWould you like to raise one more payment request?";
                        strAlert = "if(confirm('" + strAlert + "')){" + strRedirectPageAdd + "}else {" + strRedirectPageView + "}";
                        strRedirectPageView = "";
                        //Code Added by Ganapathy on 22/10/2012 to avoid double save click BEGINS
                        btnSave.Enabled = false;
                        //END
                        ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
                        //ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Payment Request Number " + paynum + " generated successfully.');window.location.href='../LoanAdmin/S3gLoanAdTransLander.aspx?Code=PARE';", true);
                        return;
                    }
                    else
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Payment Request Modified successfully.');window.location.href='../LoanAdmin/S3gLoanAdTransLander.aspx?Code=PARE';", true);
                        //Code Added by Ganapathy on 22/10/2012 to avoid double save click BEGINS
                        btnSave.Enabled = false;
                        //END
                        return;
                    }
                }
                else if (errCode == 53)
                {
                    Utility.FunShowAlertMsg(this, paynum);
                    return;
                }
                else if (errCode == 120)
                {
                    Utility.FunShowAlertMsg(this, paynum);
                    return;
                }
                else if (errCode == 90)
                {
                    Utility.FunShowAlertMsg(this, "Document sequence number not defined for payment request");
                }
                else if (errCode == 91)
                {
                    Utility.FunShowAlertMsg(this, "Document sequence number exceeded for payment request");
                }
                else if (errCode == 99)
                {
                    Utility.FunShowAlertMsg(this, "Calling");
                }
            }
            else
            {
                Utility.FunShowAlertMsg(this, "Payment Total amount should be equal to Document Amount");
            }


            #endregion



        }


        catch (Exception ex)
        {

        }
        finally
        {
            if (ObjLoanAdminAccMgtServicesClient != null)
                ObjLoanAdminAccMgtServicesClient.Close();
        }
    }


    protected void lnkAddAdjust_Click(object sender, EventArgs e)
    {
        try
        {
            DataTable dtPaymentdetails = new DataTable();
            dtPaymentdetails = (DataTable)ViewState["grvPaymentDetails"];

            if (dtPaymentdetails != null)
            {
                if (dtPaymentdetails.Rows.Count == 0)
                {
                    Utility.FunShowAlertMsg(this, "Add atleast one record for payment details");
                    return;
                }
                else if (dtPaymentdetails.Rows.Count == 1 && (dtPaymentdetails.Rows[0]["PANum"].ToString() == "-1"))
                {
                    Utility.FunShowAlertMsg(this, "Add atleast one record for payment details");
                    return;
                }
            }
            else
            {
                Utility.FunShowAlertMsg(this, "Add atleast one record for payment details");
                return;
            }

            DropDownList ddlFooterAddOrLess = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterAddOrLess");
            DropDownList ddlFooterSubAccountNumber = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterSubAccountNumber");
            DropDownList ddlFooterPayType = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPayType");
            DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
            DropDownList ddlFooterGL_Code = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterGL_Code");
            DropDownList ddlFooterSL_Code = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterSL_Code");
            TextBox txtFooterDescription = (TextBox)grvPaymentAdjustment.FooterRow.FindControl("txtFooterDescription");
            TextBox txtFooterAmount = (TextBox)grvPaymentAdjustment.FooterRow.FindControl("txtFooterAmount");
            DataTable dtPmtAdjust = new DataTable();
            if (ViewState["grvPaymentAdjust"] != null)
            {
                dtPmtAdjust = (DataTable)ViewState["grvPaymentAdjust"];
            }


            if (ddlFooterSubAccountNumber != null && ddlFooterPrimeAccountNumber.SelectedIndex > 0 && ddlFooterSubAccountNumber.Items.Count > 1)
            {
                if (ddlFooterSubAccountNumber.SelectedIndex < 1)
                {
                    Utility.FunShowAlertMsg(this, "Select the sub account number.");
                    return;
                }
            }

            if (ddlFooterSL_Code.Items.Count > 1 && ddlFooterSL_Code.SelectedIndex == 0 && ddlPayTo.SelectedValue == "50" && chkAccountBased.SelectedValue == "1")
            {
                Utility.FunShowAlertMsg(this, "Select the SL Code.");
                return;
            }


            DataRow dtPaymentRow = dtPmtAdjust.NewRow();

            dtPaymentRow["AddOrLess"] = ddlFooterAddOrLess.SelectedItem.Text;
            if (ddlFooterPayType.SelectedIndex > 0)
            {
                dtPaymentRow["PayType"] = ddlFooterPayType.SelectedItem.Text;
                dtPaymentRow["PayTypeID"] = ddlFooterPayType.SelectedItem.Value;
            }
            if (ddlFooterPrimeAccountNumber.SelectedIndex > 0)
            {
                dtPaymentRow["PANum"] = ddlFooterPrimeAccountNumber.SelectedItem.Text;
                dtPaymentRow["Application_ID"] = ddlFooterPrimeAccountNumber.SelectedValue;
            }
            if (ddlFooterSubAccountNumber.SelectedIndex > 0)
            {
                dtPaymentRow["SANum"] = ddlFooterSubAccountNumber.SelectedItem.Text;
                dtPaymentRow["Tranche_ID"] = ddlFooterSubAccountNumber.SelectedValue;
            }
            if (ddlFooterGL_Code.SelectedIndex > 0)
                dtPaymentRow["GL_Code"] = ddlFooterGL_Code.SelectedValue;
            if (ddlFooterSL_Code.SelectedIndex > 0)
                dtPaymentRow["SL_Code"] = ddlFooterSL_Code.SelectedValue;
            dtPaymentRow["Remarks"] = txtFooterDescription.Text;
            dtPaymentRow["Amount"] = txtFooterAmount.Text;

            dtPmtAdjust.Rows.Add(dtPaymentRow);

            if (dtPmtAdjust.Rows[0]["AddOrLess"].ToString() == "")
            {
                dtPmtAdjust.Rows.RemoveAt(0);
            }

            grvPaymentAdjustment.DataSource = dtPmtAdjust;
            ViewState["grvPaymentAdjust"] = dtPmtAdjust;
            grvPaymentAdjustment.DataBind();

            FunPriLoadPANUM();
            FunPriLoadGLcodes();
            FunPriLoadPayType(ddlPayTo.SelectedValue, 1);

            if (ddlPayTo.SelectedValue == "50")
            {

                if (chkAccountBased.SelectedValue == "1")
                {
                    FunDisableGLSLCodeGrid(true);
                    FundisableGridValidation(false);
                    FunProAcctBasedCtrlsValidation(false);
                }
                else
                {
                    FunDisableGLSLCodeGrid(false);
                    FundisableGridValidation(true);
                    FunProAcctBasedCtrlsValidation(true);
                }
            }
            else
            {
                FunDisableGLSLCodeGrid(false);
                FundisableGridValidation(true);
            }

        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }


    }


    private bool FunPrichkAcctbasedorgeneral(string primeacctno, string subacctno, string flowtype)
    {
        bool Rtrn = false;
        DataTable dtpmtdtls = new DataTable();
        if (ViewState["grvPaymentDetails"] != null)
            dtpmtdtls = (DataTable)ViewState["grvPaymentDetails"];
        if (primeacctno == "0")
            primeacctno = "";
        if (subacctno == "0")
            subacctno = "";
        if (flowtype == "0")
            flowtype = "";

        if (dtpmtdtls.Rows.Count == 0 || (dtpmtdtls.Rows.Count == 1 && dtpmtdtls.Rows[0]["Flow_Type"].ToString() == "" && dtpmtdtls.Rows[0]["GL_Code"].ToString() == ""))
        {
            Rtrn = false;
        }
        else
        {
            if (!((Convert.ToString(dtpmtdtls.Rows[0]["PANum"]).Length > 0 && primeacctno.Length > 0) ||
               (Convert.ToString(dtpmtdtls.Rows[0]["PANum"]).Length == 0 && primeacctno.Length == 0)))
            {
                Rtrn = true;
            }

        }
        return Rtrn;
    }

    protected void lnkAdd_Click(object sender, EventArgs e)
    {
        try
        {
            DropDownList ddlFooterPrimeAccountNumber = ((DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterPrimeAccountNumber"));
            DropDownList ddlFooterSubAccountNumber = ((DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSubAccountNumber"));
            DropDownList ddlFooterDIM2 = ((DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterDIM2"));
            DropDownList ddlFooterRefDocNo = ((DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterRefDocNo"));
            DropDownList ddlFooterFlowType = ((DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType"));
            DropDownList ddlFooterGL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterGL_Code");
            DropDownList ddlFooterSL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSL_Code");
            TextBox txtFooterDescription = ((TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterDescription"));
            TextBox txtFooterAmount = ((TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterAmount"));
            Label lblFooterActualAmount = ((Label)grvPaymentDetails.FooterRow.FindControl("lblFooterActualAmount"));



            if (!Is_DuplicatePayment(ddlFooterPrimeAccountNumber.SelectedValue, ddlFooterSubAccountNumber.SelectedValue, ddlFooterFlowType.SelectedValue, ddlFooterGL_Code.SelectedValue, ddlFooterSL_Code.SelectedValue))
            {
                if (ViewState["grvPaymentDetails"] != null)
                    dtPaymenttable = (DataTable)ViewState["grvPaymentDetails"];

                DataRow dtPaymentRow = dtPaymenttable.NewRow();

                if (ddlFooterSubAccountNumber != null && ddlFooterPrimeAccountNumber.SelectedIndex > 0 && ddlFooterSubAccountNumber.Items.Count > 1)
                {
                    if (ddlFooterSubAccountNumber.SelectedIndex < 1)
                    {
                        Utility.FunShowAlertMsg(this, "Select the sub account number.");
                        return;
                    }
                }
                if (ddlPayTo.SelectedValue == "50")
                {
                    bool chkAcctbased = false;
                    chkAcctbased = FunPrichkAcctbasedorgeneral(ddlFooterPrimeAccountNumber.SelectedValue, ddlFooterSubAccountNumber.SelectedValue, ddlFooterFlowType.SelectedValue);
                    if (chkAcctbased)
                    {
                        Utility.FunShowAlertMsg(this, "Payment should made either through account or pay type.");
                        return;
                    }

                }


                if (ddlFooterSL_Code.Items.Count > 1 && ddlFooterSL_Code.SelectedIndex == 0 && ddlPayTo.SelectedValue == "50" && chkAccountBased.SelectedValue == "1")
                {
                    Utility.FunShowAlertMsg(this, "Select the SL Code.");
                    return;
                }


                if (ddlFooterPrimeAccountNumber.SelectedIndex > 0)
                {
                    dtPaymentRow["PANum"] = ddlFooterPrimeAccountNumber.SelectedItem.ToString();
                    dtPaymentRow["Application_ID"] = ddlFooterPrimeAccountNumber.SelectedValue;
                }
                else
                    dtPaymentRow["PANum"] = null;

                if (ddlFooterSubAccountNumber.SelectedIndex > 0)
                {
                    dtPaymentRow["SANum"] = ddlFooterSubAccountNumber.SelectedItem.ToString();
                    dtPaymentRow["Tranche_ID"] = ddlFooterSubAccountNumber.SelectedValue;
                }
                else
                    dtPaymentRow["SANum"] = null;

                if (ddlFooterDIM2.SelectedValue.Length > 0)
                {
                    if (Convert.ToInt64(ddlFooterDIM2.SelectedValue) > 0)
                    {
                        dtPaymentRow["Asset"] = ddlFooterDIM2.SelectedItem.ToString();
                        dtPaymentRow["Asset_ID"] = ddlFooterDIM2.SelectedValue;
                    }
                    else
                        dtPaymentRow["Asset"] = null;
                }
                else
                    dtPaymentRow["Asset"] = null;
                if (ddlFooterRefDocNo.SelectedIndex > 0)
                    dtPaymentRow["RefDocNo"] = ddlFooterRefDocNo.SelectedItem.ToString();
                else
                    dtPaymentRow["RefDocNo"] = null;
                // dr_paymentDetails["PayTypeID"] = ((DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterDIM2")).SelectedItem.ToString();
                if (lblFooterActualAmount.Text == "" || lblFooterActualAmount.Text == string.Empty)
                {
                    lblFooterActualAmount.Text = "0";
                }
                if (ddlFooterPrimeAccountNumber.SelectedIndex > 0 && ddlFooterFlowType.SelectedIndex > 0 && ddlPayTo.SelectedValue != "50")
                {
                    if (Convert.ToDecimal(txtFooterAmount.Text) > Convert.ToDecimal(lblFooterActualAmount.Text))
                    {
                        Utility.FunShowAlertMsg(this, "Amount should not exceed Rs." + lblFooterActualAmount.Text);
                        txtFooterAmount.Text = lblFooterActualAmount.Text;
                        return;
                    }
                }
                if (ddlFooterFlowType.SelectedValue == "215")
                {
                    if (Convert.ToDecimal(txtFooterAmount.Text) > Convert.ToDecimal(lblFooterActualAmount.Text))
                    {
                        Utility.FunShowAlertMsg(this, "Amount should not exceed Rs." + lblFooterActualAmount.Text);
                        txtFooterAmount.Text = lblFooterActualAmount.Text;
                        return;
                    }
                }
                if (ddlFooterFlowType.SelectedIndex > 0)
                {
                    dtPaymentRow["PayTypeID"] = ddlFooterFlowType.SelectedItem.Value;
                    dtPaymentRow["Flow_Type"] = ddlFooterFlowType.SelectedItem.ToString();
                }

                if (ddlFooterGL_Code.SelectedIndex > 0)
                {
                    dtPaymentRow["GL_Code"] = ddlFooterGL_Code.SelectedValue;
                }

                if (ddlFooterSL_Code.SelectedIndex > 0)
                {
                    dtPaymentRow["SL_Code"] = ddlFooterSL_Code.SelectedValue;
                }

                dtPaymentRow["Description"] = txtFooterDescription.Text;
                dtPaymentRow["Amount"] = txtFooterAmount.Text;
                dtPaymentRow["ActualAmount"] = lblFooterActualAmount.Text;//have to check for general
                dtPaymenttable.Rows.Add(dtPaymentRow);

                if (dtPaymenttable.Rows[0]["PANum"].ToString() == "-1")
                {
                    dtPaymenttable.Rows.RemoveAt(0);
                }
                grvPaymentDetails.DataSource = dtPaymenttable;
                ViewState["grvPaymentDetails"] = dtPaymenttable;
                grvPaymentDetails.DataBind();
                if (ddlPayTo.SelectedValue == "50" && chkAccountBased.SelectedValue == "1")
                {
                    FunDisableGLSLCodeGrid(true);
                    FundisableGridValidation(false);

                }
                else
                {
                    FunDisableGLSLCodeGrid(false);
                    FundisableGridValidation(true);
                }

            }
            else
            {
                Utility.FunShowAlertMsg(this, "Payment cannot be duplicated.");
                return;
            }
            FunPriLoadPANUM();
            FunPriLoadGLcodes();
            FunPriLoadPayType(ddlPayTo.SelectedValue, 1);
            if (ddlPayTo.SelectedValue == "50")
            {

                if (chkAccountBased.SelectedValue == "1")
                {
                    FunDisableGLSLCodeGrid(true);
                    FunProAcctBasedCtrlsValidation(false);
                }
                else
                {
                    FunDisableGLSLCodeGrid(false);
                    FunProAcctBasedCtrlsValidation(true);
                }
            }
            else
                FunDisableGLSLCodeGrid(false);
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }

    protected void btnCoveringLetter_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriDecimalCommaSeperator(100000);
            string htmltablePmtLessadjustment = "";
            string htmltablePmtAddadjustment = "";
            string htmltablepaydts = "";
            if (ViewState["grvPaymentDetails"] != null)
            {
                htmltablepaydts = FunPriConvertGridviewtoHTmlTable((DataTable)ViewState["grvPaymentDetails"]);
            }
            if (ViewState["grvPaymentAdjust"] != null)
            {
                DataTable dtPmtAdjustment = (DataTable)ViewState["grvPaymentAdjust"];
                dtPmtAdjustment.DefaultView.RowFilter = "AddOrLess = 'Add'";
                DataTable dtPaymentAddAdjust = dtPmtAdjustment.DefaultView.ToTable();

                dtPmtAdjustment.DefaultView.RowFilter = "AddOrLess = 'Less'";
                DataTable dtPaymentLessAdjust = dtPmtAdjustment.DefaultView.ToTable();

                if (dtPmtAdjustment.Rows.Count > 0)
                {
                    if (dtPmtAdjustment.Rows[0]["AddOrLess"].ToString() != "")
                    {
                        if (dtPaymentAddAdjust.Rows.Count > 0)
                            htmltablePmtAddadjustment = FunPriConvertGridviewtoHTmlTable(dtPaymentAddAdjust);
                        if (dtPaymentLessAdjust.Rows.Count > 0)
                            htmltablePmtLessadjustment = FunPriConvertGridviewtoHTmlTable(dtPaymentLessAdjust);
                    }
                }
            }
            String htmlText = GetHTMLTextCoveringLetter(htmltablepaydts, htmltablePmtAddadjustment, htmltablePmtLessadjustment);
            string strnewFile = (Server.MapPath(".") + "\\PDF Files\\" + txtPaymentRequestNo.Text.Replace('/', '_') + "_CoveringLetter" + ".pdf");
            string strFileName = "/LoanAdmin/PDF Files/" + txtPaymentRequestNo.Text.Replace("/", "_").Replace(" ", "").Replace(":", "") + "_CoveringLetter" + ".pdf";
            Document doc = new Document();
            PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(strnewFile, FileMode.Create));
            doc.AddCreator("Sundaram Infotech Solutions Limited");
            doc.AddTitle("Covering Letter_" + txtPaymentRequestNo.Text.Replace('/', '_'));
            doc.Open();
            List<IElement> htmlarraylist = iTextSharp.text.html.simpleparser.HTMLWorker.ParseToList(new StringReader(htmlText), null);
            for (int k = 0; k < htmlarraylist.Count; k++)
            { doc.Add((IElement)htmlarraylist[k]); }
            doc.AddAuthor("S3G Team");
            doc.Close();
            //System.Diagnostics.Process.Start(strnewFile);
            string strScipt = "window.open('../Common/S3GDownloadPage.aspx?qsFileName=" + strFileName + "', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strScipt, true);
        }
        catch (DirectoryNotFoundException dr)
        {
            Utility.FunShowAlertMsg(this, "The Target Directory was not found in the server to generate the PDF file");
        }
        catch (Exception ex)
        {
            Utility.FunShowAlertMsg(this, " Error in creating a PDF file");
        }
    }


    protected void grvPaymentAdjustment_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            DataTable dtPmtAdjust = new DataTable();
            if (ViewState["grvPaymentAdjust"] != null)
            {
                dtPmtAdjust = (DataTable)ViewState["grvPaymentAdjust"];
            }
            dtPmtAdjust.Rows.RemoveAt(e.RowIndex);
            if (dtPmtAdjust.Rows.Count == 0)
            {
                FunpriBlank();
            }
            else
            {
                grvPaymentAdjustment.DataSource = dtPmtAdjust;
                ViewState["grvPaymentAdjust"] = dtPmtAdjust;
                grvPaymentAdjustment.DataBind();
            }
            FunPriLoadPANUM();
            FunPriLoadGLcodes();
            FunPriLoadPayType(ddlPayTo.SelectedValue, 1);
            if (ddlPayTo.SelectedValue == "50")
            {

                if (chkAccountBased.SelectedValue == "1")
                {
                    FunDisableGLSLCodeGrid(true);
                    FundisableGridValidation(false);
                    FunProAcctBasedCtrlsValidation(false);
                }
                else
                {
                    FunDisableGLSLCodeGrid(false);
                    FundisableGridValidation(true);
                    FunProAcctBasedCtrlsValidation(true);
                }
            }
            else
            {
                FunDisableGLSLCodeGrid(false);
                FundisableGridValidation(true);
            }

        }
        catch (Exception ex)
        {
            Utility.FunShowAlertMsg(this, "Unable to delete.");
        }


    }
    protected void grvPaymentAdjustment_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            calcSumAmountDetails();
            calcSumAmount();

            if (string.Compare(strQsMode, "Q") == 0)
            {
                LinkButton lnkRemove = (LinkButton)e.Row.FindControl("lnkRemove");
                if (lnkRemove != null)
                    lnkRemove.Enabled = false;
                /* TextBox lblDescription = (TextBox)e.Row.FindControl("lblDescription");
                 if(lblDescription!=null)
                     lblDescription.ReadOnly = true;*/
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }


    private bool Is_DuplicatePayment(string PrimeAccountNumber, string SubAccountNumber, string FlowType, string GL_code, string SL_code)
    {
        Boolean Rtrn = false;
        DataTable dtpmtdtls = new DataTable();
        if (ViewState["grvPaymentDetails"] != null)
            dtpmtdtls = (DataTable)ViewState["grvPaymentDetails"];
        if (PrimeAccountNumber == "0")
            PrimeAccountNumber = "";
        if (SubAccountNumber == "0")
            SubAccountNumber = "";
        if (FlowType == "0")
            FlowType = "";
        if (GL_code == "0")
            GL_code = "";
        if (SL_code == "0")
            SL_code = "";
        if (dtpmtdtls.Rows.Count == 0)
        {
            Rtrn = false;
        }
        else
        {
            for (int rowcount = 0; rowcount < dtpmtdtls.Rows.Count; rowcount++)
            {
                if ((PrimeAccountNumber == Convert.ToString(dtpmtdtls.Rows[rowcount]["PANum"])) &&
                    (SubAccountNumber == Convert.ToString(dtpmtdtls.Rows[rowcount]["SANum"])) &&
                    (FlowType == Convert.ToString(dtpmtdtls.Rows[rowcount]["PayTypeID"])) &&
                    (GL_code == Convert.ToString(dtpmtdtls.Rows[rowcount]["GL_Code"])) &&
                    (SL_code == Convert.ToString(dtpmtdtls.Rows[rowcount]["SL_Code"])))
                {
                    Rtrn = true;
                }
            }

        }
        return Rtrn;
    }




    protected void grvPaymentDetails_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.Header)                 // if header - then set the style dynamically.
            {
                lblPaymentDetailsTotal.Text = "0";
            }
            if (e.Row.RowType == DataControlRowType.DataRow)                // If data Row then check the data type and set the style - Alignment.
            {
                //lblFlowType
                Label lblFlowType = (Label)e.Row.FindControl("lblFlowType");
                TextBox lblAmount = (TextBox)e.Row.FindControl("lblAmount");
                if ((!(string.IsNullOrEmpty(lblFlowType.Text))) && (!(string.IsNullOrEmpty(lblAmount.Text))))
                {

                    lblPaymentDetailsTotal.Text = (Convert.ToDecimal(lblPaymentDetailsTotal.Text) + Convert.ToDecimal(lblAmount.Text)).ToString();

                }
                //TextBox lblAmount = (TextBox)e.Row.FindControl("lblAmount");
                if (ddlPayTo.SelectedValue == "50" && chkAccountBased.SelectedValue != "1")
                {
                    lblAmount.ReadOnly = true;
                }
                else if (ddlPayTo.SelectedValue == "11")
                {
                    lblAmount.ReadOnly = true;
                }
                else
                {
                    lblAmount.ReadOnly = false;
                }


            }

            calcSumAmountDetails();
            calcSumAmount();


            if (string.Compare(strQsMode, "Q") == 0)
            {
                LinkButton lnkRemove = (LinkButton)e.Row.FindControl("lnkRemove");
                if (lnkRemove != null)
                    lnkRemove.Enabled = false;
                TextBox lblAmount = (TextBox)e.Row.FindControl("lblAmount");
                if (lblAmount != null)
                    lblAmount.ReadOnly = true;
                TextBox lblDescription = (TextBox)e.Row.FindControl("lblDescription");
                if (lblDescription != null)
                    lblDescription.ReadOnly = true;
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    protected void grvPaymentDetails_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            //Funupdatedatatable();


            DataTable dt_PaymentDetails = (DataTable)ViewState["grvPaymentDetails"];
            if (dt_PaymentDetails != null)
            {
                if (dt_PaymentDetails.Rows.Count > 0)
                {

                    dt_PaymentDetails.Rows.RemoveAt(e.RowIndex);
                    if (dt_PaymentDetails.Rows.Count == 0)
                    {
                        fundisablepaymentdtlsgrid();
                        FunPriLoadPANUM();
                        FunPriLoadGLcodes();
                        FunPriLoadPayType(ddlPayTo.SelectedValue, 1);
                        //FunPriLoadPaytypeingrid(ddlPayTo.SelectedValue);
                        if (ddlPayTo.SelectedValue == "50")
                        {
                            if (chkAccountBased.SelectedValue == "1")
                            {
                                FunDisableGLSLCodeGrid(true);
                                FundisableGridValidation(false);
                                FunProAcctBasedCtrlsValidation(false);
                            }
                            else
                            {
                                FunDisableGLSLCodeGrid(false);
                                FundisableGridValidation(true);
                                FunProAcctBasedCtrlsValidation(true);
                            }
                        }
                        else
                        {
                            FunDisableGLSLCodeGrid(false);
                            FundisableGridValidation(true);
                        }
                        //For UAT Fix dated on 18-Apr-2012 modified by saran 
                        if (string.Compare(strQsMode, "C") == 0)//For create mode
                            FunPriRestPaytypedetails();



                    }

                    else
                    {
                        //dt_PaymentDetails.Rows.RemoveAt(0);
                        grvPaymentDetails.DataSource = dt_PaymentDetails;
                        grvPaymentDetails.DataBind();
                        FunPriLoadPANUM();
                        FunPriLoadGLcodes();

                        if (btnGo.Enabled)
                            grvPaymentDetails.FooterRow.Visible = false;
                        else
                        {
                            grvPaymentDetails.FooterRow.Visible = true;
                            FunPriLoadPayType(ddlPayTo.SelectedValue, 1);
                            //FunPriLoadPaytypeingrid(ddlPayTo.SelectedValue);
                            if (ddlPayTo.SelectedValue == "50")
                            {
                                if (chkAccountBased.SelectedValue == "1")
                                {
                                    FunDisableGLSLCodeGrid(true);
                                    FundisableGridValidation(false);
                                    FunProAcctBasedCtrlsValidation(false);
                                }
                                else
                                {
                                    FunDisableGLSLCodeGrid(false);
                                    FundisableGridValidation(true);
                                    FunProAcctBasedCtrlsValidation(true);
                                }
                            }
                            else
                            {
                                FunDisableGLSLCodeGrid(false);
                                FundisableGridValidation(true);
                            }

                        }


                    }
                }

            }
            else
            {
                if (grvPaymentDetails != null)
                {
                    if (grvPaymentDetails.Rows.Count <= 1)
                    {
                        Utility.FunShowAlertMsg(this, "Should not allowed to remove Payment details,atleast one record needed");
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Utility.FunShowAlertMsg(this, "Unable to delete.");
            return;
        }

    }

    //For UAT Fix dated on 18-Apr-2012 modified by saran 
    private void FunPriRestPaytypedetails()
    {
        try
        {
            if (txtFromDate.Text != string.Empty)
                txtFromDate.Text = string.Empty;
            if (txtToDate.Text != string.Empty)
                txtToDate.Text = string.Empty;
            if (ddlPayType.SelectedIndex > 0)
                ddlPayType.SelectedIndex = -1;

        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw ex;
        }
    }

    private void FunPriLoadPaytypeingrid(string strPayto)
    {
        try
        {
            string strProcName = "S3G_LOANAD_GetPaymentTypedetails";
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_ID", intCompanyID.ToString());
            Procparam.Add("@LOB_ID", ddlLOB.SelectedValue);
            if (ddlLOB.SelectedItem.Text.ToLower().Split('-')[0].ToString().Trim() == "ol")
            {
                Procparam.Add("@LOB_Code", "OL");
            }
            switch (strPayto.ToLower())
            {
                case "50":
                    Procparam.Add("@Option", "1");
                    if (grvPaymentDetails.FooterRow != null)
                    {
                        DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
                        ddlFooterFlowType.BindDataTable(strProcName, Procparam, new string[] { "ID", "Name" });
                    }
                    if (grvPaymentAdjustment.FooterRow != null)
                    {

                        DropDownList ddlFooterPayType = ((DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPayType"));
                        ddlFooterPayType.BindDataTable(strProcName, Procparam, new string[] { "ID", "Name" });
                    }
                    break;
                case "1":
                    Procparam.Add("@Option", "2");
                    if (grvPaymentDetails.FooterRow != null)
                    {
                        DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
                        ddlFooterFlowType.BindDataTable(strProcName, Procparam, new string[] { "CashFlow_ID", "CashFlowFlag_Desc" });
                    }
                    if (grvPaymentAdjustment.FooterRow != null)
                    {
                        Procparam.Add("@Adjustmentvalue", "1");
                        DropDownList ddlFooterPayType = ((DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPayType"));
                        ddlFooterPayType.BindDataTable(strProcName, Procparam, new string[] { "CashFlow_ID", "CashFlowFlag_Desc" });
                    }
                    break;
                case "11":
                    Procparam.Add("@Option", "5");
                    if (grvPaymentDetails.FooterRow != null)
                    {
                        DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
                        ddlFooterFlowType.BindDataTable(strProcName, Procparam, new string[] { "CashFlow_ID", "CashFlowFlag_Desc" });
                    }
                    if (grvPaymentAdjustment.FooterRow != null)
                    {
                        Procparam.Add("@Adjustmentvalue", "1");
                        DropDownList ddlFooterPayType = ((DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPayType"));
                        ddlFooterPayType.BindDataTable(strProcName, Procparam, new string[] { "CashFlow_ID", "CashFlowFlag_Desc" });
                    }
                    break;
                default:
                    Procparam.Add("@Option", "3");

                    if (grvPaymentDetails.FooterRow != null)
                    {
                        DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
                        ddlFooterFlowType.BindDataTable(strProcName, Procparam, new string[] { "CashFlow_ID", "CashFlowFlag_Desc" });
                    }
                    if (grvPaymentAdjustment.FooterRow != null)
                    {
                        Procparam.Add("@Adjustmentvalue", "1");
                        DropDownList ddlFooterPayType = ((DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPayType"));
                        ddlFooterPayType.BindDataTable(strProcName, Procparam, new string[] { "CashFlow_ID", "CashFlowFlag_Desc" });
                    }
                    break;
                //default:
                //    Procparam.Add("@Option", "1");
                //    break;

            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    protected void ddlFooterSubAccountNumber_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            DropDownList ddlFooterSubAccountNumber = (DropDownList)sender;
            DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
            DropDownList ddlFooterGL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterGL_Code");
            DropDownList ddlFooterSL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSL_Code");
            TextBox txtFooterDescription = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterDescription");
            TextBox txtFooterAmount = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterAmount");
            Label lblFooterActualAmount = (Label)grvPaymentDetails.FooterRow.FindControl("lblFooterActualAmount");
            ddlFooterFlowType.SelectedIndex = ddlFooterSL_Code.SelectedIndex = ddlFooterGL_Code.SelectedIndex = -1;
            txtFooterDescription.Text = txtFooterAmount.Text = "";
            if (ddlFooterSubAccountNumber.SelectedIndex > 0)
            {
                Procparam = new Dictionary<string, string>();
                Procparam.Add("@Option", "3");
                Procparam.Add("@Company_ID", intCompanyID.ToString());
                Procparam.Add("@Param1", ddlFooterSubAccountNumber.SelectedValue);
                DataTable dtAmount = Utility.GetDefaultData("S3G_TA_GetDetailsForPayment", Procparam);

                lblFooterActualAmount.Text = txtFooterAmount.Text = dtAmount.Rows[0]["ActualAmount"].ToString();

            }
            else
            {
                lblFooterActualAmount.Text = txtFooterAmount.Text = "0";
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void ddlFooterDIM2_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            DropDownList ddlFooterDIM2 = (DropDownList)sender;
            DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
            DropDownList ddlFooterPrimeAccountNumber = ((DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterPrimeAccountNumber"));
            DropDownList ddlFooterSubAccountNumber = ((DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSubAccountNumber"));
            DropDownList ddlFooterGL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterGL_Code");
            DropDownList ddlFooterSL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSL_Code");
            TextBox txtFooterDescription = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterDescription");
            TextBox txtFooterAmount = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterAmount");
            Label lblFooterActualAmount = (Label)grvPaymentDetails.FooterRow.FindControl("lblFooterActualAmount");
            DataSet Ds = new DataSet();

            ddlFooterSL_Code.SelectedIndex = ddlFooterGL_Code.SelectedIndex = -1;
            txtFooterDescription.Text = txtFooterAmount.Text = "";
            if (ddlFooterDIM2.SelectedIndex > 0)
            {
                if (ddlPayTo.SelectedValue == "11")
                {
                    Procparam = new Dictionary<string, string>();
                    Procparam.Add("@Option", "4");
                    Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
                    if (ddlFooterFlowType.SelectedIndex > 0)
                        Procparam.Add("@FlowTypeID", ddlFooterFlowType.SelectedValue);
                    if (ddlFooterDIM2.SelectedIndex > 0)
                        Procparam.Add("@Asset_Ins_Det_Id", ddlFooterDIM2.SelectedValue);
                    Ds = Utility.GetDataset("S3G_LOANAD_GetPaymentRequestInsuranceDetails", Procparam);
                }
                else
                {
                    Procparam = new Dictionary<string, string>();
                    Procparam.Add("@Option", "13");
                    Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
                    if (ddlFooterPrimeAccountNumber.SelectedIndex > 0)
                        Procparam.Add("@PANum", ddlFooterPrimeAccountNumber.SelectedValue);
                    if (ddlFooterSubAccountNumber.SelectedIndex > 0)
                        Procparam.Add("@SANum", ddlFooterSubAccountNumber.SelectedValue);
                    Procparam.Add("@FlowTypeID", ddlFooterFlowType.SelectedValue);
                    if (ddlPayTo.SelectedValue == "1")
                        Procparam.Add("@Payto", "144");
                    else if (ddlPayTo.SelectedValue == "50")
                        Procparam.Add("@OptionPay_To", "1");
                    else
                        Procparam.Add("@Payto", "145");
                    if (ViewState["hdnCustorEntityID"] != null && ViewState["hdnCustorEntityID"].ToString() != string.Empty)
                    {
                        Procparam.Add("@EntityId", ViewState["hdnCustorEntityID"].ToString());
                    }
                    Procparam.Add("@Asset_ID", ddlFooterDIM2.SelectedValue);
                    Ds = Utility.GetDataset("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam);
                }
                if (Ds.Tables[0].Rows.Count > 0)
                {
                    ddlFooterGL_Code.SelectedValue = Ds.Tables[0].Rows[0]["GL_Code"].ToString();
                    ddlFooterSL_Code.SelectedValue = Ds.Tables[0].Rows[0]["SL_Code"].ToString();
                    txtFooterDescription.Text = Ds.Tables[0].Rows[0]["Description"].ToString();
                    txtFooterAmount.Text = Ds.Tables[0].Rows[0]["Amount"].ToString();
                    lblFooterActualAmount.Text = Ds.Tables[0].Rows[0]["ActualAmount"].ToString();
                }

            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void ddlFooterRefDocNo_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            FunPriLoadSLcodes("PD", "");
            DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
            DropDownList ddlFooterRefDocNo = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterRefDocNo");
            DropDownList ddlFooterGL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterGL_Code");
            DropDownList ddlFooterSL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSL_Code");
            DropDownList ddlFooterDIM2 = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterDIM2");
            TextBox txtFooterDescription = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterDescription");
            TextBox txtFooterAmount = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterAmount");
            Label lblFooterActualAmount = (Label)grvPaymentDetails.FooterRow.FindControl("lblFooterActualAmount");
            //FunPriLoadDim2("Asset");
            ddlFooterSL_Code.SelectedIndex = ddlFooterGL_Code.SelectedIndex = ddlFooterDIM2.SelectedIndex = -1;
            txtFooterDescription.Text = txtFooterAmount.Text = "";

            if (ddlFooterRefDocNo.SelectedIndex > 0)
            {
                Procparam = new Dictionary<string, string>();
                if (ddlFooterFlowType.SelectedValue == "202")
                    Procparam.Add("@Option", "8");
                else if (ddlFooterFlowType.SelectedValue == "215")
                    Procparam.Add("@Option", "17");
                Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
                if (ddlLOB.SelectedIndex > 0)
                    Procparam.Add("@Lob_Id", ddlLOB.SelectedValue);
                if (ddlBranch.SelectedIndex > 0)
                {
                    //   Procparam.Add("@Branch_ID", ddlBranch.SelectedValue);
                    Procparam.Add("@Location_ID", ddlBranch.SelectedValue);
                }
                if (ddlFooterRefDocNo.SelectedIndex > 0)
                    Procparam.Add("@Ref_No", ddlFooterRefDocNo.SelectedValue);
                DataSet Ds = new DataSet();
                Ds = Utility.GetDataset("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam);
                if (Ds.Tables[0].Rows.Count > 0)
                {
                    ddlFooterGL_Code.SelectedValue = Ds.Tables[0].Rows[0]["GL_Code"].ToString();
                    ddlFooterSL_Code.SelectedValue = Ds.Tables[0].Rows[0]["SL_Code"].ToString();
                    txtFooterDescription.Text = Ds.Tables[0].Rows[0]["Description"].ToString();
                    txtFooterAmount.Text = Ds.Tables[0].Rows[0]["Amount"].ToString();
                    lblFooterActualAmount.Text = Ds.Tables[0].Rows[0]["ActualAmount"].ToString();
                }
                if (ddlLOB.SelectedItem.Text.ToLower().Split('-')[0].ToString().Trim() == "ol")
                {
                    if (Ds.Tables.Count > 1)
                        if (Ds.Tables[1].Rows.Count > 0)
                        {
                            FunPriLoadDim2("Asset");
                            ddlFooterDIM2.SelectedValue = Ds.Tables[1].Rows[0]["ASSET_ID"].ToString();
                            ddlFooterDIM2.ClearDropDownList();
                        }
                }
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    protected void ddlFooterAddOrLess_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            DropDownList ddlFooterAddOrLess = (DropDownList)sender;
            DropDownList ddlFooterPayType = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPayType");
            DropDownList ddlFooterPrimeAccountNumberA = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
            DropDownList ddlFooterSubAccountNumberA = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterSubAccountNumber");
            DropDownList ddlFooterGL_Code = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterGL_Code");
            DropDownList ddlFooterSL_Code = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterSL_Code");
            TextBox txtFooterAmount = (TextBox)grvPaymentAdjustment.FooterRow.FindControl("txtFooterAmount");
            TextBox txtFooterDescription = (TextBox)grvPaymentAdjustment.FooterRow.FindControl("txtFooterDescription");

            ddlFooterPrimeAccountNumberA.SelectedIndex = ddlFooterSubAccountNumberA.SelectedIndex = ddlFooterPayType.SelectedIndex =
            ddlFooterGL_Code.SelectedIndex = ddlFooterSL_Code.SelectedIndex = -1;
            txtFooterAmount.Text = txtFooterDescription.Text = "";

            FunPriLoadPayType(ddlPayTo.SelectedValue, 1);

            //Procparam = new Dictionary<string, string>();
            //Procparam.Add("@Option", "4");
            //Procparam.Add("@LOB_ID", ddlLOB.SelectedValue);
            //Procparam.Add("@Company_ID", intCompanyID.ToString());
            //Procparam.Add("@AddorLess", ddlFooterAddOrLess.SelectedValue);
            //if (ddlPayTo.SelectedValue == "50")
            //    Procparam.Add("@OptionPay_To", "1");
            //ddlFooterPayType.BindDataTable("S3G_LOANAD_GetPaymentTypedetails", Procparam, new string[] { "CashFlow_ID", "CashFlowFlag_Desc" });

        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void ddlFooterPayType_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            DropDownList ddlFooterPayType = (DropDownList)sender;
            DropDownList ddlFooterSubAccountNumberA = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterSubAccountNumber");
            DropDownList ddlFooterGL_Code = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterGL_Code");
            DropDownList ddlFooterSL_Code = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterSL_Code");
            TextBox txtFooterAmount = (TextBox)grvPaymentAdjustment.FooterRow.FindControl("txtFooterAmount");
            TextBox txtFooterDescription = (TextBox)grvPaymentAdjustment.FooterRow.FindControl("txtFooterDescription");
            ddlFooterGL_Code.SelectedIndex = ddlFooterSL_Code.SelectedIndex = -1;
            txtFooterAmount.Text = txtFooterDescription.Text = "";
            //if (ddlFooterPayType.SelectedIndex > 0)
            //{
            //    if (ddlFooterSubAccountNumberA.Items.Count > 1)
            //    {
            //        if (ddlFooterSubAccountNumberA.SelectedIndex > 0)
            //        {
            //            FunPriLoadSLcodes("PD", "");
            //            //FunPriLoadGLSLcodes();//Adjustment
            //            FunPriLoadGLSLcodesPaymentadjustment();
            //        }
            //        else
            //        {
            //            ddlFooterPayType.SelectedIndex = -1;
            //            Utility.FunShowAlertMsg(this, "Select the sub account number");
            //            return;
            //        }
            //    }
            //    else
            //    {
            //        FunPriLoadSLcodes("PD", "");
            //        //FunPriLoadGLSLcodes();//Adjustment
            //        FunPriLoadGLSLcodesPaymentadjustment();
            //    }

            //}
            if (ddlFooterPayType.SelectedIndex > 0)
            {
                Procparam = new Dictionary<string, string>();
                Procparam.Add("@Option", "2");
                if (PageMode == PageModes.Create)
                {
                    Procparam.Add("@Mode", "1");
                }
                Procparam.Add("@Param1", ddlFooterPayType.SelectedValue);

                ddlFooterGL_Code.Items.Clear();
                ddlFooterSL_Code.Items.Clear();

                ddlFooterGL_Code.BindDataTable("S3G_TA_GetDetailsForPayment", Procparam, new string[] { "GL_Code", "GL_Code" });
                ddlFooterSL_Code.BindDataTable("S3G_TA_GetDetailsForPayment", Procparam, new string[] { "SL_Code", "SL_Code" });

                ddlFooterGL_Code.SelectedIndex = 1;
                ddlFooterSL_Code.SelectedIndex = 1;
            }
            else
            {
                ddlFooterGL_Code.SelectedIndex = ddlFooterSL_Code.SelectedIndex = -1;
                txtFooterAmount.Text = txtFooterDescription.Text = "";
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }




    protected void ddlFooterFlowType_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            DropDownList ddlFooterSubAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSubAccountNumber");
            DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");
            DropDownList ddlFooterRefDocNo = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterRefDocNo");
            DropDownList ddlFooterDIM2 = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterDIM2");
            DropDownList ddlFooterGL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterGL_Code");
            DropDownList ddlFooterSL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterSL_Code");
            TextBox txtFooterDescription = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterDescription");
            TextBox txtFooterAmount = (TextBox)grvPaymentDetails.FooterRow.FindControl("txtFooterAmount");
            if (ddlFooterFlowType.SelectedIndex > 0)
            {
                Procparam = new Dictionary<string, string>();
                Procparam.Add("@Option", "2");
                if (PageMode == PageModes.Create)
                {
                    Procparam.Add("@Mode", "1");
                }
                Procparam.Add("@Param1", ddlFooterFlowType.SelectedValue);

                ddlFooterGL_Code.Items.Clear();
                ddlFooterSL_Code.Items.Clear();

                ddlFooterGL_Code.BindDataTable("S3G_TA_GetDetailsForPayment", Procparam, new string[] { "GL_Code", "GL_Code" });
                ddlFooterSL_Code.BindDataTable("S3G_TA_GetDetailsForPayment", Procparam, new string[] { "SL_Code", "SL_Code" });

                ddlFooterGL_Code.SelectedIndex = 1;
                ddlFooterSL_Code.SelectedIndex = 1;

                //if (grvPaymentAdjustment.FooterRow != null)
                //{
                //    ddlFooterGL_Code.BindDataTable("S3G_LOANAD_GetPaymentRequestgridDetails", Procparam, new string[] { "GL_Code", "GL_Code" });
                //}

                //if (ddlPayTo.SelectedValue == "50" && chkAccountBased.SelectedValue == "1")
                //{
                //    FunDisableGLSLCodeGrid(true);
                //}
                //else
                //{
                //    FunDisableGLSLCodeGrid(false);
                //}
                //ddlFooterGL_Code.SelectedIndex = ddlFooterSL_Code.SelectedIndex = -1;
                //txtFooterDescription.Text = txtFooterAmount.Text = "";
                //if (ddlFooterDIM2.Items.Count > 1)
                //    ddlFooterDIM2.SelectedIndex = -1;
                //if (ddlFooterFlowType.SelectedValue == "202")
                //{
                //    if (ddlFooterSubAccountNumber.Items.Count > 1)
                //    {
                //        if (ddlFooterSubAccountNumber.SelectedIndex > 0)
                //        {
                //            grvPaymentDetails.Columns[4].Visible = true;
                //            FunPriLoadRefDocno();
                //            //FunPriLoadDim2("Asset");
                //        }
                //        else
                //        {
                //            ddlFooterFlowType.SelectedIndex = -1;
                //            Utility.FunShowAlertMsg(this, "Select the sub account number");
                //            return;
                //        }
                //    }
                //    else
                //    {
                //        grvPaymentDetails.Columns[4].Visible = true;
                //        FunPriLoadRefDocno();
                //        //FunPriLoadDim2("Asset");
                //    }
                //}
                //else if (ddlFooterFlowType.SelectedValue == "215")
                //{
                //    grvPaymentDetails.Columns[4].Visible = true;
                //    RequiredFieldValidator RFVddlPrimeAccountNumber = (RequiredFieldValidator)grvPaymentDetails.FooterRow.FindControl("RFVddlPrimeAccountNumber");
                //    RFVddlPrimeAccountNumber.Enabled = false;
                //    FunPriLoadRefDocnoIVE();
                //}
                //else
                //{
                //    grvPaymentDetails.Columns[4].Visible = false;
                //    RequiredFieldValidator RFVddlPrimeAccountNumber = (RequiredFieldValidator)grvPaymentDetails.FooterRow.FindControl("RFVddlPrimeAccountNumber");
                //    RFVddlPrimeAccountNumber.Enabled = true;
                //    if (ddlFooterSubAccountNumber.Items.Count > 1)
                //    {
                //        if (ddlFooterSubAccountNumber.SelectedIndex > 0)
                //        {
                //            if (ddlPayTo.SelectedValue == "11")//This is for insurance Payment 
                //            {
                //                FunPriloadGLSLCodeInsurance();
                //            }
                //            else // All other payments 
                //            {
                //                FunPriLoadSLcodes("PD", "");
                //                FunPriLoadGLSLcodes();//payment details
                //            }
                //        }
                //        else
                //        {
                //            ddlFooterFlowType.SelectedIndex = -1;
                //            Utility.FunShowAlertMsg(this, "Select the sub account number");
                //            return;
                //        }
                //    }
                //    else
                //    {

                //        if (ddlPayTo.SelectedValue == "11")//This is for insurance Payment 
                //        {
                //            FunPriloadGLSLCodeInsurance();
                //        }
                //        else // All other payments 
                //        {
                //            FunPriLoadSLcodes("PD", "");
                //            FunPriLoadGLSLcodes();//payment details
                //        }
                //    }
                //}
            }
            else
            {
                ddlFooterGL_Code.SelectedIndex = ddlFooterRefDocNo.SelectedIndex = ddlFooterSL_Code.SelectedIndex = -1;
                txtFooterDescription.Text = txtFooterAmount.Text = "";
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    //Payment Details
    protected void ddlFooterGL_Code_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            DropDownList ddlFooterGL_Code = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterGL_Code");
            if (ddlFooterGL_Code.SelectedIndex > 0)
                FunPriLoadSLcodes("PD", ddlFooterGL_Code.SelectedValue);
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    //Payment Adjustment
    protected void ddlFooterGL_CodeA_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            DropDownList ddlFooterGL_Code = (DropDownList)sender;
            DropDownList ddlFooterPayType = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPayType");
            TextBox txtFooterDescription = (TextBox)grvPaymentAdjustment.FooterRow.FindControl("txtFooterDescription");
            TextBox txtFooterAmount = (TextBox)grvPaymentAdjustment.FooterRow.FindControl("txtFooterAmount");

            ddlFooterPayType.SelectedIndex = -1;
            txtFooterAmount.Text = txtFooterDescription.Text = "";
            if (ddlFooterGL_Code.SelectedIndex > 0)
                FunPriLoadSLcodes("PA", ddlFooterGL_Code.SelectedValue);
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }


    //Payment Details
    protected void ddlFooterPrimeAccountNumberA_SelectedIndexChanged(object sender, EventArgs e)
    {
        DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
        DropDownList ddlFooterPayType = (DropDownList)grvPaymentAdjustment.FooterRow.FindControl("ddlFooterPayType");
        FunClearPaymentAdjustgridfooter();
        if (ddlFooterPrimeAccountNumber != null && ddlFooterPrimeAccountNumber.SelectedIndex > 0)
        {
            FunPriLoadSANUM("PA");
            ddlFooterPayType.SelectedIndex = -1;
        }
        else
            ddlFooterPayType.SelectedIndex = -1;
    }
    //Payment Details
    protected void ddlFooterPrimeAccountNumber_SelectedIndexChanged(object sender, EventArgs e)
    {
        FunProPANumSelectedIndexChange();
    }


    protected void FunProPANumSelectedIndexChange()
    {
        try
        {
            if (grvPaymentDetails.FooterRow != null)
            {
                DropDownList ddlFooterPrimeAccountNumber = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterPrimeAccountNumber");
                DropDownList ddlFooterFlowType = (DropDownList)grvPaymentDetails.FooterRow.FindControl("ddlFooterFlowType");

                FunClearPaymentdtlgridfooter();
                if (ddlFooterPrimeAccountNumber != null && ddlFooterPrimeAccountNumber.SelectedIndex > 0)
                {
                    FunPriLoadSANUM("PD");
                    ddlFooterFlowType.SelectedIndex = -1;
                }
                else
                    ddlFooterFlowType.SelectedIndex = -1;
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }




    protected void btnCancelPayment_Click(object sender, EventArgs e)
    {
        try
        {
            if (string.IsNullOrEmpty(txtPaymentRequestNo.Text))
            {
                Utility.FunShowAlertMsg(this, "Select the Requested number to cancel");
            }
            else
            {
                if (Procparam != null)
                    Procparam.Clear();
                else
                    Procparam = new Dictionary<string, string>();

                Procparam.Add("@Payment_Request_No", txtPaymentRequestNo.Text);
                Procparam.Add("@ErrorCode", "-1");
                Procparam.Add("@UserID", intUserID.ToString());
                DataTable dt = Utility.GetDefaultData(SPNames.S3G_LOANAD_CancelPaymentRequest, Procparam);

                if (dt != null && dt.Rows.Count > 0)
                {
                    if (!(string.IsNullOrEmpty(dt.Rows[0]["ErrorCode"].ToString())))
                    {
                        if ((Convert.ToInt32(dt.Rows[0]["ErrorCode"].ToString())) == 1)
                        {
                            //Utility.FunShowAlertMsg(this, "Payment Request Cancelled successfully");
                            //ddlPaymentStatus.SelectedValue = "5";
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Payment Request cancelled successfully.');window.location.href='../LoanAdmin/S3gLoanAdTransLander.aspx?Code=PARE';", true);
                            return;
                        }
                        else
                        {
                            Utility.FunShowAlertMsg(this, "Error in cancelling this Payment Request");
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Utility.FunShowAlertMsg(this, "Error in cancelling this Payment Request");
        }

    }





    private int FunPriInsertInstrumentdetails()
    {
        ObjLoanAdminAccMgtServicesClient = new LoanAdminAccMgtServicesReference.LoanAdminAccMgtServicesClient();
        try
        {
            int ErrorCode = 1;
            LoanAdminAccMgtServices.S3G_LOANAD_InstrumentdetailsDataTable InstrumentdetailsDataTable = new LoanAdminAccMgtServices.S3G_LOANAD_InstrumentdetailsDataTable();
            LoanAdminAccMgtServices.S3G_LOANAD_InstrumentdetailsRow InstrumentdetailsRow = InstrumentdetailsDataTable.NewS3G_LOANAD_InstrumentdetailsRow();
            InstrumentdetailsDataTable.NewS3G_LOANAD_InstrumentdetailsRow();

            InstrumentdetailsRow.Company_ID = intCompanyID;
            if (Convert.ToInt32(ddlAcctNumber.SelectedValue) > 0 && ddlPayMode.SelectedValue == "1")
            {
                InstrumentdetailsRow.Bank_ID = Convert.ToInt32(ddlAcctNumber.SelectedValue);
            }
            else if (Convert.ToInt32(ddlbankname.SelectedValue) > 0 && ddlPayMode.SelectedValue == "2")
            {
                InstrumentdetailsRow.Bank_ID = Convert.ToInt32(ddlbankname.SelectedValue);
            }
            else
            {
                InstrumentdetailsRow.Bank_ID = 0;
            }
            if (ddlPayMode.SelectedValue == "1")
            {
                InstrumentdetailsRow.Instrument_Type = "C";

            }
            else if (ddlPayMode.SelectedValue == "2")
            {
                InstrumentdetailsRow.Instrument_Type = "D";

            }
            InstrumentdetailsRow.Instrument_No = txtInstrumentNumber.Text;
            InstrumentdetailsRow.Instrument_Status = true;
            InstrumentdetailsRow.Instrument_Amount = Convert.ToDecimal(txtDocAmount.Text);
            InstrumentdetailsRow.Instrument_Date = Utility.StringToDate(txtInstrumentDate.Text);
            InstrumentdetailsRow.Remarks = txtRemarks.Text;
            InstrumentdetailsRow.Created_By = intUserID;
            InstrumentdetailsRow.Payment_Request_ID = Convert.ToInt32(strRequestID);
            if (ddlPayMode.SelectedValue == "1" && Convert.ToString(ViewState["IsCheque_Print"]) != "P")
                InstrumentdetailsRow.Is_Update_Req = 1;
            else
                InstrumentdetailsRow.Is_Update_Req = 0;
            InstrumentdetailsDataTable.AddS3G_LOANAD_InstrumentdetailsRow(InstrumentdetailsRow);


            SerializationMode SMode = SerializationMode.Binary;

            ErrorCode = ObjLoanAdminAccMgtServicesClient.FunPubTAInsPaymentRequestInstrument(SMode, ClsPubSerialize.Serialize(InstrumentdetailsDataTable, SMode));
            return ErrorCode;

        }
        catch (Exception ex)
        {
            return 1;
        }
        finally
        {

            ObjLoanAdminAccMgtServicesClient.Close();
        }
    }


    protected void btnPrintCheque_Click(object sender, EventArgs e)
    {
        //string s =Utility.FunPubSetCommaSeperator(txtRemarks.Text, "INR");
        //Utility.FunShowAlertMsg(this,s);
        ////  txtRemarks.Text = string.Format(System.Globalization.CultureInfo.GetCultureInfo("ta-IN").NumberFormat,
        ////"{0:c}", 4454544.5554);
        //return;


        switch ((string)ViewState["IsCheque_Print"])
        {
            case "N":
                ViewState["IsCheque_Print"] = "P";

                if (FunPriInsertInstrumentdetails() == 0)
                {
                    FunPriGeneratePdfVoucher("Payment Request - Cheque", "Cheque");
                    FunPriUpdateStatus();
                    FunPriLoadBankdetailsPmtReq();
                    btnPrintCheque.Text = "Reprint Cheque";
                    btnCoveringLetter.Enabled = true;
                    FunPriSetRemarksMandatory(true);
                    if (ddlbankname.Items.Count > 0)
                        ddlbankname.ClearDropDownList();
                    if (ddlAcctNumber.Items.Count > 0)
                        ddlAcctNumber.ClearDropDownList();
                    //Utility.FunShowAlertMsg(this, "Cheque was printed successfully");
                }
                else
                {
                    ViewState["IsCheque_Print"] = "N";
                    Utility.FunShowAlertMsg(this, "Error in generating Cheque");

                }

                break;
            case "P":
            case "D":

                ViewState["IsCheque_Print"] = "D";
                if (FunPriInsertInstrumentdetails() == 0)
                {
                    FunPriGeneratePdfVoucher("Payment Request - Cheque", "Cheque");
                    FunPriUpdateStatus();
                    FunPriLoadBankdetailsPmtReq();
                    //Utility.FunShowAlertMsg(this, " Cheque was Reprinted successfully");
                }
                else
                {
                    ViewState["IsCheque_Print"] = "D";
                    Utility.FunShowAlertMsg(this, "Error in Regenerating Cheque");

                }
                break;

            //FunPriGeneratePdfVoucher("Payment Request - Cheque (Duplicate Copy)");
            //Utility.FunShowAlertMsg(this, "Duplicate copy of the Cheque was printed successfully");
            //break;

        }
        FunPriToSetChequeStatus(Convert.ToString(ViewState["IsCheque_Print"]));
        //FunPriGeneratePdfVoucher("Payment Request - Cheque", "Cheque");
    }


    //private string FunPriSetCommaSeperator(string DecValue, string strCurrencyCode)
    //{
    //    string Strvalue = "";
    //    string Strrevvalue = "";
    //    string[] strArrValue = new string[100];
    //    if (!string.IsNullOrEmpty(DecValue))
    //    {
    //        switch(strCurrencyCode.ToUpper())
    //        {
    //            case "INR"://Indian Currency
    //                Strvalue=string.Format(System.Globalization.CultureInfo.GetCultureInfo("hi-IN").NumberFormat,
    //                "{0:c}", Convert.ToDecimal(DecValue)).Split(' ')[1].ToString();
    //                break;
    //            default://Us,Uk,Ero etc Currency
    //                Strvalue= string.Format(System.Globalization.CultureInfo.GetCultureInfo("en-us").NumberFormat,
    //                "{0:c}", Convert.ToDecimal(DecValue)).Substring(1).Trim();
    //                break;
    //        }

    //    }
    //     return Strvalue;

    //}


    private void FunPriSetRemarksMandatory(bool BlnFlag)
    {
        RFVRemarks.Enabled = BlnFlag;
        if (BlnFlag)
        {
            lblRemarks.CssClass = "styleReqFieldLabel";
        }
        else
        {
            lblRemarks.CssClass = "styleDisplayLabel";
        }
    }

    protected void btnPrintVoucher_Click(object sender, EventArgs e)
    {
        if (ddlPayMode.SelectedValue == "2")
        {
            /*if ((!(Convert.ToInt32(ddlbankname.SelectedValue) > 0)) && (RBLCompanyCashorBankAcct.SelectedValue == "1"))
            {
                Utility.FunShowAlertMsg(this, "Select the Bank Name");
                return;
            }
            else if ((txtGLCode.Text == "" || txtGLCode.Text == string.Empty) && (RBLCompanyCashorBankAcct.SelectedValue == "1"))
            {
                Utility.FunShowAlertMsg(this, "Enter the GL Code");
                return;
            }
            //else if ((txtSLCode.Text == "" || txtSLCode.Text == string.Empty) && (RBLCompanyCashorBankAcct.SelectedValue == "1"))
            //{
            //    Utility.FunShowAlertMsg(this, "Enter the SL Code");
            //    return;
            //}
            else if (txtInstrumentNumber.Text == "" || txtInstrumentNumber.Text == string.Empty)
            {
                Utility.FunShowAlertMsg(this, "Enter the Instrument Number");
                return;
            }
            else if (txtInstrumentDate.Text == "" || txtInstrumentDate.Text == string.Empty)
            {
                Utility.FunShowAlertMsg(this, "Select the Instrument Date");
                return;
            }*/
        }
        int ErrorcodeDD = 0;
        switch ((string)ViewState["IsVoucher_Print"])
        {
            case "N":
                ViewState["IsVoucher_Print"] = "P";
                /* if (ddlPayMode.SelectedValue == "2")
                     ErrorcodeDD = FunPriInsertInstrumentdetails();
                 if (ErrorcodeDD == 0)
                 {*/
                FunPriGeneratePdfPrintVoucher("Payment Request - Voucher", "Voucher");
                FunPriUpdateStatus();
                //Utility.FunShowAlertMsg(this, "First copy of the Voucher was printed successfully");
                btnPrintCheque.Enabled = true;
                if (ddlPayMode.SelectedValue == "2")
                {
                    btnCoveringLetter.Enabled = true;
                    FunPriPayDtstabDDValidation(false);
                }
                FunChkDocdateReprintcheque();
                /* }
                 else
                 {
                     ViewState["IsVoucher_Print"] = "N";
                     Utility.FunShowAlertMsg(this, "Error in generating Voucher.");
                 }*/
                break;
            case "P":
                ViewState["IsVoucher_Print"] = "D";
                FunPriGeneratePdfPrintVoucher("Payment Request - Voucher (Duplicate Copy)", "Voucher");
                FunPriUpdateStatus();
                break;
            case "D":
                FunPriGeneratePdfPrintVoucher("Payment Request - Voucher (Duplicate Copy)", "Voucher");
                break;
        }
    }

    private void FunPriPayDtstabDDValidation(bool Blnflag)
    {
        try
        {
            RBLCompanyCashorBankAcct.Enabled =
            ddlbankname.Enabled =
                txtGLCode.Enabled =
                txtSLCode.Enabled =
                //txtInstrumentDate.Enabled =
                txtRemarks.Enabled =
                ddlAcctNumber.Enabled =
                txtInstrumentNumber.Enabled = Blnflag;

        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    private void FunPriUpdateStatus()
    {
        try
        {
            if (Procparam == null)
                Procparam = new Dictionary<string, string>();
            else
                Procparam.Clear();
            Procparam.Add("@Voucher_Status", ViewState["IsVoucher_Print"].ToString());
            Procparam.Add("@Cheque_Status", ViewState["IsCheque_Print"].ToString());
            Procparam.Add("@Payment_Request_No", txtPaymentRequestNo.Text);
            Utility.GetDefaultData(SPNames.S3G_LOANAD_UpdatePaymentRequestIsPrint, Procparam);
        }
        catch (Exception ex)
        {
            Utility.FunShowAlertMsg(this, "Error in updating the status");
        }
    }


    private string FunPriConvertGridviewtoHTmlTable(DataTable dt)
    {
        string myhtmlstring = "";

        string strCurrencycode = ddlCurrencyCode.SelectedItem.Text.Split('-')[0].ToString();
        StringBuilder mybuilder = new StringBuilder();
        mybuilder.Append("<table width='75%' border='0.5' cellpadding='1' cellspacing='1'>");
        //For Header Row
        mybuilder.Append("<tr>");
        foreach (DataColumn mycolumn in dt.Columns)
        {
            /*Modified By Tamilselvan.S on 28/06/2012 for Column values convert to Lower for Validation*/
            if (mycolumn.ColumnName.ToLower() == "PANum".ToLower() || mycolumn.ColumnName.ToLower() == "SANum".ToLower() || mycolumn.ColumnName.ToLower() == "Flow_Type".ToLower() || mycolumn.ColumnName.ToLower() == "PayType".ToLower() || mycolumn.ColumnName.ToLower() == "Amount".ToLower())
            {
                mybuilder.Append("<th align='center'>");
                string strColname = "";
                switch (mycolumn.ColumnName.ToLower())
                {
                    case "panum":
                        strColname = "Prime Account Number";
                        break;
                    case "sanum":
                        strColname = "Sub Account Number";
                        break;
                    case "amount":              //due to datatable mismatch we swapped the names for Amount and paytype
                        strColname = "Pay Type";
                        break;
                    case "flow_type":           //due to datatable mismatch we swapped the names for Amount and paytype
                    case "paytype":
                        strColname = "Amount";
                        break;
                    default:
                        strColname = mycolumn.ColumnName.ToString();
                        break;

                }
                mybuilder.Append(strColname);
                mybuilder.Append("</th>");
            }
        }

        mybuilder.Append("</tr>");

        //For datarow
        foreach (DataRow myRow in dt.Rows)
        {
            mybuilder.Append("<tr>");
            string Amountbuilder = "";
            foreach (DataColumn mycolumn in dt.Columns)
            {
                /*Modified By Tamilselvan.S on 28/06/2012 for Column values convert to Lower for Validation*/
                if (mycolumn.ColumnName.ToLower() == "PANum".ToLower() || mycolumn.ColumnName.ToLower() == "SANum".ToLower() || mycolumn.ColumnName.ToLower() == "Flow_Type".ToLower() || mycolumn.ColumnName.ToLower() == "PayType".ToLower() || mycolumn.ColumnName.ToLower() == "Amount".ToLower())
                {

                    if (mycolumn.ColumnName == "Amount")
                    {
                        Amountbuilder = "";
                        Amountbuilder += "<td align='right'>";
                        Amountbuilder += Utility.FunPubSetCommaSeperator(myRow[mycolumn.ColumnName].ToString(), strCurrencycode);
                        Amountbuilder += "</td>";
                    }
                    else
                    {
                        mybuilder.Append("<td align='left'>");
                        mybuilder.Append(myRow[mycolumn.ColumnName].ToString());
                        mybuilder.Append("</td>");
                    }
                }
            }
            mybuilder.Append(Amountbuilder);
            mybuilder.Append("</tr>");
        }
        mybuilder.Append("</table>");

        myhtmlstring = mybuilder.ToString();
        return myhtmlstring;
    }



    private string GetHTMLTextCoveringLetter(string strCopyPaydtls, string strCopyPayAddadj, string strCopyPayLessadj)
    {
        DataTable dtcompanyaddressPV = new DataTable();
        DataTable dtEntityCustomeraddress = new DataTable();
        dtcompanyaddressPV = FunGetCompanyAddress();
        //string[] address = new string[16] { " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " " };
        if (ViewState["Address"] != null)
        {
            dtEntityCustomeraddress = (DataTable)ViewState["Address"];
        }

        string cusOrEnq = "<table><tr><td>" + ucCustomerAddress.CustomerName + "</td></tr><tr><td>" + ucCustomerAddress.CustomerAddress + "</td></tr></table>";

        string strCoveringlettervalue =
             "<font size=\"1\"  color=\"black\" face=\"verdana\">" +
            "<table width=\"90%\"  align=\"left\">" +
               "<tr>" +
 "<td width=\"100%\" colspan=\"2\" align=\"center\"><b><u>" + ObjUserInfo.ProCompanyNameRW + "</u></b>";

        if (dtcompanyaddressPV.Rows[0]["Address1"] != null && dtcompanyaddressPV.Rows[0]["Address1"] != "")
        {
            strCoveringlettervalue += "<br/>" + dtcompanyaddressPV.Rows[0]["Address1"].ToString();
        }
        if (dtcompanyaddressPV.Rows[0]["Address2"] != null && dtcompanyaddressPV.Rows[0]["Address2"] != "")
        {
            strCoveringlettervalue += "<br/>" + dtcompanyaddressPV.Rows[0]["Address2"].ToString();
        }
        if (dtcompanyaddressPV.Rows[0]["City"] != null && dtcompanyaddressPV.Rows[0]["City"] != "")
        {
            strCoveringlettervalue += "<br/>" + dtcompanyaddressPV.Rows[0]["City"].ToString();
        }
        if (dtcompanyaddressPV.Rows[0]["State"] != null && dtcompanyaddressPV.Rows[0]["State"] != "")
        {
            strCoveringlettervalue += "," + dtcompanyaddressPV.Rows[0]["State"].ToString() + "</b>";
        }
        if (dtcompanyaddressPV.Rows[0]["Zip_Code"] != null && dtcompanyaddressPV.Rows[0]["Zip_Code"] != "")
        {
            strCoveringlettervalue += " - " + dtcompanyaddressPV.Rows[0]["Zip_Code"].ToString() + "</b>";
        }

        strCoveringlettervalue += "</b></td></tr>" +
             "<tr>" +
        "<td width=\"100%\" colspan=\"2\" align=\"center\"></td>" +
    "</tr>" +
      "<tr>" +
        "<td width=\"100%\" colspan=\"2\" align=\"center\"></td>" +
    "</tr>" +

    "<tr>" +
        "<td>" +
 "<table>" +
                "<tr>" +
                "<td>" + ucCustomerAddress.CustomerName + "<br/>";
        if (dtEntityCustomeraddress.Rows.Count > 0)
        {
            if (dtEntityCustomeraddress.Rows[0]["Address1"].ToString() != "")
            {
                strCoveringlettervalue += dtEntityCustomeraddress.Rows[0]["Address1"].ToString();
            }
            if (dtEntityCustomeraddress.Rows[0]["Address2"].ToString() != "")
            {
                strCoveringlettervalue += " <br/>" + dtEntityCustomeraddress.Rows[0]["Address2"].ToString();
            }
            if (dtEntityCustomeraddress.Rows[0]["city"].ToString() != "")
            {
                strCoveringlettervalue += " <br/>" + dtEntityCustomeraddress.Rows[0]["city"].ToString();
            }
            if (dtEntityCustomeraddress.Rows[0]["state"].ToString() != "")
            {
                strCoveringlettervalue += " <br/>" + dtEntityCustomeraddress.Rows[0]["state"].ToString();
            }
            if (dtEntityCustomeraddress.Rows[0]["country"].ToString() != "")
            {
                strCoveringlettervalue += " <br/>" + dtEntityCustomeraddress.Rows[0]["country"].ToString();
            }
            if (dtEntityCustomeraddress.Rows[0]["pincode"].ToString() != "")
            {
                strCoveringlettervalue += " - " + dtEntityCustomeraddress.Rows[0]["pincode"].ToString();
            }
        }
        strCoveringlettervalue += "</td></tr></table>" +
    "</td>" +

"<td>" +
    "<table><tr><td></td><td align=\"left\">" + "Date </td><td align=\"left\">: " + DateTime.Now.ToString(strDateFormat) + "</td></tr>" +
        "<tr><td></td><td align=\"left\">Voucher Number </td><td align=\"left\">: " + txtPaymentRequestNo.Text + "</td></tr></table>" +
"</td>" +
"</tr>" +
 "<tr>" +
        "<td width=\"100%\" colspan=\"2\" align=\"center\"></td>" +
    "</tr>" +
  "<tr>" +
        "<td width=\"100%\" colspan=\"2\" align=\"center\"></td>" +
    "</tr>" +
"<tr>" +
"<td width=\"100%\" colspan=\"2\" align=\"left\">" +

"Dear Sir/Madam,<br /><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It is our pleasure in enclosing our " +

        " <b> " + ddlPayMode.SelectedItem.ToString() + " Number ";

        if (txtInstrumentNumber.Text.Length > 0)
            strCoveringlettervalue += " - " + txtInstrumentNumber.Text;

        strCoveringlettervalue += "</b> dated ";

        if (txtInstrumentDate.Text.Length > 0)
            strCoveringlettervalue += "<b>" + txtInstrumentDate.Text + "</b> ";
        strCoveringlettervalue += "drawn on <b>";
        if (ddlbankname.SelectedIndex > 0)
            strCoveringlettervalue += ddlbankname.SelectedItem.ToString();

        strCoveringlettervalue += "</b> for " + ddlCurrencyCode.SelectedItem.Text.Split('-')[0].ToString() + " <b> " +
            Utility.FunPubSetCommaSeperator(lbltotalPaymentAdjust.Text, ddlCurrencyCode.SelectedItem.Text.Split('-')[0].ToString()) +
            " </b> ( " + ddlCurrencyCode.SelectedItem.Text.Split('-')[1].ToString() + " " + Convert.ToDecimal(lbltotalPaymentAdjust.Text).GetAmountInWords() + " </b>)<b>";



        strCoveringlettervalue +=
        " </b> towards payment as given below.</p><br/>" +
        "</td>" +
        "</tr>" +
        "<tr>" +
        "<td colspan=\"2\">" +
        "<table width=\"100%\" >" +
        "<tr>" +
        "<td> Payment Details:" +
        "</td>" +
        "</tr>" +
        "<tr>" +
           "<td>" + strCopyPaydtls +

                       "</td>" +
                   "</tr>";
        if (!string.IsNullOrEmpty(strCopyPayAddadj))
        {
            strCoveringlettervalue += "<tr>" +
                 "<td> Add : Payment" +
                 "</td>" +
                 "</tr>" +
                 "<tr>" +
                    "<td>" + strCopyPayAddadj +
                    "</td>" +
                    "</tr>";
        }
        if (!string.IsNullOrEmpty(strCopyPayLessadj))
        {
            strCoveringlettervalue += "<tr>" +
            "<td> Less : Payment" +
            "</td>" +
            "</tr>" +
            "<tr>" +
               "<td>" + strCopyPayLessadj +
               "</td>" +
               "</tr>";
        }

        strCoveringlettervalue += "<tr>" +
           "<td>" +
           "</td>" +
           "</tr>" +
        "<tr>" +
           "<td>" +
           "<table border='0.5' width=\"75%\">" +
           "<tr>" +
           "<td  align=\"left\"><b>" +
           "Total Payment Amount :" +
           "</td>" +
           "<td align=\"right\"> " + Utility.FunPubSetCommaSeperator(lbltotalPaymentAdjust.Text, ddlCurrencyCode.SelectedItem.Text.Split('-')[0].ToString()) +

           "</b></td>" +
           "</table>" +
           "</td>" +
           "</tr>" +
       "<tr>" +
                      "<td>" +
                       "<table width='75%'>" +
                      "<tr>" +
                      "<td  align=\"left\"><b>(" +
                      ddlCurrencyCode.SelectedItem.Text.Split('-')[1].ToString() + " " + Convert.ToDecimal(lbltotalPaymentAdjust.Text).GetAmountInWords() +
                       ")</b></td></tr>" +
                      "</table>" +
                      "</td>" +
                      "</tr>" +
        "</table>" +
        "</td>" +
        "</tr>" +


        "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
         "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
         "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
          "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
          "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
          "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
          "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
          "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
          "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
          "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
        "<tr>" +
        "<td width=\"100%\" colspan=\"2\" style=\"padding-left:25px;\">For <b>" + ObjUserInfo.ProCompanyNameRW + "</b>" + "</td>" +
        "</tr>" +

        "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
        "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
        "<tr>" +
        "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
        "<tr>" +
        "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
        "<tr>" +
        "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
        "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
        "<tr>" +
        "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
       "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
        "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
        "<tr>" +
        "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
        "</tr>" +
        "<tr>" +
        "<td width=\"100%\" colspan=\"2\" style=\"padding-left:25px;\"><b>Authorised Signatory</b></td>" +
        "</tr>" +
         "<tr>" +
          "<td width=\"25%\" colspan=\"2\" align=\"left\">" + ObjUserInfo.ProUserNameRW.ToString() + "</td>" +
      "</tr>" +

       "<tr>" +
          "<td width=\"100%\" colspan=\"2\">" + DateTime.Now.ToString(strDateFormat) + "  " + DateTime.Now.ToLongTimeString() + "</td>" +
      "</tr>" +
        "</table></font>"
        ;

        return strCoveringlettervalue;
    }

    private DataTable FunGetCompanyAddress()
    {
        Procparam = new Dictionary<string, string>();
        Procparam.Add("@Company_ID", userInfo.ProCompanyIdRW.ToString());
        DataTable dtcompanyaddress = new DataTable();
        dtcompanyaddress = Utility.GetDefaultData("S3G_Get_Company_Details", Procparam);
        return dtcompanyaddress;

    }


    private void FunPriDecimalCommaSeperator(decimal DecValue)
    {
        //INR,USD,SGD,IQD,EUR,LKR
        string strValue = ""; string stractvalue = "";
        if (DecValue > 0)
        {
            string[] strArrValue = new string[50];
            strValue = DecValue.ToString();
            if (strValue.Contains('.'))
            {
                strValue = strValue.Split('.')[0].ToString();
            }

            char[] chrArrvalue = strValue.ToCharArray(0, strValue.Length);



        }

    }


    private string GetHTMLTextPrintVoucher(string strCopy, string strCopyPaydtls, string strCopyPayAddadj, string strCopyPayLessadj)
    {
        DataTable dtcompanyaddressPV = new DataTable();
        DataTable dtEntityCustomeraddress = new DataTable();
        dtcompanyaddressPV = FunGetCompanyAddress();
        //string[] address = new string[16] { " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " " };
        if (ViewState["Address"] != null)
        {
            dtEntityCustomeraddress = (DataTable)ViewState["Address"];
        }

        string cusOrEnq = "<table><tr><td>" + ucCustomerAddress.CustomerName + "</td></tr><tr><td>" + ucCustomerAddress.CustomerAddress + "</td></tr></table>";

        string strVouchervalue =
             "<font size=\"1\"  color=\"black\" face=\"verdana\">" +
            "<table width=\"85%\"  align=\"left\">" +
             "<tr>" +
        "<td width=\"100%\" colspan=\"2\" align=\"center\"><b><u>" + ObjUserInfo.ProCompanyNameRW + "</u></b>";

        if (dtcompanyaddressPV.Rows[0]["Address1"] != null && dtcompanyaddressPV.Rows[0]["Address1"] != "")
        {
            strVouchervalue += "<br/>" + dtcompanyaddressPV.Rows[0]["Address1"].ToString();
        }
        if (dtcompanyaddressPV.Rows[0]["Address2"] != null && dtcompanyaddressPV.Rows[0]["Address2"] != "")
        {
            strVouchervalue += "<br/>" + dtcompanyaddressPV.Rows[0]["Address2"].ToString();
        }
        if (dtcompanyaddressPV.Rows[0]["City"] != null && dtcompanyaddressPV.Rows[0]["City"] != "")
        {
            strVouchervalue += "<br/>" + dtcompanyaddressPV.Rows[0]["City"].ToString();
        }
        if (dtcompanyaddressPV.Rows[0]["State"] != null && dtcompanyaddressPV.Rows[0]["State"] != "")
        {
            strVouchervalue += "," + dtcompanyaddressPV.Rows[0]["State"].ToString() + "</b>";
        }
        if (dtcompanyaddressPV.Rows[0]["Zip_Code"] != null && dtcompanyaddressPV.Rows[0]["Zip_Code"] != "")
        {
            strVouchervalue += " - " + dtcompanyaddressPV.Rows[0]["Zip_Code"].ToString() + "</b>";
        }

        strVouchervalue += "</b></td></tr>" +
             "<tr>" +
        "<td width=\"100%\" colspan=\"2\" align=\"center\"></b></td>" +
    "</tr>" +
     "<tr>" +
        "<td colspan=\"2\" align=\"center\"><b><u>" + strCopy + "</u></b></td>" +
    "</tr>" +
     "<tr>" +
        "<td width=\"100%\" colspan=\"2\" align=\"center\"></b></td>" +
    "</u></tr>" +
        "<tr>" +
        "<td>" +
            "<table>" +
                "<tr>" +
                "<td>" + ucCustomerAddress.CustomerName + "<br/>";
        if (dtEntityCustomeraddress.Rows.Count > 0)
        {
            if (dtEntityCustomeraddress.Rows[0]["Address1"].ToString() != "")
            {
                strVouchervalue += dtEntityCustomeraddress.Rows[0]["Address1"].ToString();
            }
            if (dtEntityCustomeraddress.Rows[0]["Address2"].ToString() != "")
            {
                strVouchervalue += " <br/>" + dtEntityCustomeraddress.Rows[0]["Address2"].ToString();
            }
            if (dtEntityCustomeraddress.Rows[0]["city"].ToString() != "")
            {
                strVouchervalue += " <br/>" + dtEntityCustomeraddress.Rows[0]["city"].ToString();
            }
            if (dtEntityCustomeraddress.Rows[0]["state"].ToString() != "")
            {
                strVouchervalue += " <br/>" + dtEntityCustomeraddress.Rows[0]["state"].ToString();
            }
            if (dtEntityCustomeraddress.Rows[0]["country"].ToString() != "")
            {
                strVouchervalue += " <br/>" + dtEntityCustomeraddress.Rows[0]["country"].ToString();
            }
            if (dtEntityCustomeraddress.Rows[0]["pincode"].ToString() != "")
            {
                strVouchervalue += " - " + dtEntityCustomeraddress.Rows[0]["pincode"].ToString();
            }
        }

        strVouchervalue += "</td></tr></table>" +
       "</td>" +

    "<td>" +
    "<table width='75%'>" +
            "<tr><td>Location </td><td>: " + ddlBranch.SelectedItem.Text + "</td></tr>" +
            "<tr><td>Line of Business </td><td>: " + ddlLOB.SelectedItem.Text + "</td></tr>" +
            "<tr><td>Voucher Number </td><td>: " + txtPaymentRequestNo.Text + "</td></tr>" +
            "<tr><td>Date</td><td>: " + txtPaymentRequestDate.Text + "</td></tr>" +
    "</table>" +
    "</td>" +

    "</tr>";


        strVouchervalue +=
      "<tr>" +
          "<td width=\"75%\" colspan=\"2\" align=\"left\">" +
            "<br /><p>Payment in favour of M/s./Mr./Mrs./Ms.  <b> " + ucCustomerAddress.CustomerName + "</b> ," +
          " vide <b> " + ddlPayMode.SelectedItem.ToString() + " Number ";

        if (txtInstrumentNumber.Text.Length > 0)
            strVouchervalue += " - " + txtInstrumentNumber.Text;

        strVouchervalue += "</b> dated ";

        if (txtInstrumentDate.Text.Length > 0)
            strVouchervalue += "<b>" + txtInstrumentDate.Text + "</b> ";
        strVouchervalue += "drawn on <b>";
        if (ddlbankname.SelectedIndex > 0)
            strVouchervalue += ddlbankname.SelectedItem.ToString();

        strVouchervalue += "</b> for " + ddlCurrencyCode.SelectedItem.Text + " <b> "
            + Utility.FunPubSetCommaSeperator(lbltotalPaymentAdjust.Text, ddlCurrencyCode.SelectedItem.Text.Split('-')[0].ToString()) +
            " </b> ( " + Convert.ToDecimal(lbltotalPaymentAdjust.Text).GetAmountInWords() + " </b>)<b>";


        strVouchervalue += "</b> towards payment as given below.</p>" +

          "</td>" +
      "</tr>" +
      "<tr>" +
          "<td colspan=\"2\">" +
              "<table width=\"100%\" >" +
                 "<tr>" +
                  "<td> Payment Details:" +
                  "</td>" +
                  "</tr>" +
                  "<tr>" +
                      "<td>" + strCopyPaydtls +

                                  "</td>" +
"</tr>";
        if (!string.IsNullOrEmpty(strCopyPayAddadj))
        {
            strVouchervalue += "<tr>" +
                 "<td> Add : Payment" +
                 "</td>" +
                 "</tr>" +
                 "<tr>" +
                    "<td>" + strCopyPayAddadj +
                    "</td>" +
                    "</tr>";
        }
        if (!string.IsNullOrEmpty(strCopyPayLessadj))
        {
            strVouchervalue += "<tr>" +
            "<td> Less : Payment" +
            "</td>" +
            "</tr>" +
            "<tr>" +
               "<td>" + strCopyPayLessadj +
               "</td>" +
               "</tr>";
        }

        strVouchervalue += "<tr>" + "<td>" +
                      "</td>" +
                      "</tr>" +
                  "<tr>" +
                      "<td>" +
                      "<table width='75%' border='0.5'>" +
                      "<tr>" +
                      "<td  align=\"left\"><b>" +
                      "Total Payment Amount :" +
                      "</td>" +
                      "<td align=\"right\"> " + Utility.FunPubSetCommaSeperator(lbltotalPaymentAdjust.Text, ddlCurrencyCode.SelectedItem.Text.Split('-')[0].ToString()) +

                      "</b></td></tr>" +
                      "</table>" +
                      "</td>" +
                      "</tr>" +
                  "<tr>" +
                      "<td>" +
                       "<table width='75%'>" +
                      "<tr>" +
                      "<td  align=\"left\"><b>(" +
                      Convert.ToDecimal(lbltotalPaymentAdjust.Text).GetAmountInWords() +
                       ")</b></td></tr>" +
                      "</table>" +
                      "</td>" +
                      "</tr>" +
              "</table>" +
          "</td>" +
      "</tr>" +

      "<tr>" +
          "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
      "</tr>" +


       "<tr>" +
          "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
      "</tr>" +
       "<tr>" +
          "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
      "</tr>" +

       "<tr>" +
          "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
      "</tr>" +
       "<tr>" +
          "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
      "</tr>" +
       "<tr>" +
          "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
      "</tr>" +
       "<tr>" +
          "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
      "</tr>" +
       "<tr>" +
          "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
      "</tr>" +
       "<tr>" +
          "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
      "</tr>" +
       "<tr>" +
          "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
      "</tr>" +
       "<tr>" +
          "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
      "</tr>" +
       "<tr>" +
          "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
      "</tr>" +
       "<tr>" +
          "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
      "</tr>" +
       "<tr>" +
          "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
      "</tr>" +
      "<tr>" +
          "<td width=\"100%\" colspan=\"2\">&nbsp;</td>" +
      "</tr>" +
      "<tr>" +
          "<td width=\"100%\" colspan=\"2\">" +
          "<table><tr><td>&nbsp;</td><td>Cashier</td><td>Passed by</td><td>Received payment</td></tr></table>" +
          "</td>" +
      "</tr>" +

      "<tr>" +
          "<td width=\"100%\" colspan=\"2\"></td>" +
      "</tr>" +
       "<tr>" +
          "<td width=\"25%\" colspan=\"2\" align=\"left\">" + ObjUserInfo.ProUserNameRW.ToString() + "</td>" +
      "</tr>" +

       "<tr>" +
          "<td width=\"100%\" colspan=\"2\">" + DateTime.Now.ToString(strDateFormat) + "  " + DateTime.Now.ToLongTimeString() + "</td>" +
      "</tr>" +
  "</table></font>"
  ;


        return strVouchervalue;


    }


    private string GetHTMLTextVoucher(string strcopy)
    {
        string strchequevalue = "";

        strchequevalue += "<font size=\"2\"  color=\"Black\" face=\"verdana\">" +
                "<table width=\"94%\" height=\"10%\" border=\"1\"><tr><td>" +
                " <table align=\"center\" width=\"100%\" border=\"0\">" +
                " <tr>" +
                " <td align=\"left\" valign=\"top\">" +
                "<font size=\"5\"  color=\"Blue\" face=\"verdana\">" + ddlbankname.SelectedItem.Text + " </font>" +
                "</td></tr>" +
                " <tr>" +
                " <td align=\"Right\" valign=\"top\"> Date :<u>" + txtInstrumentDate.Text + "</u>" +
                  "</td></tr>" +

                  " <tr>" +
                  " <td align=\"left\" valign=\"top\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PAY :  <u>" + ucCustomerAddress.CustomerName + "</u>" +
                  "</td></tr>" +
                  " <tr>" +
                  " <td align=\"left\" valign=\"top\"> _______________________________________________________________________ or BEARER" +
                  "</td></tr>" +
                  " <tr>" +
                  " <td align=\"left\" valign=\"top\">RUPEES :  <u>" + Convert.ToDecimal(lbltotalPaymentAdjust.Text).GetAmountInWords() + "</u>" +
                  "</td></tr>" +
                   " <tr>" +
                  " <td align=\"left\" valign=\"top\">" +
                          " <table align=\"left\" width=\"100%\">" +
                          " <tr>" +
                          " <td width=\"70%\">" +
                            " <table align=\"left\" border=\"0\" width=\"100%\">" +
                              "<tr><td align=\"left\" >_________________________________________</td></tr>" +
                            "</table>" +
                          " </td>" +
                          " <td width=\"30%\" align=\"left\">" +
                          " <table align=\"left\" border=\"0\" width=\"100%\" >" +
                              "<tr>" +
                                  "<td>" +
                                      "<table border=\"1\">" +
                                              " <tr>" +
                                                  " <td>" +
                                                      "Rs." + lbltotalPaymentAdjust.Text +
                                                  "</td>" +
                                                "</tr>" +
                                      "</table>" +
                                  "</td><td></td>" +
                              "</tr>" +
                          "</table>" +
                          "</td></tr>" +
                          "</table>" +
                  "</td></tr>" +
                  " <tr align=\"left\">" +
                      " <td align=\"left\">" +
                          " <table align=\"left\" width=\"100%\" height=\"10px\" border=\"0\">" +
                              "<tr>" +
                                  "<td>" +
                                      "<table align=\"left\" width=\"100%\" border=\"1\">" +
                                           "<tr><td align=\"left\">Acc.No</td><td colspan=\"2\">";
        if (ViewState["AccountNumber"] != null)
            strchequevalue += ViewState["AccountNumber"].ToString();
        strchequevalue += "</td></tr></table>" +

                                "</td>" +
                               "<td></td><td>For " + userInfo.ProCompanyNameRW + "</td>" +
                            " </tr>" +
                        " </table></td>" +
                        "<td>" +
                            "<table><tr><td></td></tr></table>" +
                        "</td>" +
                        "</tr>" +
                        " <tr>" +
" <td align=\"left\" valign=\"top\">" +
"<font size=\"1\"  color=\"Black\" face=\"verdana\">" + ddlbankname.SelectedItem.Text;
        if (ViewState["BankBranch"] != null)
            strchequevalue += " , " + ViewState["BankBranch"].ToString();

        strchequevalue += "</font>" +
        "</td></tr>" +
        " <tr>" +
        " <td align=\"center\" valign=\"top\">" +
        "<table><tr><td></td><td></td><td>Authorised Signature</td></tr></table>" +
        "</td></tr>" +
        " <tr>" +
        " <td  align=\"center\">" +
        "<font size=\"1\"  color=\"Black\" face=\"Courier\">\"" + txtInstrumentNumber.Text + "\"</font>" +
        "</td></tr>" +
        "</table></td></tr></table></font>";

        return strchequevalue;
    }

    private void FunPriGeneratePdfPrintVoucher(string strCopy, string Type)
    {
        try
        {
            string htmltablePmtLessadjustment = "";
            string htmltablePmtAddadjustment = "";
            string htmltablepaydts = "";
            if (ViewState["grvPaymentDetails"] != null)
            {
                htmltablepaydts = FunPriConvertGridviewtoHTmlTable((DataTable)ViewState["grvPaymentDetails"]);
            }
            if (ViewState["grvPaymentAdjust"] != null)
            {
                DataTable dtPmtAdjustment = (DataTable)ViewState["grvPaymentAdjust"];
                dtPmtAdjustment.DefaultView.RowFilter = "AddOrLess = 'Add'";
                DataTable dtPaymentAddAdjust = dtPmtAdjustment.DefaultView.ToTable();

                dtPmtAdjustment.DefaultView.RowFilter = "AddOrLess = 'Less'";
                DataTable dtPaymentLessAdjust = dtPmtAdjustment.DefaultView.ToTable();

                if (dtPmtAdjustment.Rows.Count > 0)
                {
                    if (dtPmtAdjustment.Rows[0]["AddOrLess"].ToString() != "")
                    {
                        if (dtPaymentAddAdjust.Rows.Count > 0)
                            htmltablePmtAddadjustment = FunPriConvertGridviewtoHTmlTable(dtPaymentAddAdjust);
                        if (dtPaymentLessAdjust.Rows.Count > 0)
                            htmltablePmtLessadjustment = FunPriConvertGridviewtoHTmlTable(dtPaymentLessAdjust);
                    }
                }
            }
            String htmlText = GetHTMLTextPrintVoucher(strCopy, htmltablepaydts, htmltablePmtAddadjustment, htmltablePmtLessadjustment);
            string strnewFile = (Server.MapPath(".") + "\\PDF Files\\" + txtPaymentRequestNo.Text.Replace('/', '_') + "_" + Type + ".pdf");
            string strFileName = "/LoanAdmin/PDF Files/" + txtPaymentRequestNo.Text.Replace("/", "_").Replace(" ", "").Replace(":", "") + "_" + Type + ".pdf";
            Document doc = new Document();
            PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(strnewFile, FileMode.Create));
            doc.AddCreator(ObjUserInfo.ProCompanyNameRW.ToString());
            doc.AddTitle("Voucher_" + strCopy + "_" + txtPaymentRequestNo.Text.Replace('/', '_'));
            doc.Open();
            List<IElement> htmlarraylist = iTextSharp.text.html.simpleparser.HTMLWorker.ParseToList(new StringReader(htmlText), null);
            for (int k = 0; k < htmlarraylist.Count; k++)
            { doc.Add((IElement)htmlarraylist[k]); }
            doc.AddAuthor("S3G Team");
            doc.Close();
            //System.Diagnostics.Process.Start(strnewFile);
            string strScipt = "window.open('../Common/S3GDownloadPage.aspx?qsFileName=" + strFileName + "', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strScipt, true);
        }
        catch (DirectoryNotFoundException dr)
        {
            Utility.FunShowAlertMsg(this, "The Target Directory was not found in the Server to generate the PDF file");
        }
        catch (Exception ex)
        {
            Utility.FunShowAlertMsg(this, " Error in creating a PDF file");
        }
    }

    private void FunPriGeneratePdfVoucher(string strCopy, string Type)
    {
        try
        {
            String htmlText = GetHTMLTextVoucher(strCopy);
            string strnewFile = (Server.MapPath(".") + "\\PDF Files\\" + txtPaymentRequestNo.Text.Replace('/', '_') + "_" + Type + ".pdf");
            string strFileName = "/LoanAdmin/PDF Files/" + txtPaymentRequestNo.Text.Replace("/", "_").Replace(" ", "").Replace(":", "") + "_" + Type + ".pdf";
            Document doc = new Document();
            PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(strnewFile, FileMode.Create));
            doc.AddCreator(ObjUserInfo.ProCompanyNameRW.ToString());
            doc.AddTitle("Voucher_" + strCopy + "_" + txtPaymentRequestNo.Text.Replace('/', '_'));
            doc.Open();
            List<IElement> htmlarraylist = iTextSharp.text.html.simpleparser.HTMLWorker.ParseToList(new StringReader(htmlText), null);
            for (int k = 0; k < htmlarraylist.Count; k++)
            { doc.Add((IElement)htmlarraylist[k]); }
            doc.AddAuthor("S3G Team");
            doc.Close();
            //System.Diagnostics.Process.Start(strnewFile);
            string strScipt = "window.open('../Common/S3GDownloadPage.aspx?qsFileName=" + strFileName + "', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strScipt, true);
        }
        catch (DirectoryNotFoundException dr)
        {
            Utility.FunShowAlertMsg(this, "The Target Directory was not found in the Server to generate the PDF file");
        }
        catch (Exception ex)
        {
            Utility.FunShowAlertMsg(this, " Error in creating a PDF file");
        }
    }


    /*
        protected void btncrtVoucher_Click(object sender, EventArgs e)
        {
            try
            {
                ObjLoanAdminAccMgtServicesClient = new LoanAdminAccMgtServicesReference.LoanAdminAccMgtServicesClient();
                byte[] bytePaymentVoucher = ObjLoanAdminAccMgtServicesClient.FunPubPaymentvoucher(intCompanyID, strRequestID);
                List<ClsPubPaymentvoucher> PaymentVoucherDetails = (List<ClsPubPaymentvoucher>)DeSeriliaze(bytePaymentVoucher);
                Session["PaymentVoucherDetails"] = PaymentVoucherDetails;
            
            }
            catch (Exception ex)
            {
                  ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            }
        }
        */
}
