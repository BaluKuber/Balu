#region "Namespaces"

using System;
using System.Web;
using System.Data;
using System.Text;
using S3GBusEntity.Collection;
using S3GBusEntity;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.IO;
using System.Web.Security;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Xml;
using System.Xml.Linq;
using System.Linq;
using System.ServiceModel;
using AjaxControlToolkit;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.xml;
using iTextSharp.text.html;
using System.Web.Security;
using System.Diagnostics;

#endregion


public partial class Collection_S3G_CLN_RECEIPTPROCESSING_OPC : ApplyThemeForProject
{
    #region Common Variable declaration

    ClnReceiptMgtServicesReference.ClnReceiptMgtServicesClient objReceiptProcessingClient;
    S3GBusEntity.Collection.ClnReceiptMgtServices.S3G_CLN_ReceiptProcessingDataTable objReceiptProcessingDataTable;
    S3GBusEntity.Collection.ClnReceiptMgtServices.S3G_CLN_ReceiptProcessingRow objReceiptProcessingRow;


    int intCompanyID, intUserID = 0;
    string strMode = string.Empty;
    Dictionary<string, string> Procparam = null;
    int intErrCode = 0;
    int intReceiptId;
    UserInfo ObjUserInfo = new UserInfo();
    SerializationMode ObjSerMode = SerializationMode.Binary;
    string strDateFormat = string.Empty;
    static string strModifyAccountNo = string.Empty;
    static string strPageName = "Receipt Processing Creation";
    static string strSuffix = "";
    FormsAuthenticationTicket Ticket;
    public static Collection_S3G_CLN_RECEIPTPROCESSING_OPC obj_Page;
    public string strValueDateGapDays = "", strInstrumentDateGapDays = "";

    string strKey = "Insert";
    string strAlert = "alert('__ALERT__');";
    string strRedirectPage = "~/Collection/S3gCLNTransLander.aspx?Code=CRP";
    string strRedirectPageAdd = "window.location.href='../Collection/S3G_CLN_RECEIPTPROCESSING_OPC.aspx?qsMode=C'";
    string strRedirectPageView = "window.location.href='../Collection/S3gCLNTransLander.aspx?Code=CRP';";
    string strErrorMessagePrefix = @"Correct the following validation(s): </br></br>   ";

    bool bCreate = false;
    bool bClearList = false;
    bool bModify = false;
    bool bQuery = false;
    bool bDelete = false;
    bool bMakerChecker = false;
    S3GSession ObjS3GSession = new S3GSession();
    int strDecMaxLength = 0;
    int strPrefixLength = 0;

    string[] arrSortCol = new string[] { "PODTL.PO_Number" };
    int intNoofSearch = 1;
    ArrayList arrSearchVal = new ArrayList(1);
    PagingValues ObjPaging = new PagingValues();

    public delegate void PageAssignValue(int ProPageNumRW, int intPageSize);

    public int ProPageNumRW
    {
        get;
        set;
    }

    public int ProPageSizeRW
    {
        get;
        set;
    }

    protected void AssignValue(int intPageNum, int intPageSize)
    {
        ProPageNumRW = intPageNum;
        ProPageSizeRW = intPageSize;
        FunPriBindGrid();
    }

    #endregion

    #region "EVENTS"

    #region "Page Load"

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            FunPriPageLoad();
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    #endregion

    #region "Button Events"

    protected void btnCreateCustomer_Click(object sender, EventArgs e)
    {
        try
        {
            HiddenField hdnCustomerId = ucCustomerCodeLov.FindControl("hdnID") as HiddenField;
            if (hdnCustomerId != null)
            {
                ViewState["CustomerID"] = hdnCustomerId.Value;
                FunPriGetCustomerAddress(Convert.ToInt64(hdnCustomerId.Value));
            }
            FunPriClearGridDetails();
            ddlTranche.Clear();
            FunPriClearTmpInvDtl();
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnSave_Click(object sender, EventArgs e)
    {
        try
        {
            Int32 iRcptType = Convert.ToInt32(ddlReceiptType.SelectedValue);
            if (Convert.ToString(ddlLocation.SelectedText) == "")
            {
                Utility.FunShowAlertMsg(this, "Select the Location");
                return;
            }

            Int32 intRcptDtl = FunPriCheckRcptDtl();
            Int32 intFndrtDtl = FunPriCheckFndrDtl();

            if (intRcptDtl > 0 && intFndrtDtl > 0)
            {
                switch (Convert.ToInt32(ddlReceiptType.SelectedValue))
                {
                    case 7:
                        Utility.FunShowAlertMsg(this, "Add alteast one Receipt Details/Funder Receipt Details");
                        break;
                    case 8:
                        Utility.FunShowAlertMsg(this, "Add alteast one Receipt Details/Map One Invoice Details");
                        break;
                    default:
                        Utility.FunShowAlertMsg(this, "Add atleast one Receipt Details");
                        break;
                }
                return;
            }

            //if (iRcptType == 1 || iRcptType == 4)
            //{
            //    if (grvLesseeInvoiceDtls != null && grvLesseeInvoiceDtls.Rows.Count == 0)
            //    {
            //        Utility.FunShowAlertMsg(this, "Map atleast One PO/Invoice in Receipt details");
            //        return;
            //    }
            //}

            //if (iRcptType == 2 || iRcptType == 7 || iRcptType == 8)
            //{
            //    if (ViewState["FunderRcptDtls"] != null && Convert.ToDouble(((DataTable)ViewState["FunderRcptDtls"]).Rows[0]["Amount"]) == 0)
            //    {
            //        Utility.FunShowAlertMsg(this, (Convert.ToInt32(ddlReceiptType.SelectedValue) == 8) ? "Map atleast One PO/Invoice in Invoice Details" : "Add atleast one Note in Funder Receipt Details");
            //        return;
            //    }
            //}

            if (FunPriCheckDocDate() == false)
            {
                return;
            }
            if (FunPriCheckValueDate() == false)
            {
                return;
            }

            //if (FunPriCheckReceiptAmount() == false)
            //{
            //    return;
            //}

            if (FunPriCheckTCSLimit() == false)
            {
                return;
            }

            FunPriSaveReceipt();
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnClear_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriClearDetails();
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnCancel_Click(object sender, EventArgs e)
    {
        try
        {
            if (Request.QueryString["Popup"] != null)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "window.close();", true);
            }
            else
            {
                Response.Redirect(strRedirectPage, false);
            }
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnShow_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriMapInvoice();
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnAddPOInvoice_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriClrDfltParam();
            Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
            Procparam.Add("@Receipt_Type", Convert.ToString(ddlReceiptType.SelectedValue));
            Procparam.Add("@User_ID", Convert.ToString(intUserID));
            if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 1 || Convert.ToInt32(ddlReceiptType.SelectedValue) == 8)  //Lessee to OPC Purchase Advance
            {
                Procparam.Add("@Customer_ID", Convert.ToString(ViewState["CustomerID"]));
                if (Convert.ToInt64(ddlReceiptTo.SelectedValue) > 0)
                    Procparam.Add("@Vendor_ID", Convert.ToString(ddlReceiptTo.SelectedValue));
            }
            if (Convert.ToInt64(ddlReceiptTo.SelectedValue) > 0 && Convert.ToInt32(ddlReceiptType.SelectedValue) == 4)  //Funder to OPC Advance Lessee
            {
                Procparam.Add("@Customer_ID", Convert.ToString(ddlReceiptTo.SelectedValue));
                Procparam.Add("@Funder_ID", Convert.ToString(ViewState["CustomerID"]));
            }
            Procparam.Add("@Option", "5");
            Procparam.Add("@Is_Added", "1");

            DataSet dsRcpt = Utility.GetDataset("S3G_CLN_Insert_TMPRCPTPODTL", Procparam);
            if (dsRcpt.Tables[0].Rows.Count == 0)
            {
                Utility.FunShowAlertMsg(this, "Select atleast One Invoice details");
                return;
            }
            ViewState["PORcptDtl"] = dsRcpt.Tables[0];
            FunPriBindGridDtls(grvLesseeInvoiceDtls, dsRcpt.Tables[0]);

            if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 1)
            {
                ViewState["RSRcptDtls"] = dsRcpt.Tables[1];
                FunPriBindReceiptGridDtls(1, dsRcpt.Tables[1]);
                grvRentalRcptDetails.Visible = true;
                FunPriEnableDisableFooter(1, false);
                LinkButton lblgvRemove = (LinkButton)grvRentalRcptDetails.Rows[0].FindControl("lblgvRemove");
                lblgvRemove.Enabled = false;
            }
            else if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 8)
            {
                ViewState["FunderRcptDtls"] = dsRcpt.Tables[1];
                FunPriBindReceiptGridDtls(3, dsRcpt.Tables[1]);
                grvFunderReceipt.Visible = true;
                FunPriEnableDisableFooter(3, false);
                LinkButton lnkgvFunderRemove = (LinkButton)grvFunderReceipt.Rows[0].FindControl("lnkgvFunderRemove");
                lnkgvFunderRemove.Enabled = false;

                if (dsRcpt.Tables.Count > 1)
                    FunPriAssignInvTtl(2, dsRcpt.Tables[2]);
            }
            moePoInvoiceDtls.Hide();
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnFooterAdd_Click(object sender, EventArgs e)
    {
        try
        {
            UserControls_S3GAutoSuggest ddlRSNo = (UserControls_S3GAutoSuggest)grvRentalRcptDetails.FooterRow.FindControl("ddlRSNo");
            DropDownList ddlAccountDescription = (DropDownList)grvRentalRcptDetails.FooterRow.FindControl("ddlAccountDescription");
            DropDownList ddlFooterGLCode = (DropDownList)grvRentalRcptDetails.FooterRow.FindControl("ddlFooterGLCode");
            DropDownList ddlFooterSLCode = (DropDownList)grvRentalRcptDetails.FooterRow.FindControl("ddlFooterSLCode");
            Label lblFooterCashFlowFlagID = (Label)grvRentalRcptDetails.FooterRow.FindControl("lblFooterCashFlowFlagID");
            TextBox txtFooterAmount = (TextBox)grvRentalRcptDetails.FooterRow.FindControl("txtFooterAmount");
            TextBox txtFooterDescription = (TextBox)grvRentalRcptDetails.FooterRow.FindControl("txtFooterDescription");

            if (ddlFooterSLCode.Items.Count > 1 && Convert.ToString(ddlFooterSLCode.SelectedItem.Text) == "--Select--")
            {
                Utility.FunShowAlertMsg(this, "Select SL Code");
                return;
            }

            Int64 iRSID, iAccountDescID, iCashflowflagID; double dblAmount;
            string strRSNo, strAccounDesc, strGLCodeDesc, strSLCodeDesc, strGLCodeID, strSLCode, str_desc;

            iRSID = Convert.ToInt64(ddlRSNo.SelectedValue);
            strRSNo = Convert.ToString(ddlRSNo.SelectedText);
            if (ddlAccountDescription.Items.Count > 0)
            {
                iAccountDescID = Convert.ToInt64(ddlAccountDescription.SelectedValue);
                strAccounDesc = Convert.ToString(ddlAccountDescription.SelectedItem.Text);
            }
            else
            {
                iAccountDescID = 0;
                strAccounDesc = "";
            }
            strGLCodeID = Convert.ToString(ddlFooterGLCode.SelectedValue);
            strGLCodeDesc = Convert.ToString(ddlFooterGLCode.SelectedItem.Text);
            if (ddlFooterSLCode.Items.Count > 0)
            {
                strSLCodeDesc = (Convert.ToString(ddlFooterSLCode.SelectedItem.Text) == "--Select--") ? "" : Convert.ToString(ddlFooterSLCode.SelectedItem.Text);
                strSLCode = (Convert.ToString(ddlFooterSLCode.SelectedItem.Text) == "--Select--") ? "" : Convert.ToString(ddlFooterSLCode.SelectedValue);
            }
            else
                strSLCodeDesc = strSLCode = "";
            //if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 7 || Convert.ToInt32(ddlReceiptType.SelectedValue) == 8)
            //    iCashflowflagID = iAccountDescID;
            //else
                iCashflowflagID = (Convert.ToString(lblFooterCashFlowFlagID.Text) == "") ? 0 : Convert.ToInt64(lblFooterCashFlowFlagID.Text);
            dblAmount = Convert.ToDouble(txtFooterAmount.Text);
            str_desc = txtFooterDescription.Text;
            DataTable dtRcpt = (DataTable)ViewState["RSRcptDtls"];
            Int32 iLen = 0;
            if (iCashflowflagID > 0)
            {
                DataRow[] drRcpt = dtRcpt.Select("RS_ID = " + Convert.ToString(iRSID) + " and CashFlow_ID = " + Convert.ToString(iAccountDescID));
                iLen = drRcpt.Length;
            }
            else if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 6)
            {
                DataRow[] drRcpt = dtRcpt.Select("GL_Code_Desc = '" + Convert.ToString(strGLCodeDesc) + "'");
                iLen = drRcpt.Length;
            }
            else
            {
                DataRow[] drRcpt = dtRcpt.Select("RS_ID = " + Convert.ToString(iRSID));
                iLen = drRcpt.Length;
            }
            if (iLen > 0)
            {
                Utility.FunShowAlertMsg(this, "Combination already exists");
                return;
            }
            /*
            if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 5)
            {
                if (Procparam != null)
                    Procparam.Clear();
                else
                    Procparam = new Dictionary<string, string>();
                Procparam.Add("@OPTION", "16");
                Procparam.Add("@PA_SA_REF_ID", Convert.ToString(iRSID));
                Procparam.Add("@Rcpt_Amt", Convert.ToString(dblAmount));

                DataTable dtDisc = Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);
                if (Convert.ToInt32(dtDisc.Rows[0]["ErrorCode"]) == 1)
                {
                    Utility.FunShowAlertMsg(this, "Amount exceeds Discounted Amount(" + Convert.ToInt32(dtDisc.Rows[0]["Discount_Amount"]) + ").");
                    return;
                }
            }
             */

            FunPriAddRcptGridDtl(iRSID, strRSNo, iAccountDescID, strAccounDesc, strGLCodeID, strGLCodeDesc, strSLCode, strSLCodeDesc, iCashflowflagID, dblAmount, str_desc);
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnAddLessInsert_Click(object sender, EventArgs e)
    {
        try
        {
            UserControls_S3GAutoSuggest ddlRSNo = (UserControls_S3GAutoSuggest)grvAddLessDtls.FooterRow.FindControl("ddlAddLessRSNo");
            DropDownList ddlAddLessDesc = (DropDownList)grvAddLessDtls.FooterRow.FindControl("ddlAddLessDesc");
            DropDownList ddlTaxType = (DropDownList)grvAddLessDtls.FooterRow.FindControl("ddlTaxType");
            Label lblFooterAddLessGLCodeDesc = (Label)grvAddLessDtls.FooterRow.FindControl("lblFooterAddLessGLCodeDesc");
            Label lblFooterAddLessSLCodeDesc = (Label)grvAddLessDtls.FooterRow.FindControl("lblFooterAddLessSLCodeDesc");
            TextBox txtFooterAddLessSectionNo = (TextBox)grvAddLessDtls.FooterRow.FindControl("txtFooterAddLessSectionNo");
            TextBox txtFooterAddLessAmount = (TextBox)grvAddLessDtls.FooterRow.FindControl("txtFooterAddLessAmount");
            Label lblFooterAddLessDueFlag = (Label)grvAddLessDtls.FooterRow.FindControl("lblFooterAddLessDueFlag");

            /*
            if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 3 && Convert.ToInt32(lblFooterAddLessDueFlag.Text) == 84 && Convert.ToInt32(ddlAddLessDesc.SelectedValue) == 0)
            {
                if (Procparam != null)
                    Procparam.Clear();
                else
                    Procparam = new Dictionary<string, string>();

                Procparam.Add("@OPTION", "12");
                Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
                Procparam.Add("@Customer_ID", Convert.ToString(ViewState["CustomerID"]));
                Procparam.Add("@Section_No", Convert.ToString(txtFooterAddLessSectionNo.Text));
                Procparam.Add("@TCS_Amount", Convert.ToString(txtFooterAddLessAmount.Text));

                DataTable dtTCS = Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);
                if (Convert.ToInt32(dtTCS.Rows[0]["Error_Code"]) == 1)
                {
                    Utility.FunShowAlertMsg(this, "TCS Amount exceeds Balance Limit(" + Convert.ToInt32(dtTCS.Rows[0]["TCS_Amount"]) + ").");
                    return;
                }
            }

            */

            if (Convert.ToString(txtFooterAddLessSectionNo.Text) == "" && Convert.ToDouble(txtFooterAddLessAmount.Text) == 0)
            {
                Utility.FunShowAlertMsg(this, "Amount should be Greater than Zero");
                return;
            }

            Int64 iRSID, iTaxType;
            Int32 iAddLessDescID, iCashFlowFlag_ID;
            double dblAmount;
            string strRSNo, strAddLessDesc, strTaxTypeDesc, strGLCodeDesc, strSLCodeDesc, strSectionNo;

            iRSID = Convert.ToInt64(ddlRSNo.SelectedValue);
            strRSNo = Convert.ToString(ddlRSNo.SelectedText);
            iTaxType = Convert.ToInt64(ddlTaxType.SelectedValue);
            strTaxTypeDesc = Convert.ToString(ddlTaxType.SelectedItem.Text);
            iAddLessDescID = Convert.ToInt32(ddlAddLessDesc.SelectedValue);
            strAddLessDesc = Convert.ToString(ddlAddLessDesc.SelectedItem.Text);
            strGLCodeDesc = Convert.ToString(lblFooterAddLessGLCodeDesc.Text);
            dblAmount = Convert.ToDouble(txtFooterAddLessAmount.Text);
            strSLCodeDesc = Convert.ToString(lblFooterAddLessSLCodeDesc.Text);
            strSectionNo = Convert.ToString(txtFooterAddLessSectionNo.Text);
            iCashFlowFlag_ID = Convert.ToInt32(lblFooterAddLessDueFlag.Text);

            DataTable dtAddLess = (DataTable)ViewState["AddLessRcptDtls"];
            DataRow[] drAddLess = dtAddLess.Select("RS_ID = " + Convert.ToString(iRSID) + " and TaxType_ID = " + Convert.ToString(iTaxType));

            if (drAddLess.Length > 0)
            {
                Utility.FunShowAlertMsg(this, "Combination already exists");
                return;
            }

            FunPriAddLessGridDtl(iRSID, strRSNo, iAddLessDescID, strAddLessDesc, iTaxType, strTaxTypeDesc, strGLCodeDesc, strSLCodeDesc, strSectionNo, iCashFlowFlag_ID, dblAmount);
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnReceiptCancel_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriCancelReceipt();
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnPoSearch_Click(object sender, EventArgs e)
    {
        try
        {
            ProPageNumRW = 1;
            FunPriBindGrid();
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnShowApply_OnClick(object sender, EventArgs e)
    {
        try
        {
            CheckBox chkSelectAll = gvShowInstallment.HeaderRow.FindControl("chkSelectAll") as CheckBox;
            int intSelectedBranchCount = 0;
            if (!chkSelectAll.Checked)
            {
                foreach (GridViewRow grBranch in gvShowInstallment.Rows)
                {
                    if (grBranch.RowType == DataControlRowType.DataRow)
                    {
                        CheckBox chkSelect = grBranch.FindControl("chkSelect") as CheckBox;
                        if (chkSelect.Checked)
                        {
                            intSelectedBranchCount += 1;
                        }
                    }
                }
                if (intSelectedBranchCount == 0)
                {
                    Utility.FunShowAlertMsg(this, "Select atleast one in Installment Details");
                    return;
                }
            }

            DataTable dtExistingInst = new DataTable();
            if (ViewState["RSRcptDtls"] != null)
            {
                dtExistingInst = (DataTable)ViewState["RSRcptDtls"];
                if (dtExistingInst.Rows.Count > 0 && Convert.ToInt32(dtExistingInst.Rows[0]["RS_ID"]) == 0)
                {
                    dtExistingInst.Rows[0].Delete();
                    dtExistingInst.AcceptChanges();
                }
            }

            DataTable dtShow = ((DataTable)ViewState["DefaultRSRcptDtls"]).Clone();

            if (chkSelectAll.Checked)
            {
                foreach (GridViewRow grShowInstallment in gvShowInstallment.Rows)
                {
                    if (grShowInstallment.RowType == DataControlRowType.DataRow)
                    {
                        Label lblPendingPanum = (Label)grShowInstallment.FindControl("lblPendingPanum");
                        Label lblPendingPASARefID = (Label)grShowInstallment.FindControl("lblPendingPASARefID");
                        Label lblInvoiceNo = (Label)grShowInstallment.FindControl("lblInvoiceNo");
                        Label lblPendingCashflowDesc = (Label)grShowInstallment.FindControl("lblPendingCashflowDesc");
                        Label lblPendingAmount = (Label)grShowInstallment.FindControl("lblPendingAmount");
                        Label lblFlagId = grShowInstallment.FindControl("lblFlagId") as Label;
                        Label lblCFMId = grShowInstallment.FindControl("lblCFMId") as Label;
                        Label lblGL_Account = grShowInstallment.FindControl("lblGL_Account") as Label;
                        Label lblSL_Account = grShowInstallment.FindControl("lblSL_Account") as Label;
                        TextBox txtPendingAmount = (TextBox)grShowInstallment.FindControl("txtPendingAmount");
                        Label lblPendingInstallmentDate = grShowInstallment.FindControl("lblPendingInstallmentDate") as Label;

                        DataRow[] drRcpt = dtExistingInst.Select("RS_ID = " + Convert.ToString(lblPendingPASARefID.Text) + " and CashFlow_ID = " + Convert.ToString(lblFlagId.Text) + " and Invoice_Date = '" + Convert.ToString(lblPendingInstallmentDate.Text) + "'");

                        if (drRcpt.Length > 0)
                        {
                            Utility.FunShowAlertMsg(this, "Combination already exists");
                            return;
                        }

                        DataRow drInstallment = dtShow.NewRow();
                        drInstallment["RS_ID"] = Convert.ToString(lblPendingPASARefID.Text);
                        drInstallment["RS_No"] = Convert.ToString(lblPendingPanum.Text);

                         // Added by Chandru K on 28-Jul-2016 for CR_OPCSL_052
                        drInstallment["Invoice_No"] = Convert.ToString(lblInvoiceNo.Text);
                        drInstallment["Invoice_Date"] = Convert.ToString(lblPendingInstallmentDate.Text);
                        // End

                        drInstallment["CashFlow_ID"] = Convert.ToString(lblCFMId.Text);
                        drInstallment["CashFlow_Desc"] = Convert.ToString(lblPendingCashflowDesc.Text);
                        drInstallment["GL_Code_Desc"] = Convert.ToString(lblGL_Account.Text);
                        drInstallment["GL_Code"] = Convert.ToString(lblGL_Account.Text);
                        drInstallment["SL_Code"] = Convert.ToString(lblSL_Account.Text);
                        drInstallment["SL_Code_Desc"] = Convert.ToString(lblSL_Account.Text);
                        drInstallment["CashFlow_Flag_ID"] = Convert.ToString(lblFlagId.Text);
                        drInstallment["Amount"] = (Convert.ToString(txtPendingAmount.Text) == "") ? 0 : Convert.ToDouble(txtPendingAmount.Text);
                        //drInstallment["IsAddLessExist"] = false;
                        drInstallment["Inst_Date"] = Convert.ToString(lblPendingInstallmentDate.Text);
                        dtShow.Rows.Add(drInstallment);
                        ViewState["RSRcptDtls"] = dtShow;
                    }
                }
            }
            else
            {
                foreach (GridViewRow grShowInstallment in gvShowInstallment.Rows)
                {
                    if (grShowInstallment.RowType == DataControlRowType.DataRow)
                    {
                        CheckBox chkSelect = grShowInstallment.FindControl("chkSelect") as CheckBox;
                        if (chkSelect.Checked)
                        {
                            Label lblPendingPanum = (Label)grShowInstallment.FindControl("lblPendingPanum");
                            Label lblPendingPASARefID = (Label)grShowInstallment.FindControl("lblPendingPASARefID");
                            Label lblInvoiceNo = (Label)grShowInstallment.FindControl("lblInvoiceNo");
                            Label lblPendingCashflowDesc = (Label)grShowInstallment.FindControl("lblPendingCashflowDesc");
                            Label lblPendingAmount = (Label)grShowInstallment.FindControl("lblPendingAmount");
                            Label lblFlagId = grShowInstallment.FindControl("lblFlagId") as Label;
                            Label lblCFMId = grShowInstallment.FindControl("lblCFMId") as Label;
                            Label lblGL_Account = grShowInstallment.FindControl("lblGL_Account") as Label;
                            Label lblSL_Account = grShowInstallment.FindControl("lblSL_Account") as Label;
                            TextBox txtPendingAmount = (TextBox)grShowInstallment.FindControl("txtPendingAmount");
                            Label lblPendingInstallmentDate = grShowInstallment.FindControl("lblPendingInstallmentDate") as Label;

                            DataRow[] drRcpt = dtExistingInst.Select("RS_ID = " + Convert.ToString(lblPendingPASARefID.Text) + " and CashFlow_ID = " + Convert.ToString(lblFlagId.Text) + " and Invoice_Date = '" + Convert.ToString(lblPendingInstallmentDate.Text) + "'");

                            if (drRcpt.Length > 0)
                            {
                                Utility.FunShowAlertMsg(this, "Combination already exists");
                                return;
                            }

                            DataRow drInstallment = dtShow.NewRow();
                            drInstallment["RS_ID"] = Convert.ToString(lblPendingPASARefID.Text);
                            drInstallment["RS_No"] = Convert.ToString(lblPendingPanum.Text);

                            // Added by Chandru K on 28-Jul-2016 for CR_OPCSL_052
                            drInstallment["Invoice_No"] = Convert.ToString(lblInvoiceNo.Text);
                            drInstallment["Invoice_Date"] = Convert.ToString(lblPendingInstallmentDate.Text);
                            // End

                            drInstallment["CashFlow_ID"] = Convert.ToString(lblCFMId.Text);
                            drInstallment["CashFlow_Desc"] = Convert.ToString(lblPendingCashflowDesc.Text);
                            drInstallment["GL_Code_Desc"] = Convert.ToString(lblGL_Account.Text);
                            drInstallment["GL_Code"] = Convert.ToString(lblGL_Account.Text);
                            drInstallment["SL_Code"] = Convert.ToString(lblSL_Account.Text);
                            drInstallment["SL_Code_Desc"] = Convert.ToString(lblSL_Account.Text);
                            drInstallment["CashFlow_Flag_ID"] = Convert.ToString(lblFlagId.Text);
                            //drInstallment["Amount"] = Convert.ToDouble(lblPendingAmount.Text);
                            drInstallment["Amount"] = (Convert.ToString(txtPendingAmount.Text) == "") ? 0 : Convert.ToDouble(txtPendingAmount.Text);
                            //drInstallment["IsAddLessExist"] = false;
                            drInstallment["Inst_Date"] = Convert.ToString(lblPendingInstallmentDate.Text);
                            dtShow.Rows.Add(drInstallment);
                            ViewState["RSRcptDtls"] = dtShow;
                        }
                    }
                }
            }

            if (dtExistingInst.Rows.Count > 0)
            {
                dtShow.Merge(dtExistingInst);
                dtShow = dtShow.DefaultView.ToTable(true, "RS_ID", "RS_No", "Invoice_No", "Invoice_Date", "CashFlow_ID", "CashFlow_Desc", "GL_Code", "GL_Code_Desc", "SL_Code", "SL_Code_Desc", "CashFlow_Flag_ID", "Remarks", "Amount", "Inst_Date");
                ViewState["RSRcptDtls"] = dtShow;
            }

            DataRow[] drCheck = dtShow.Select("Amount = 0");
            if (drCheck.Length > 0)
            {
                dtShow.Rows.Clear();
                Utility.FunShowAlertMsg(this, "Amount should not be left blank");
                return;
            }

            if (dtShow != null)
            {
                ViewState["ShowLogicUsed"] = true;
            }

            FunPriBindReceiptGridDtls(1, (DataTable)ViewState["RSRcptDtls"]);

            btnShowApply.Visible = pnlShowMethod.Visible = false;
            gvShowInstallment.DataSource = null;
            gvShowInstallment.DataBind();

            if (chkExt.Checked)
                grvRentalRcptDetails.FooterRow.Visible = false;
            else
                grvRentalRcptDetails.FooterRow.Visible = true;

        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }

    }

    protected void btnPendingInstallments_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriClearPendingDues();
            TextBox txtName = (TextBox)ucCustomerCodeLov.FindControl("txtName");
            if (txtName != null)
            {
                if (txtName.Text == "")
                {
                    strAlert = strAlert.Replace("__ALERT__", "Select a Customer");
                    ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert, true);
                    return;
                }
            }

            if (txtFilInstalmentDate.Text != "" && txtFilInstalmentToDate.Text != "" && Utility.StringToDate(txtFilInstalmentDate.Text) > Utility.StringToDate(txtFilInstalmentToDate.Text))
            {
                strAlert = strAlert.Replace("__ALERT__", "Instalment From Date should be less than or equal to Instalment To Date");
                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert, true);
                return;
            }

            Procparam = new Dictionary<string, string>();
            Procparam.Add("@CompanyId", intCompanyID.ToString());
            Procparam.Add("@LobId", ddlLOB.SelectedValue);
            Procparam.Add("@LocationId", ddlLocation.SelectedValue);
            Procparam.Add("@CustomerId", Convert.ToString(ViewState["CustomerID"]));

            if (Convert.ToInt64(ddlTranche.SelectedValue) > 0 && Convert.ToString(ddlTranche.SelectedText) != "")
            {
                Procparam.Add("@Tranche_ID", Convert.ToString(ddlTranche.SelectedValue));
            }

            if (Convert.ToInt64(ddlFilTranche.SelectedValue) > 0 && Convert.ToString(ddlFilTranche.SelectedText) != "")
            {
                Procparam.Add("@FilTranche_ID", Convert.ToString(ddlFilTranche.SelectedValue));
            }

            if (txtFilInstalmentDate.Text != "")
            {
                Procparam.Add("@Instalment_Date", Utility.StringToDate(txtFilInstalmentDate.Text).ToString());
            }

            if (txtFilInstalmentToDate.Text != "")
            {
                Procparam.Add("@Instalment_ToDate", Utility.StringToDate(txtFilInstalmentToDate.Text).ToString());
            }

            if (chkExt.Checked)
                Procparam.Add("@Is_Ext", "1");

            DataTable dtInstallments = new DataTable();

            // Code Changed For Call Id : 4906 CR_057

            if (ddlReceiptType.SelectedValue == "9")
                dtInstallments = Utility.GetDefaultData("S3G_CLN_ShowPendingSalseInvoice", Procparam);
            else
                dtInstallments = Utility.GetDefaultData("S3G_CLN_SHOWPENDINGINSTALLMENTS", Procparam);
            
            if (dtInstallments.Rows.Count > 0)
            {
                //Handled By Arunkumar K for installment Limit Exceeds
                if (dtInstallments.Columns.Contains("Error_Msg"))
                {
                    Utility.FunShowAlertMsg(this, dtInstallments.Rows[0]["Error_Msg"].ToString());
                    return;
                }
                //Handled By Arunkumar K for installment Limit Exceeds
                gvShowInstallment.DataSource = dtInstallments;
                gvShowInstallment.DataBind();
                btnShowApply.Visible = pnlShowMethod.Visible = btnOPCShowCancel.Visible = true;
            }
            else
            {
                btnShowApply.Visible = pnlShowMethod.Visible = btnOPCShowCancel.Visible = false;
                Utility.FunShowAlertMsg(this, "No Pending Installments in Current date for selected Customer");
                return;
            }
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnPrint_Click(object sender, EventArgs e)
    {
        try
        {
            FunOpenPDF(Convert.ToString(intReceiptId));
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnShowFndrDues_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriClearPendingDues();
            TextBox txtName = (TextBox)ucCustomerCodeLov.FindControl("txtName");
            if (txtName != null)
            {
                if (txtName.Text == "")
                {
                    strAlert = strAlert.Replace("__ALERT__", "Select a Lessee");
                    ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert, true);
                    return;
                }
            }

            if (Procparam != null)
                Procparam.Clear();
            else
                Procparam = new Dictionary<string, string>();

            Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
            Procparam.Add("@LobId", Convert.ToString(ddlLOB.SelectedValue));
            Procparam.Add("@CustomerId", Convert.ToString(ViewState["CustomerID"]));
            if (Convert.ToInt32(ddlTranche.SelectedValue) > 0 && Convert.ToString(ddlTranche.SelectedText) != "")
            {
                Procparam.Add("@Tranche_ID", Convert.ToString(ddlTranche.SelectedValue));
            }

            if (Convert.ToInt32(ddlFilTranche.SelectedValue) > 0 && Convert.ToString(ddlFilTranche.SelectedText) != "")
            {
                Procparam.Add("@FilTranche_ID", Convert.ToString(ddlFilTranche.SelectedValue));
            }
            if (txtFilInstalmentDate.Text != "")
            {
                Procparam.Add("@Instalment_Date", Utility.StringToDate(txtFilInstalmentDate.Text).ToString());
            }
            if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 7 || Convert.ToInt32(ddlReceiptType.SelectedValue) == 2)
            {
                DataTable dtPending = Utility.GetDefaultData("S3G_Cln_FunderPendingInstallment", Procparam);
                if (dtPending != null && dtPending.Rows.Count > 0)
                {
                    //Handled By Arunkumar K for installment Limit Exceeds
                    if (dtPending.Columns.Contains("Error_Msg"))
                    {
                        Utility.FunShowAlertMsg(this, dtPending.Rows[0]["Error_Msg"].ToString());
                        return;
                    }
                    //Handled By Arunkumar K for installment Limit Exceeds
                    FunPriBindGridDtls(grvFunderInstallments, dtPending);
                    pnlShowFunderDue.Visible = btnApplyFndrDue.Visible = btnFndrShowCancel.Visible = true;
                }
                else
                {
                    grvFunderInstallments.DataSource = null;
                    grvFunderInstallments.DataBind();
                    pnlShowFunderDue.Visible = btnApplyFndrDue.Visible = btnFndrShowCancel.Visible = false;
                    Utility.FunShowAlertMsg(this, "No Pending Installments in Current date for selected Lessee");
                }
            }
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnMapInvoice_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriMapInvoice();
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnFooterFunderAdd_Click(object sender, EventArgs e)
    {
        try
        {
            UserControls_S3GAutoSuggest ddlNoteNo = (UserControls_S3GAutoSuggest)grvFunderReceipt.FooterRow.FindControl("ddlNoteNo");
            UserControls_S3GAutoSuggest ddlfndrTrancheNo = (UserControls_S3GAutoSuggest)grvFunderReceipt.FooterRow.FindControl("ddlfndrTrancheNo");
            UserControls_S3GAutoSuggest ddlFndrGLCode = (UserControls_S3GAutoSuggest)grvFunderReceipt.FooterRow.FindControl("ddlFndrGLCode");
            UserControls_S3GAutoSuggest ddlFndrSLCode = (UserControls_S3GAutoSuggest)grvFunderReceipt.FooterRow.FindControl("ddlFndrSLCode");
            DropDownList ddlFndrCFDesc = (DropDownList)grvFunderReceipt.FooterRow.FindControl("ddlFndrCFDesc");
            TextBox txtFooterFunderAmount = (TextBox)grvFunderReceipt.FooterRow.FindControl("txtFooterFunderAmount");
            Label lblFooterFndrCFFlagID = (Label)grvFunderReceipt.FooterRow.FindControl("lblFooterFndrCFFlagID");

            DataTable dtFndrRcpt = (ViewState["FunderRcptDtls"] != null) ? (DataTable)ViewState["FunderRcptDtls"] : (DataTable)ViewState["DefaultFunderRcptDtls"];
            if (dtFndrRcpt != null && dtFndrRcpt.Rows.Count > 0)
            {
                if (Convert.ToInt32(dtFndrRcpt.Rows[0]["Note_ID"]) == 0)
                {
                    dtFndrRcpt.Rows[0].Delete();
                    dtFndrRcpt.AcceptChanges();
                }
            }

            if (dtFndrRcpt.Rows.Count > 0)
            {
                string strFilter = "Note_ID = " + Convert.ToInt32(ddlNoteNo.SelectedValue);
                strFilter = strFilter + " and Tranche_ID = 0";
                DataRow[] drDuplicate = dtFndrRcpt.Select(strFilter);

                if (drDuplicate.Length > 0)
                {
                    Utility.FunShowAlertMsg(this, "Entered combinatin already exists");
                    return;
                }

                if (Convert.ToInt32(ddlfndrTrancheNo.SelectedValue) == 0)
                {
                    strFilter = "Note_ID = " + Convert.ToInt32(ddlNoteNo.SelectedValue);
                    drDuplicate = dtFndrRcpt.Select(strFilter);

                    if (drDuplicate.Length > 0)
                    {
                        Utility.FunShowAlertMsg(this, "Entered combinatin already exists");
                        return;
                    }
                }

                strFilter = "Note_ID = " + Convert.ToInt32(ddlNoteNo.SelectedValue);
                strFilter = strFilter + " and Tranche_ID = " + Convert.ToInt32(ddlfndrTrancheNo.SelectedValue);
                drDuplicate = dtFndrRcpt.Select(strFilter);

                if (drDuplicate.Length > 0)
                {
                    Utility.FunShowAlertMsg(this, "Entered combinatin already exists");
                    return;
                }
            }

            DataRow drFndr = dtFndrRcpt.NewRow();

            drFndr["Note_ID"] = Convert.ToInt32(ddlNoteNo.SelectedValue);
            drFndr["Note_No"] = Convert.ToString(ddlNoteNo.SelectedText);
            drFndr["Tranche_ID"] = Convert.ToInt32(ddlfndrTrancheNo.SelectedValue);
            drFndr["Tranche_Name"] = Convert.ToString(ddlfndrTrancheNo.SelectedText);
            drFndr["CashFlow_ID"] = Convert.ToInt32(ddlFndrCFDesc.SelectedValue);
            drFndr["CashFlow_Desc"] = Convert.ToString(ddlFndrCFDesc.SelectedItem.Text);
            drFndr["GL_Code_Desc"] = Convert.ToString(ddlFndrGLCode.SelectedValue);

            drFndr["SL_Code_Desc"] = Convert.ToString(ddlFndrSLCode.SelectedValue);
            drFndr["CashFlow_Flag_ID"] = Convert.ToInt32(lblFooterFndrCFFlagID.Text);
            drFndr["Amount"] = (Convert.ToString(txtFooterFunderAmount.Text) == "") ? 0 : Convert.ToDouble(txtFooterFunderAmount.Text);
            //drInstallment["IsAddLessExist"] = false;
            dtFndrRcpt.Rows.Add(drFndr);

            ViewState["FunderRcptDtls"] = dtFndrRcpt;
            FunPriBindReceiptGridDtls(3, dtFndrRcpt);
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnApplyFndrDue_Click(object sender, EventArgs e)
    {
        try
        {
            CheckBox chkSelectAll = grvFunderInstallments.HeaderRow.FindControl("chkFunderSelectAll") as CheckBox;
            int intSelectedBranchCount = 0;
            if (!chkSelectAll.Checked)
            {
                foreach (GridViewRow grBranch in grvFunderInstallments.Rows)
                {
                    if (grBranch.RowType == DataControlRowType.DataRow)
                    {
                        CheckBox chkSelect = grBranch.FindControl("chkFunderSelect") as CheckBox;
                        if (chkSelect.Checked)
                        {
                            intSelectedBranchCount += 1;
                        }
                    }
                }
                if (intSelectedBranchCount == 0)
                {
                    Utility.FunShowAlertMsg(this, "Select atleast one Funder Due Details");
                    return;
                }
            }

            DataTable dtExistingInst = new DataTable();
            if (ViewState["FunderRcptDtls"] != null)
            {
                dtExistingInst = (DataTable)ViewState["FunderRcptDtls"];
                if (Convert.ToInt32(dtExistingInst.Rows[0]["Note_ID"]) == 0)
                {
                    dtExistingInst.Rows[0].Delete();
                    dtExistingInst.AcceptChanges();
                }
            }

            DataTable dtShow = ((DataTable)ViewState["DefaultFunderRcptDtls"]).Clone();

            if (chkSelectAll.Checked)
            {
                foreach (GridViewRow grShowInstallment in grvFunderInstallments.Rows)
                {
                    if (grShowInstallment.RowType == DataControlRowType.DataRow)
                    {
                        Label lblFndPndNoteNo = (Label)grShowInstallment.FindControl("lblFndPndNoteNo");
                        Label lblFndPndNoteID = (Label)grShowInstallment.FindControl("lblFndPndNoteID");
                        Label lblFndPndTrancheID = (Label)grShowInstallment.FindControl("lblFndPndTrancheID");
                        Label lblFndPndTrancheName = (Label)grShowInstallment.FindControl("lblFndPndTrancheName");
                        Label lblFndPndCFDesc = (Label)grShowInstallment.FindControl("lblFndPndCFDesc");
                        Label lblFndPndAmount = (Label)grShowInstallment.FindControl("lblFndPndAmount");
                        Label lblFndPndCFFlagId = (Label)grShowInstallment.FindControl("lblFndPndCFFlagId");
                        Label lblFndPndCFMId = (Label)grShowInstallment.FindControl("lblFndPndCFMId");
                        //UserControls_S3GAutoSuggest ddlGLCode = (UserControls_S3GAutoSuggest)grShowInstallment.FindControl("ddlFunderGLCode");
                        //UserControls_S3GAutoSuggest ddlSLCode = (UserControls_S3GAutoSuggest)grShowInstallment.FindControl("ddlFunderSLCode");
                        Label lblFndPndGLCode = (Label)grShowInstallment.FindControl("lblFndPndGLCode");
                        Label lblFndPndSLCode = (Label)grShowInstallment.FindControl("lblFndPndSLCode");
                        TextBox txtFndrDueAmt = grShowInstallment.FindControl("txtFndrDueAmt") as TextBox;
                        Label lblFndPndDueDate = (Label)grShowInstallment.FindControl("lblFndPndDueDate");

                        DataRow drInstallment = dtShow.NewRow();
                        drInstallment["Note_ID"] = Convert.ToInt32(lblFndPndNoteID.Text);
                        drInstallment["Note_No"] = Convert.ToString(lblFndPndNoteNo.Text);
                        drInstallment["Tranche_ID"] = Convert.ToInt32(lblFndPndTrancheID.Text);
                        drInstallment["Tranche_Name"] = Convert.ToString(lblFndPndTrancheName.Text);
                        drInstallment["CashFlow_ID"] = Convert.ToInt32(lblFndPndCFMId.Text);
                        drInstallment["CashFlow_Desc"] = Convert.ToString(lblFndPndCFDesc.Text);
                        drInstallment["GL_Code_Desc"] = Convert.ToString(lblFndPndGLCode.Text);
                        drInstallment["SL_Code_Desc"] = Convert.ToString(lblFndPndSLCode.Text);
                        drInstallment["CashFlow_Flag_ID"] = Convert.ToInt32(lblFndPndCFFlagId.Text);
                        drInstallment["Amount"] = (Convert.ToString(txtFndrDueAmt.Text) == "") ? 0 : Convert.ToDouble(txtFndrDueAmt.Text);
                        //drInstallment["IsAddLessExist"] = false;
                        drInstallment["Due_Date"] = Convert.ToString(lblFndPndDueDate.Text);
                        dtShow.Rows.Add(drInstallment);
                        ViewState["FunderRcptDtls"] = dtShow;
                    }
                }
            }
            else
            {
                foreach (GridViewRow grShowInstallment in grvFunderInstallments.Rows)
                {
                    if (grShowInstallment.RowType == DataControlRowType.DataRow)
                    {
                        CheckBox chkSelect = grShowInstallment.FindControl("chkFunderSelect") as CheckBox;
                        if (chkSelect.Checked)
                        {
                            Label lblFndPndNoteNo = (Label)grShowInstallment.FindControl("lblFndPndNoteNo");
                            Label lblFndPndNoteID = (Label)grShowInstallment.FindControl("lblFndPndNoteID");
                            Label lblFndPndTrancheID = (Label)grShowInstallment.FindControl("lblFndPndTrancheID");
                            Label lblFndPndTrancheName = (Label)grShowInstallment.FindControl("lblFndPndTrancheName");
                            Label lblFndPndCFDesc = (Label)grShowInstallment.FindControl("lblFndPndCFDesc");
                            Label lblFndPndAmount = (Label)grShowInstallment.FindControl("lblFndPndAmount");
                            Label lblFndPndCFFlagId = (Label)grShowInstallment.FindControl("lblFndPndCFFlagId");
                            Label lblFndPndCFMId = (Label)grShowInstallment.FindControl("lblFndPndCFMId");
                            //UserControls_S3GAutoSuggest ddlGLCode = (UserControls_S3GAutoSuggest)grShowInstallment.FindControl("ddlFunderGLCode");
                            //UserControls_S3GAutoSuggest ddlSLCode = (UserControls_S3GAutoSuggest)grShowInstallment.FindControl("ddlFunderSLCode");
                            Label lblFndPndGLCode = (Label)grShowInstallment.FindControl("lblFndPndGLCode");
                            Label lblFndPndSLCode = (Label)grShowInstallment.FindControl("lblFndPndSLCode");
                            TextBox txtFndrDueAmt = grShowInstallment.FindControl("txtFndrDueAmt") as TextBox;
                            Label lblFndPndDueDate = (Label)grShowInstallment.FindControl("lblFndPndDueDate");

                            DataRow drInstallment = dtShow.NewRow();
                            drInstallment["Note_ID"] = Convert.ToInt32(lblFndPndNoteID.Text);
                            drInstallment["Note_No"] = Convert.ToString(lblFndPndNoteNo.Text);
                            drInstallment["Tranche_ID"] = Convert.ToInt32(lblFndPndTrancheID.Text);
                            drInstallment["Tranche_Name"] = Convert.ToString(lblFndPndTrancheName.Text);
                            drInstallment["CashFlow_ID"] = Convert.ToInt32(lblFndPndCFMId.Text);
                            drInstallment["CashFlow_Desc"] = Convert.ToString(lblFndPndCFDesc.Text);
                            drInstallment["GL_Code_Desc"] = Convert.ToString(lblFndPndGLCode.Text);
                            drInstallment["SL_Code_Desc"] = Convert.ToString(lblFndPndSLCode.Text);
                            drInstallment["CashFlow_Flag_ID"] = Convert.ToInt32(lblFndPndCFFlagId.Text);
                            drInstallment["Amount"] = (Convert.ToString(txtFndrDueAmt.Text) == "") ? 0 : Convert.ToDouble(txtFndrDueAmt.Text);
                            //drInstallment["IsAddLessExist"] = false;
                            drInstallment["Due_Date"] = Convert.ToString(lblFndPndDueDate.Text);
                            dtShow.Rows.Add(drInstallment);
                            ViewState["FunderRcptDtls"] = dtShow;
                        }
                    }
                }
            }

            if (dtExistingInst.Rows.Count > 0)
            {
                dtShow.Merge(dtExistingInst);
                ViewState["FunderRcptDtls"] = dtShow;
            }

            DataRow[] drCnt = dtShow.Select("GL_Code_Desc = '0' OR SL_Code_Desc = '0' OR Amount = 0");

            if (drCnt.Length > 0)
            {
                Utility.FunShowAlertMsg(this, "Check whether all fields are entered in Selected Details");
                return;
            }

            DataTable dtFndr = (DataTable)ViewState["FunderRcptDtls"];

            if (Procparam != null)
                Procparam.Clear();
            else
                Procparam = new Dictionary<string, string>();
            Procparam.Add("@OPTION", "26");
            Procparam.Add("@Company_ID", intCompanyID.ToString());
            Procparam.Add("@XMLFunderDue", Utility.FunPubFormXml(dtFndr, true));

            dtFndr = Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);
            ViewState["FunderRcptDtls"] = dtFndr;

            FunPriBindReceiptGridDtls(3, (DataTable)ViewState["FunderRcptDtls"]);

            btnApplyFndrDue.Visible = pnlShowFunderDue.Visible = false;
            grvFunderInstallments.DataSource = null;
            grvFunderInstallments.DataBind();
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnOPCShowCancel_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriClearPendingDues();
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void btnFndrShowCancel_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriClearPendingDues();
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    #endregion

    #region "Dropdown Events"

    protected void ddlMode_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            FunPriClearBankDetails();
            //tcReceipt.Tabs[1].Enabled = true;
            if (Convert.ToInt32(ddlMode.SelectedValue) == 2 || Convert.ToInt32(ddlMode.SelectedValue) == 6 || Convert.ToInt32(ddlMode.SelectedValue) == 5)             //Cheque || Demand Draft || PDC
            {
                txtInstrumentDate.Enabled = txtInstrumentNo.Enabled = txtPaymentGatewayRefNo.Enabled = txtAckNo.Enabled = txtBankLocation.Enabled =
                rfvInstrumentNo.Enabled = rfvInstrumentDate.Enabled = rfvDraweeBank.Enabled = ddlDraweeBank.Enabled = true;
                lblInstrumentNo.CssClass = lblInstrumentDate.CssClass = lblBankLocation.CssClass = lblDraweeBank.CssClass = "styleReqFieldLabel";

                FunPriEnblDsblDpstBkDtl(false);
            }
            else if (Convert.ToInt32(ddlMode.SelectedValue) == 4)
            {
                FunPriEnblDsblDpstBkDtl(true);
            }
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void ddlReceiptType_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            ddlReceiptTo.Clear();
            ddlTranche.Clear();
            chkExt.Checked = false;
            Int32 _iReceiptType = Convert.ToInt32(ddlReceiptType.SelectedValue);
            ddlTranche.Enabled = (_iReceiptType == 5 || _iReceiptType == 6) ? false : true;
            ddlReceiptTo.Enabled = (_iReceiptType == 5) ? true : false;
            ddlGLBased.SelectedValue = (_iReceiptType == 3 || _iReceiptType == 7 || _iReceiptType == 8) ? "0" : "1";
            chkExt.Enabled = (_iReceiptType == 7) ? true : false;
            //FunPriSetReceiptToMandatory(_iReceiptType);
            FunPriClearGridDetails();

            if (lblCode.Text != ((_iReceiptType > 3 && _iReceiptType < 6) ? "Funder" : "Lessee"))
            {
                FunPriClearCustomerDetails();
                FunPriSetCustomerLovCode();
                Label lblCustomerCode = (Label)ucCustomerAddress.FindControl("lblCustomerCode");
                Label lblCustomerName = (Label)ucCustomerAddress.FindControl("lblCustomerName");
                lblCustomerCode.Text = (_iReceiptType > 3 && _iReceiptType < 6) ? "Funder Code" : "Lessee Code";
                lblCustomerName.Text = (_iReceiptType > 3 && _iReceiptType < 6) ? "Funder Name" : "Lessee Name";
                lblCode.Text = (_iReceiptType > 3 && _iReceiptType < 6) ? "Funder" : "Lessee";
                pnlLesseeInfo.GroupingText = (_iReceiptType > 3 && _iReceiptType < 6) ? "Funder Information" : "Lessee Information";
                rfvcmbCustomer.ErrorMessage = rfvcmbCustomer1.ErrorMessage = (_iReceiptType > 3 && _iReceiptType < 6) ? "Select a Funder" : "Select a Lessee";
            }

            // Code Add For Call Id : 4906 CR_057
            if (_iReceiptType == 9)
            {
                ddlReceiptFrom.Enabled = true;
                pnlLesseeInfo.GroupingText = "Lessee/Vendor Information";
            }
            else
            {
                ddlReceiptFrom.Enabled = false;
                ddlReceiptFrom.SelectedIndex = 0;
            }
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void ddlReceiptFrom_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            Label lblCustomerCode = (Label)ucCustomerAddress.FindControl("lblCustomerCode");
            Label lblCustomerName = (Label)ucCustomerAddress.FindControl("lblCustomerName");
            lblCustomerCode.Text = (ddlReceiptFrom.SelectedValue == "6") ? "Vendor Code" : "Lessee Code";
            lblCustomerName.Text = (ddlReceiptFrom.SelectedValue == "6") ? "Vendor Name" : "Lessee Name";
            lblCode.Text = (ddlReceiptFrom.SelectedValue == "6") ? "Vendor" : "Lessee";
            rfvcmbCustomer.ErrorMessage = rfvcmbCustomer1.ErrorMessage = (ddlReceiptFrom.SelectedValue == "6") ? "Select a Vendor" : "Select a Lessee";
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void ddlAccountDescription_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            DropDownList ddlAccountDescription = (DropDownList)grvRentalRcptDetails.FooterRow.FindControl("ddlAccountDescription");
            DropDownList ddlFooterGLCode = (DropDownList)grvRentalRcptDetails.FooterRow.FindControl("ddlFooterGLCode");
            DropDownList ddlFooterSLCode = (DropDownList)grvRentalRcptDetails.FooterRow.FindControl("ddlFooterSLCode");
            Label lblFooterCashFlowFlagID = (Label)grvRentalRcptDetails.FooterRow.FindControl("lblFooterCashFlowFlagID");
            lblFooterCashFlowFlagID.Text = "";
            if (Convert.ToInt32(ddlAccountDescription.SelectedValue) > 0)
            {
                if (Procparam != null)
                    Procparam.Clear();
                else
                    Procparam = new Dictionary<string, string>();

                Procparam.Add("@OPTION", "6");
                Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
                Procparam.Add("@CashFlow_Flag_ID", Convert.ToString(ddlAccountDescription.SelectedValue));
                Procparam.Add("@LobId", Convert.ToString(ddlLOB.SelectedValue));
                
                if (ddlReceiptType.SelectedValue == "5")
                {
                    Procparam.Add("@ReceiptType", ddlReceiptType.SelectedValue);
                    Procparam.Add("@Funder_ID", Convert.ToString(ViewState["CustomerID"]));
                }
                else
                {
                    Procparam.Add("@ReceiptType", ddlReceiptType.SelectedValue);
                    Procparam.Add("@Customer_ID", Convert.ToString(ViewState["CustomerID"]));
                }
                DataTable dtGLCode = Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);

                if (dtGLCode != null)
                {
                    //if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 3 || Convert.ToInt32(ddlReceiptType.SelectedValue) > 6)
                    //{
                    ddlFooterGLCode.FillDataTable(dtGLCode, "GL_Account_Code", "GL_Account_Code", true);
                    if (ddlFooterGLCode.Items.Count == 2)
                    {
                        ddlFooterGLCode.SelectedIndex = 1;
                        ddlFooterGLCode.ClearDropDownList();
                        
                    }
                    ddlFooterSLCode.FillDataTable(dtGLCode, "SL_Account_Code", "SL_Account_Code", false);
                    //}

                    lblFooterCashFlowFlagID.Text = Convert.ToString(dtGLCode.Rows[0]["CashFlow_Flag_ID"]);
                }
            }
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void ddlTaxType_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            DropDownList ddlAddLessDesc = (DropDownList)grvAddLessDtls.FooterRow.FindControl("ddlAddLessDesc");
            DropDownList ddlTaxType = (DropDownList)grvAddLessDtls.FooterRow.FindControl("ddlTaxType");
            Label lblFooterAddLessGLCodeDesc = (Label)grvAddLessDtls.FooterRow.FindControl("lblFooterAddLessGLCodeDesc");
            Label lblFooterAddLessSLCodeDesc = (Label)grvAddLessDtls.FooterRow.FindControl("lblFooterAddLessSLCodeDesc");
            Label lblFooterAddLessDueFlag = (Label)grvAddLessDtls.FooterRow.FindControl("lblFooterAddLessDueFlag");
            TextBox txtFooterAddLessSectionNo = (TextBox)grvAddLessDtls.FooterRow.FindControl("txtFooterAddLessSectionNo");
            RequiredFieldValidator rfvFooterAddLessSectionNo = (RequiredFieldValidator)grvAddLessDtls.FooterRow.FindControl("rfvFooterAddLessSectionNo");
            lblFooterAddLessGLCodeDesc.Text = lblFooterAddLessSLCodeDesc.Text = lblFooterAddLessDueFlag.Text = txtFooterAddLessSectionNo.Text = "";
            if (Convert.ToInt32(ddlTaxType.SelectedValue) > 0)
            {
                if (Procparam != null)
                    Procparam.Clear();
                else
                    Procparam = new Dictionary<string, string>();

                Procparam.Add("@OPTION", "11");
                Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
                Procparam.Add("@CashFlow_Flag_ID", Convert.ToString(ddlTaxType.SelectedValue));
                Procparam.Add("@LobId", Convert.ToString(ddlLOB.SelectedValue));

                DataTable dtTaxType = Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);
                if (dtTaxType != null && dtTaxType.Rows.Count > 0)
                {
                    lblFooterAddLessGLCodeDesc.Text = Convert.ToString(dtTaxType.Rows[0]["GL_Account_Code"]);
                    lblFooterAddLessSLCodeDesc.Text = Convert.ToString(dtTaxType.Rows[0]["SL_Account_Code"]);
                    lblFooterAddLessDueFlag.Text = Convert.ToString(dtTaxType.Rows[0]["cashflow_flag_id"]);

                    rfvFooterAddLessSectionNo.Enabled = (Convert.ToString(lblFooterAddLessDueFlag.Text) == "84") ? true : false;

                }
            }
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void ddlFooterGLCode_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            DropDownList ddlFooterGLCode = (DropDownList)grvRentalRcptDetails.FooterRow.FindControl("ddlFooterGLCode");
            DropDownList ddlFooterSLCode = (DropDownList)grvRentalRcptDetails.FooterRow.FindControl("ddlFooterSLCode");

            if (Procparam != null)
                Procparam.Clear();
            else
                Procparam = new Dictionary<string, string>();

            Procparam.Add("@OPTION", "17");
            Procparam.Add("@GL_Code", Convert.ToString(ddlFooterGLCode.SelectedValue));
            Procparam.Add("@LobId", Convert.ToString(ddlLOB.SelectedValue));
            Procparam.Add("@Customer_ID", Convert.ToString(ViewState["CustomerID"]));   //Added on 27Jan2016

            DataTable dtSlCode = Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);
            ddlFooterSLCode.FillDataTable(dtSlCode, "SL_Code", "SL_Code_Desc", true);
            if (ddlFooterSLCode != null && ddlFooterSLCode.Items.Count == 2)
            {
                ddlFooterSLCode.SelectedIndex = 1;
            }
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void ddlFndrCFDesc_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            UserControls_S3GAutoSuggest ddlNoteNo = (UserControls_S3GAutoSuggest)grvFunderReceipt.FooterRow.FindControl("ddlNoteNo");
            UserControls_S3GAutoSuggest ddlFndrGLCode = (UserControls_S3GAutoSuggest)grvFunderReceipt.FooterRow.FindControl("ddlFndrGLCode");
            UserControls_S3GAutoSuggest ddlFndrSLCode = (UserControls_S3GAutoSuggest)grvFunderReceipt.FooterRow.FindControl("ddlFndrSLCode");
            DropDownList ddlFndrCFDesc = (DropDownList)grvFunderReceipt.FooterRow.FindControl("ddlFndrCFDesc");
            FunPriClrDfltParam();
            Procparam.Add("@OPTION", "28");
            Procparam.Add("@Note_ID", Convert.ToString(ddlNoteNo.SelectedValue));
            Procparam.Add("@Customer_ID", (ViewState["CustomerID"] == null) ? "0" : Convert.ToString(ViewState["CustomerID"]));
            Procparam.Add("@CashFlow_Flag_ID", ddlFndrCFDesc.SelectedValue);
            Procparam.Add("@LobId", ddlLOB.SelectedValue);
            DataTable dtFndrGLSL = Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);

            if (dtFndrGLSL.Rows.Count > 0)
            {
                ddlFndrGLCode.SelectedValue = Convert.ToString(dtFndrGLSL.Rows[0]["GL_Account_Code"]);
                ddlFndrGLCode.SelectedText = Convert.ToString(dtFndrGLSL.Rows[0]["GL_Account_Code"]);
                ddlFndrSLCode.SelectedValue = Convert.ToString(dtFndrGLSL.Rows[0]["SL_Account_Code"]);
                ddlFndrSLCode.SelectedText = Convert.ToString(dtFndrGLSL.Rows[0]["SL_Account_Code"]);
            }

        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void ddlNoteNo_Item_Selected(object Sender, EventArgs e)
    {
        try
        {
            UserControls_S3GAutoSuggest ddlfndrTrancheNo = (UserControls_S3GAutoSuggest)grvFunderReceipt.FooterRow.FindControl("ddlfndrTrancheNo");
            UserControls_S3GAutoSuggest ddlNoteNo = (UserControls_S3GAutoSuggest)grvFunderReceipt.FooterRow.FindControl("ddlNoteNo");
            UserControls_S3GAutoSuggest ddlFndrGLCode = (UserControls_S3GAutoSuggest)grvFunderReceipt.FooterRow.FindControl("ddlFndrGLCode");
            UserControls_S3GAutoSuggest ddlFndrSLCode = (UserControls_S3GAutoSuggest)grvFunderReceipt.FooterRow.FindControl("ddlFndrSLCode");
            ddlfndrTrancheNo.Clear();
            ddlFndrGLCode.Clear();
            ddlFndrSLCode.Clear();
            ddlfndrTrancheNo.ReadOnly = false;
            ddlFndrGLCode.ReadOnly = ddlFndrSLCode.ReadOnly = true;
            if (Convert.ToInt64(ddlTranche.SelectedValue) > 0 && Convert.ToString(ddlTranche.SelectedText) != "")
            {
                ddlfndrTrancheNo.SelectedValue = ddlTranche.SelectedValue;
                ddlfndrTrancheNo.SelectedText = ddlTranche.SelectedText;
                ddlfndrTrancheNo.ReadOnly = true;
            }
            FunPriClrDfltParam();

            //Procparam.Add("@OPTION", "28");
            //Procparam.Add("@Note_ID", Convert.ToString(ddlNoteNo.SelectedValue));
            //Procparam.Add("@Customer_ID", (ViewState["CustomerID"] == null) ? "0" : Convert.ToString(ViewState["CustomerID"]));
            //DataTable dtFndrGLSL = Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);

            //if (dtFndrGLSL.Rows.Count > 0)
            //{
            //    ddlFndrGLCode.SelectedValue = Convert.ToString(dtFndrGLSL.Rows[0]["GL_Code"]);
            //    ddlFndrGLCode.SelectedText = Convert.ToString(dtFndrGLSL.Rows[0]["GL_Code"]);
            //    ddlFndrSLCode.SelectedValue = Convert.ToString(dtFndrGLSL.Rows[0]["SL_Code"]);
            //    ddlFndrSLCode.SelectedText = Convert.ToString(dtFndrGLSL.Rows[0]["SL_Code"]);
            //}
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void ddlTranche_Item_Selected(object Sender, EventArgs e)
    {
        try
        {
            FunPriClearGridDetails();
            FunPriClearTmpInvDtl();
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void ddlRSNo_Item_Selected(object Sender, EventArgs e)
    {
        try
        {
            if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 5)
            {
                UserControls_S3GAutoSuggest ddlRSNo = (UserControls_S3GAutoSuggest)grvRentalRcptDetails.FooterRow.FindControl("ddlRSNo");
                TextBox txtFooterAmount = (TextBox)grvRentalRcptDetails.FooterRow.FindControl("txtFooterAmount");
                FunPriClrDfltParam();
                Procparam.Add("@Note_ID", Convert.ToString(ddlRSNo.SelectedValue));
                Procparam.Add("@OPTION", "29");
                DataTable dtPvAmt = Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);

                if (dtPvAmt.Rows.Count > 0)
                {
                    txtFooterAmount.Text = (Convert.ToDouble(dtPvAmt.Rows[0]["Balance_Amt"]) > 0) ? Convert.ToString(dtPvAmt.Rows[0]["Balance_Amt"]) : "0";
                }
            }
        }
        catch (Exception ObjException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ObjException, strPageName);
        }
    }

    protected void ddlDepositBankName_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            txtIFSC_Code.Text = txtBankbranch.Text = txtGLCode.Text = txtSLCode.Text = string.Empty;
            if (Convert.ToInt32(ddlDepositBankName.SelectedValue) > 0)
            {
                FunPriClrDfltParam();
                Procparam.Add("@OPTION", "30");
                Procparam.Add("@Sys_Bank_Code", Convert.ToString(ddlDepositBankName.SelectedValue));
                //Added for Call Id : 5272
                Procparam.Add("@LOCATIONID", ddlLocation.SelectedValue);
                DataTable dtDepAccts = Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);
                ddlDepAcctNumber.FillDataTable(dtDepAccts, "ID", "Acct_Number", true);
            }
        }
        catch (Exception ObjException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ObjException, strPageName);
        }
    }

    protected void ddlDepAcctNumber_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            txtIFSC_Code.Text = txtBankbranch.Text = txtGLCode.Text = txtSLCode.Text = string.Empty;
            if (Convert.ToInt32(ddlDepAcctNumber.SelectedValue) > 0)
            {
                FunPriClrDfltParam();
                Procparam.Add("@OPTION", "31");
                Procparam.Add("@Bank_Detail_ID", Convert.ToString(ddlDepAcctNumber.SelectedValue));
                DataTable dtDepAccts = Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);
                if (dtDepAccts.Rows.Count > 0)
                {
                    txtIFSC_Code.Text = Convert.ToString(dtDepAccts.Rows[0]["IFSC_Code"]);
                    txtGLCode.Text = Convert.ToString(dtDepAccts.Rows[0]["GL_Code"]);
                    txtSLCode.Text = Convert.ToString(dtDepAccts.Rows[0]["SL_Code"]);
                    txtBankbranch.Text = Convert.ToString(dtDepAccts.Rows[0]["Branch_Name"]);
                }
            }
        }
        catch (Exception ObjException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ObjException, strPageName);
        }
    }

    protected void ddlLocation_Item_Selected(object Sender, EventArgs e)
    {
        try
        {
            FunPriLoadDraweeBank();
        }
        catch (Exception ObjException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ObjException, strPageName);
        }
    }
    #endregion

    #region "Image Events"

    protected void imgPopupClose_Click(object sender, ImageClickEventArgs e)
    {
        try
        {
            moePoInvoiceDtls.Hide();
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    #endregion

    #region "Checkbox Events"

    protected void chkSelectIndicator_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (ViewState["POInvoiceDtls"] != null)
            {
                string strSelectID = ((CheckBox)sender).ClientID;
                int _iRowIdx = Utility.FunPubGetGridRowID("grvPoInvoiceDetails", strSelectID);
                Label lblPoDtlID = (Label)grvPoInvoiceDetails.Rows[_iRowIdx].FindControl("lblPoID");
                Label lblPIDtlID = (Label)grvPoInvoiceDetails.Rows[_iRowIdx].FindControl("lblPerformaInvoiceID");
                Label lblVIDtlID = (Label)grvPoInvoiceDetails.Rows[_iRowIdx].FindControl("lblVendorInvoiceID");
                CheckBox chkSelectIndicator = (CheckBox)grvPoInvoiceDetails.Rows[_iRowIdx].FindControl("chkSelectIndicator");
                TextBox txtRcptAmount = (TextBox)grvPoInvoiceDetails.Rows[_iRowIdx].FindControl("txtRcptAmount");
                DataTable dtPoInvoiceDetails = (DataTable)ViewState["POInvoiceDtls"];

                string strFilter = "PO_ID = " + Convert.ToString(lblPoDtlID.Text) + " and PInvoice_ID = " + Convert.ToString(lblPIDtlID.Text);
                strFilter = strFilter + " and VendorInvoice_ID = " + Convert.ToString(lblVIDtlID.Text);

                DataView dvInvoice = new DataView(dtPoInvoiceDetails);
                dvInvoice.RowFilter = strFilter;
                if (chkSelectIndicator.Checked == true)
                {
                    dtPoInvoiceDetails = dvInvoice.ToTable();
                    FunPriInsInvDtl(dtPoInvoiceDetails);
                }
                else if (chkSelectIndicator.Checked == false)
                {
                    dtPoInvoiceDetails = dvInvoice.ToTable(true, "PO_ID", "PINVOICE_ID", "VENDORINVOICE_ID");
                    FunPriDeleteInvDtl(dtPoInvoiceDetails);
                }

                //DataRow[] drRow = dtPoInvoiceDetails.Select(strFilter);
                //drRow[0]["Select_Indicator"] = (chkSelectIndicator.Checked == true) ? 1 : 0;
                //drRow[0]["Rcpt_Amount"] = 0;
                //dtPoInvoiceDetails.AcceptChanges();
                //ViewState["POInvoiceDtls"] = dtPoInvoiceDetails;

                //txtRcptAmount.Text = "";
                txtRcptAmount.Enabled = chkSelectIndicator.Checked;
            }
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void chkSelectAllInvoice_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CheckBox chkSelectAll = (CheckBox)grvPoInvoiceDetails.HeaderRow.FindControl("chkSelectAllInvoice");
            if (chkSelectAll.Checked == true)
            {
                FunPriInsInvDtl((DataTable)ViewState["POInvoiceDtls"]);
            }
            else if (chkSelectAll.Checked == false)
            {
                DataView dvInvoice = new DataView((DataTable)ViewState["POInvoiceDtls"]);
                DataTable dtInvoice = dvInvoice.ToTable(true, "PO_ID", "PINVOICE_ID", "VENDORINVOICE_ID");
                FunPriDeleteInvDtl(dtInvoice);
            }
        }
        catch (Exception ObjException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ObjException, strPageName);
        }
    }

    protected void chkExt_CheckedChanged(object sender, EventArgs e)
    {
        if (chkExt.Checked)
            grvRentalRcptDetails.FooterRow.Visible = false;
        else
            grvRentalRcptDetails.FooterRow.Visible = true;
    }

    #endregion

    #region "TextBox Events"

    protected void txtRcptAmount_TextChanged(object sender, EventArgs e)
    {
        try
        {
            if (ViewState["POInvoiceDtls"] != null)
            {
                string strSelectID = ((TextBox)sender).ClientID;
                int _iRowIdx = Utility.FunPubGetGridRowID("grvPoInvoiceDetails", strSelectID);
                Label lblPoDtlID = (Label)grvPoInvoiceDetails.Rows[_iRowIdx].FindControl("lblPoID");
                Label lblPIDtlID = (Label)grvPoInvoiceDetails.Rows[_iRowIdx].FindControl("lblPerformaInvoiceID");
                Label lblVIDtlID = (Label)grvPoInvoiceDetails.Rows[_iRowIdx].FindControl("lblVendorInvoiceID");
                TextBox txtRcptAmount = (TextBox)grvPoInvoiceDetails.Rows[_iRowIdx].FindControl("txtRcptAmount");

                if (Convert.ToDouble(txtRcptAmount.Text) == 0)
                {
                    Utility.FunShowAlertMsg(this, "Amount should be Greater than 0");
                    txtRcptAmount.Text = "";
                    return;
                }

                FunPriClrDfltParam();
                Procparam.Add("@Option", "6");
                Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
                Procparam.Add("@PO_DTL_ID", Convert.ToString(lblPoDtlID.Text));
                Procparam.Add("@PI_Detl_ID", Convert.ToString(lblPIDtlID.Text));
                Procparam.Add("@VI_Det_ID", Convert.ToString(lblVIDtlID.Text));
                Procparam.Add("@User_ID", Convert.ToString(intUserID));
                Procparam.Add("@Rcpt_Amount", Convert.ToString(txtRcptAmount.Text));
                Procparam.Add("@Is_Added", "0");
                Procparam.Add("@Receipt_Type", Convert.ToString(ddlReceiptType.SelectedValue));

                DataSet dsRcpt = Utility.GetDataset("S3G_CLN_Insert_TMPRCPTPODTL", Procparam);

                if (dsRcpt != null && dsRcpt.Tables.Count > 1)
                    FunPriAssignInvTtl(1, dsRcpt.Tables[2]);

                //DataTable dtPoInvoiceDetails = (DataTable)ViewState["POInvoiceDtls"];

                //string strFilter = "PO_ID = " + Convert.ToString(lblPoDtlID.Text) + " and PInvoice_ID = " + Convert.ToString(lblPIDtlID.Text);
                //strFilter = strFilter + " and VendorInvoice_ID = " + Convert.ToString(lblVIDtlID.Text);

                //DataRow[] drRow = dtPoInvoiceDetails.Select(strFilter);
                //drRow[0]["Rcpt_Amount"] = Convert.ToDouble(txtRcptAmount.Text);
                //dtPoInvoiceDetails.AcceptChanges();
                //ViewState["POInvoiceDtls"] = dtPoInvoiceDetails;
            }
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    #endregion

    #region "Link Button Event"

    protected void lnkRcptRemove_Click(object sender, EventArgs e)
    {
        try
        {
            string strSelectID = ((LinkButton)sender).ClientID;
            int _iRowIdx = Utility.FunPubGetGridRowID("grvLesseeInvoiceDtls", strSelectID);
            Label lblPoDtlID = (Label)grvLesseeInvoiceDtls.Rows[_iRowIdx].FindControl("lblLessePoID");
            Label lblPIDtlID = (Label)grvLesseeInvoiceDtls.Rows[_iRowIdx].FindControl("lblLessePerformaInvoiceID");
            Label lblVIDtlID = (Label)grvLesseeInvoiceDtls.Rows[_iRowIdx].FindControl("lblLesseVendorInvoiceID");

            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_ID", Convert.ToString(CompanyId));
            Procparam.Add("@PO_DTL_ID", Convert.ToString(lblPoDtlID.Text));
            Procparam.Add("@PI_Detl_ID", Convert.ToString(lblPIDtlID.Text));
            Procparam.Add("@VI_Det_ID", Convert.ToString(lblVIDtlID.Text));
            Procparam.Add("@Receipt_Type", Convert.ToString(ddlReceiptType.SelectedValue));
            Procparam.Add("@User_ID", Convert.ToString(intUserID));
            Procparam.Add("@Option", "3");
            Procparam.Add("@Is_Added", "1");
            if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 1 || Convert.ToInt32(ddlReceiptType.SelectedValue) == 8)  //Lessee to OPC Purchase Advance
            {
                Procparam.Add("@Customer_ID", Convert.ToString(ViewState["CustomerID"]));
                if (Convert.ToInt64(ddlReceiptTo.SelectedValue) > 0)
                    Procparam.Add("@Vendor_ID", Convert.ToString(ddlReceiptTo.SelectedValue));
            }
            if (Convert.ToInt64(ddlReceiptTo.SelectedValue) > 0 && Convert.ToInt32(ddlReceiptType.SelectedValue) == 4)  //Funder to OPC Advance Lessee
            {
                Procparam.Add("@Customer_ID", Convert.ToString(ddlReceiptTo.SelectedValue));
                Procparam.Add("@Funder_ID", Convert.ToString(ViewState["CustomerID"]));
            }

            DataSet dsRcpt = Utility.GetDataset("S3G_CLN_Insert_TMPRCPTPODTL", Procparam);
            FunPriBindGridDtls(grvLesseeInvoiceDtls, dsRcpt.Tables[0]);
            if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 1)
            {
                if (dsRcpt.Tables[1].Rows.Count == 0)
                    ViewState["RSRcptDtls"] = (DataTable)ViewState["DefaultRSRcptDtls"];
                else
                    ViewState["RSRcptDtls"] = dsRcpt.Tables[1];
                FunPriBindReceiptGridDtls(1, (DataTable)ViewState["RSRcptDtls"]);

                if (Convert.ToDouble(((DataTable)ViewState["RSRcptDtls"]).Rows[0]["Amount"]) == 0)
                {
                    grvRentalRcptDetails.Visible = false;
                }
                else
                {
                    grvRentalRcptDetails.Visible = true;
                    FunPriEnableDisableFooter(1, false);
                    LinkButton lblgvRemove = (LinkButton)grvRentalRcptDetails.Rows[0].FindControl("lblgvRemove");
                    lblgvRemove.Enabled = false;
                }
            }
            else if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 8)
            {
                if (dsRcpt.Tables[1].Rows.Count == 0)
                    ViewState["FunderRcptDtls"] = (DataTable)ViewState["DefaultFunderRcptDtls"];
                else
                    ViewState["FunderRcptDtls"] = dsRcpt.Tables[1];
                FunPriBindReceiptGridDtls(3, (DataTable)ViewState["FunderRcptDtls"]);

                if (Convert.ToDouble(((DataTable)ViewState["FunderRcptDtls"]).Rows[0]["Amount"]) == 0)
                {
                    grvFunderReceipt.Visible = false;
                }
                else
                {
                    grvFunderReceipt.Visible = true;
                    FunPriEnableDisableFooter(3, false);
                    LinkButton lnkgvFunderRemove = (LinkButton)grvFunderReceipt.Rows[0].FindControl("lnkgvFunderRemove");
                    lnkgvFunderRemove.Enabled = false;
                }
                if (dsRcpt.Tables.Count > 1)
                    FunPriAssignInvTtl(2, dsRcpt.Tables[2]);
            }
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void lblgvRemove_Click(object sender, EventArgs e)
    {
        try
        {
            string strSelectID = ((LinkButton)sender).ClientID;
            int _iRowIdx = Utility.FunPubGetGridRowID("grvRentalRcptDetails", strSelectID);
            DataTable dtRcpt = (DataTable)ViewState["RSRcptDtls"];
            dtRcpt.Rows.RemoveAt(_iRowIdx);
            dtRcpt.AcceptChanges();
            if (dtRcpt.Rows.Count == 0)
                dtRcpt = (DataTable)ViewState["DefaultRSRcptDtls"];

            ViewState["RSRcptDtls"] = dtRcpt;
            FunPriBindReceiptGridDtls(1, dtRcpt);
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void lnkgvAddLessRemove_Click(object sender, EventArgs e)
    {
        try
        {
            string strSelectID = ((LinkButton)sender).ClientID;
            int _iRowIdx = Utility.FunPubGetGridRowID("grvAddLessDtls", strSelectID);
            DataTable dtAddLess = (DataTable)ViewState["AddLessRcptDtls"];
            dtAddLess.Rows.RemoveAt(_iRowIdx);
            dtAddLess.AcceptChanges();
            if (dtAddLess.Rows.Count == 0)
                dtAddLess = (DataTable)ViewState["DefaultAddLessRcptDtls"];

            ViewState["AddLessRcptDtls"] = dtAddLess;
            FunPriBindReceiptGridDtls(2, dtAddLess);
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void lnkgvFunderRemove_Click(object sender, EventArgs e)
    {
        try
        {
            string strSelectID = ((LinkButton)sender).ClientID;
            int _iRowIdx = Utility.FunPubGetGridRowID("grvFunderReceipt", strSelectID);
            DataTable dtRcpt = (DataTable)ViewState["FunderRcptDtls"];
            dtRcpt.Rows.RemoveAt(_iRowIdx);
            dtRcpt.AcceptChanges();
            if (dtRcpt.Rows.Count == 0)
                dtRcpt = (DataTable)ViewState["DefaultFunderRcptDtls"];

            ViewState["FunderRcptDtls"] = dtRcpt;
            FunPriBindReceiptGridDtls(3, dtRcpt);
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    #endregion

    #region "Grid View Events"

    protected void grvRentalRcptDetails_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.Footer)
            {
                
                UserControls_S3GAutoSuggest ddlRSNo = (UserControls_S3GAutoSuggest)e.Row.FindControl("ddlRSNo");
                TextBox txtFooterAmount = (TextBox)e.Row.FindControl("txtFooterAmount");
                DropDownList ddlAccountDescription = (DropDownList)e.Row.FindControl("ddlAccountDescription");
                DropDownList ddlFooterGLCode = (DropDownList)e.Row.FindControl("ddlFooterGLCode");
                DropDownList ddlFooterSLCode = (DropDownList)e.Row.FindControl("ddlFooterSLCode");
                Label lblFooterCashFlowFlagID = (Label)e.Row.FindControl("lblFooterCashFlowFlagID");

                ddlRSNo.IsMandatory = true;

                Procparam = new Dictionary<string, string>();
                Procparam.Add("@Company_ID", Convert.ToString(CompanyId));
                DataTable dtCashFlow;
                if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 3 || Convert.ToInt32(ddlReceiptType.SelectedValue) > 6)             //OPC Rental Receipt
                {
                    Procparam.Add("@OPTION", "9");
                    Procparam.Add("@LobId", Convert.ToString(ddlLOB.SelectedValue));
                    if (ViewState["CustomerID"] != null)
                        Procparam.Add("@Customer_ID", Convert.ToString(ViewState["CustomerID"]));

                    DataSet dsCashflow = Utility.GetDataset("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);
                    dtCashFlow = dsCashflow.Tables[0];
                    ddlAccountDescription.FillDataTable(dtCashFlow, "CashFlow_ID", "CashFlowFlag_Desc", true);
                    ddlFooterGLCode.Items.Clear();
                    ddlFooterSLCode.Items.Clear();
                    //if (dsCashflow.Tables[1].Rows.Count > 0)
                    //{
                    //    ddlFooterGLCode.FillDataTable(dsCashflow.Tables[1], "GLAccountId", "GL_Account_Code", false);
                    //    ddlFooterSLCode.FillDataTable(dsCashflow.Tables[1], "SL_Account_Code", "SL_Account_Code", false);
                    //}
                    lblFooterCashFlowFlagID.Text = "";
                }
                else if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 2)        //Lessee to OPC Funder Paymnent
                {
                    ddlAccountDescription.Items.Clear();
                    Procparam.Add("@OPTION", "7");
                    Procparam.Add("@LobId", Convert.ToString(ddlLOB.SelectedValue));
                    Procparam.Add("@Customer_ID", Convert.ToString(ViewState["CustomerID"]));
                    DataSet dsCashflow = Utility.GetDataset("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);

                    ddlAccountDescription.FillDataTable(dsCashflow.Tables[1], "CashFlow_Flag_ID", "CashFlowFlag_Desc", true);
                    ddlFooterGLCode.FillDataTable(dsCashflow.Tables[0], "GL_Code", "GL_Code", false);
                    ddlFooterSLCode.FillDataTable(dsCashflow.Tables[0], "SL_Code", "SL_Code", false);
                }
                else if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 5)        //Funder to OPC Discounted Amount
                {
                    ddlAccountDescription.Items.Clear();
                    Procparam.Add("@OPTION", "8");
                    Procparam.Add("@LobId", Convert.ToString(ddlLOB.SelectedValue));
                    Procparam.Add("@Funder_ID", Convert.ToString(ViewState["CustomerID"]));
                    DataSet dsCashFlow = Utility.GetDataset("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);

                    if (dsCashFlow.Tables[0].Rows.Count == 0)
                    {
                        Utility.FunShowAlertMsg(this, "Cashflow Master is not yet defined for Funder Discount Amount flag");
                        return;
                    }

                    ddlAccountDescription.FillDataTable(dsCashFlow.Tables[0], "CashFlow_ID", "CashFlowFlag_Desc", true);
                    //ddlFooterGLCode.FillDataTable(dsCashFlow.Tables[0], "GL_Code", "GL_Code", false);
                    //ddlFooterSLCode.FillDataTable(dsCashFlow.Tables[0], "SL_Code", "SL_Code", false);
                    lblFooterCashFlowFlagID.Text = Convert.ToString(dsCashFlow.Tables[0].Rows[0]["CashFlow_Flag_ID"]);
                }
                else if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 6)        //GL Based
                {
                    ddlRSNo.IsMandatory = false;
                    ddlAccountDescription.Items.Clear();
                    Procparam.Add("@OPTION", "10");
                    Procparam.Add("@LobId", Convert.ToString(ddlLOB.SelectedValue));
                    dtCashFlow = Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);

                    ddlFooterGLCode.FillDataTable(dtCashFlow, "GLAccountId", "GL_Account_Code", true);
                    ddlFooterSLCode.Items.Clear();
                    
                }

                txtFooterAmount.SetDecimalPrefixSuffix(13, 2, true, false, "Amount");
                ddlRSNo.ErrorMessage = (Convert.ToInt32(ddlReceiptType.SelectedValue) == 5) ? "Select the Note Number" : "Select the Rental Schedule No";
            }
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void grvAddLessDtls_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.Footer)
            {
                TextBox txtFooterAddLessAmount = (TextBox)e.Row.FindControl("txtFooterAddLessAmount");
                DropDownList ddlTaxType = (DropDownList)e.Row.FindControl("ddlTaxType");
                ddlTaxType.FillDataTable((DataTable)(ViewState["AddLessTaxType"]), "CashFlow_Flag_ID", "CashFlowFlag_Desc", true);

                txtFooterAddLessAmount.SetDecimalPrefixSuffix(13, 2, false, false, "Amount");
            }
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void grvPoInvoiceDetails_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                TextBox txtRcptAmount = (TextBox)e.Row.FindControl("txtRcptAmount");
                txtRcptAmount.SetDecimalPrefixSuffix(13, 2, false, false, "Amount");
            }
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void gvShowInstallment_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                CheckBox chkSelectBranch = e.Row.FindControl("chkSelect") as CheckBox;
                CheckBox chkSelectAllBranch = gvShowInstallment.HeaderRow.FindControl("chkSelectAll") as CheckBox;
                TextBox txtPendingAmount = e.Row.FindControl("txtPendingAmount") as TextBox;
                //if (chkSelectBranch != null && chkSelectAllBranch != null)
                //{
                //    chkSelectBranch.Attributes.Add("onclick", "javascript:fnSelectBranch(" + chkSelectBranch.ClientID + "," + chkSelectAllBranch.ClientID + ");");
                //}
                txtPendingAmount.SetDecimalPrefixSuffix(13, 2, true, false, "Amount");
            }
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    protected void grvFunderReceipt_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.Footer)
            {
                DropDownList ddlFndrCFDesc = (DropDownList)e.Row.FindControl("ddlFndrCFDesc");
                TextBox txtFooterFunderAmount = (TextBox)e.Row.FindControl("txtFooterFunderAmount");
                Label lblFooterFndrCFFlagID = (Label)e.Row.FindControl("lblFooterFndrCFFlagID");
                txtFooterFunderAmount.SetDecimalPrefixSuffix(13, 2, true, false);
                DataTable dtCashFlow = (DataTable)ViewState["FunderCashFlow"];

                if (dtCashFlow != null && dtCashFlow.Rows.Count > 0)
                {
                    ddlFndrCFDesc.FillDataTable(dtCashFlow, "CashFlow_ID", "CashFlowFlag_Desc", true);
                    lblFooterFndrCFFlagID.Text = Convert.ToString(dtCashFlow.Rows[0]["CashFlow_Flag_ID"]);
                }
            }
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    //protected void grvFunderInstallments_RowDataBound(object sender, GridViewRowEventArgs e)
    //{
    //    try
    //    {
    //        if (e.Row.RowType == DataControlRowType.DataRow)
    //        {
    //            TextBox txtFndrDueAmt = (TextBox)e.Row.FindControl("txtFndrDueAmt");
    //            txtFndrDueAmt.SetDecimalPrefixSuffix(13, 2, true, "Amount to be entered");
    //        }
    //    }
    //    catch (Exception objException)
    //    {
    //        ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
    //    }
    //}

    #endregion

    #region"Auto Suggest Events"

    protected void ddlReceiptTo_Item_Selected(object Sender, EventArgs e)
    {
        try
        {
            FunPriClearGridDetails();
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }
    }

    #endregion

    #endregion

    #region "METHODS"

    private void FunPriPageLoad()
    {
        try
        {
            ObjS3GSession = new S3GSession();
            obj_Page = this;
            intCompanyID = ObjUserInfo.ProCompanyIdRW;
            intUserID = ObjUserInfo.ProUserIdRW;
            strDateFormat = ObjS3GSession.ProDateFormatRW;
            strPrefixLength = ObjS3GSession.ProGpsPrefixRW;
            strDecMaxLength = ObjS3GSession.ProGpsSuffixRW;

            ucCustomerCodeLov.strControlID = ucCustomerCodeLov.ClientID.ToString();
            TextBox txtUserName = ((TextBox)ucCustomerCodeLov.FindControl("txtName"));
            txtUserName.Attributes.Add("onfocus", "fnLoadCustomer()");
            txtUserName.ToolTip = txtUserName.Text;
            FunPriSetCustomerLovCode();
            txtInstrumentDate.Attributes.Add("onblur", "checkDate_InstrumentDate_OnBlur(this,'" + txtInstrumentDate.ClientID + "','" + strDateFormat + "',false,  false);");

            bCreate = ObjUserInfo.ProCreateRW;
            bModify = ObjUserInfo.ProModifyRW;
            bQuery = ObjUserInfo.ProViewRW;

            if (Request.QueryString["qsViewId"] != null)
            {
                FormsAuthenticationTicket fromTicket = FormsAuthentication.Decrypt(Request.QueryString["qsViewId"]);
                intReceiptId = Convert.ToInt32(fromTicket.Name);
            }

            if (Request.QueryString["qsMode"] != null)
            {
                strMode = Convert.ToString(Request.QueryString["qsMode"]);
            }

            #region Paging Config
            arrSearchVal = new ArrayList(intNoofSearch);
            ProPageNumRW = 1;

            TextBox txtPageSize = (TextBox)ucCustomPaging.FindControl("txtPageSize");
            TextBox txtGotoPage = (TextBox)ucCustomPaging.FindControl("txtGotoPage");
            if (txtPageSize.Text != "")
                ProPageSizeRW = Convert.ToInt32(txtPageSize.Text);
            else
                ProPageSizeRW = Convert.ToInt32(ConfigurationManager.AppSettings.Get("GridPageSize"));

            if (txtGotoPage.Text != "")
                ProPageNumRW = Convert.ToInt32(txtGotoPage.Text);

            PageAssignValue obj = new PageAssignValue(this.AssignValue);
            ucCustomPaging.callback = obj;
            ucCustomPaging.ProPageNumRW = ProPageNumRW;
            ucCustomPaging.ProPageSizeRW = ProPageSizeRW;

            #endregion

            if (!IsPostBack)
            {
                txtDocAmount.SetDecimalPrefixSuffix(13, 2, false, "Doc Amount");
                ceDocDate.Format = ceValueDate.Format = ceInstrumentDate.Format = ceFilInstalmentDate.Format = ceFilInstalmentToDate.Format = strDateFormat;
                txtDocDate.Attributes.Add("onblur", "checkDate_DocDateOnBlur(this,'" + txtDocDate.ClientID + "','" + strDateFormat + "',true,  false);");
                txtValueDate.Attributes.Add("onblur", "checkDate_DocDateOnBlur(this,'" + txtValueDate.ClientID + "','" + strDateFormat + "',false,  false);");
                txtInstrumentDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtInstrumentDate.ClientID + "','" + strDateFormat + "',false,  false);");
                txtFilInstalmentDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtFilInstalmentDate.ClientID + "','" + strDateFormat + "',false,  false);");
                txtFilInstalmentToDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtFilInstalmentToDate.ClientID + "','" + strDateFormat + "',false,  false);");
                FunPriLoadLOV();

                if (strMode == "M")
                {
                    btnSave.Enabled = btnClear.Enabled = ucCustomerCodeLov.Visible = btnReceiptCancel.Enabled = false;
                    lblHeading.Text = FunPubGetPageTitles(enumPageTitle.Modify);
                    FunPriLoadReceiptDetails(intReceiptId);
                    //FunPriEnableDisableControls(2);
                    FunPriEnableDisableControls(3);
                    btnReceiptCancel.Enabled = true;
                }
                else if (strMode == "Q")
                {
                    btnSave.Enabled = btnClear.Enabled = ucCustomerCodeLov.Visible = btnReceiptCancel.Enabled = false;
                    lblHeading.Text = FunPubGetPageTitles(enumPageTitle.View);
                    FunPriLoadReceiptDetails(intReceiptId);
                    FunPriEnableDisableControls(3);
                }
                else
                {
                    lblHeading.Text = FunPubGetPageTitles(enumPageTitle.Create);
                    FunPriEnableDisableControls(1);
                }
            }
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriLoadLOV()
    {
        try
        {
            if (Procparam != null)
                Procparam.Clear();
            else
                Procparam = new Dictionary<string, string>();

            Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
            Procparam.Add("@User_ID", Convert.ToString(intUserID));

            DataSet dsLov = Utility.GetDataset("S3G_CLN_GetRCPT_Lookup", Procparam);

            ddlLOB.BindDataTable(dsLov.Tables[0], new string[] { "LOB_ID", "LOB_Code", "LOB_Name" });
            if (ddlLOB.Items.Count == 2)
            {
                ddlLOB.SelectedIndex = 1;
                ddlLOB.ClearDropDownList();
            }

            ddlMode.FillDataTable(dsLov.Tables[1], "Lookup_Code", "Lookup_Description", true);

            ddlGLBased.FillDataTable(dsLov.Tables[2], "ID", "Name", false);

            ddlReceiptType.FillDataTable(dsLov.Tables[3], "Lookup_Code", "Lookup_Description", true);

            txtDocDate.Text = Convert.ToString(dsLov.Tables[4].Rows[0]["Doc_Date"]);

            ViewState["DefaultRSRcptDtls"] = dsLov.Tables[5];

            ViewState["AccountDescription"] = dsLov.Tables[6];

            if (dsLov.Tables[7].Rows.Count > 0)
            {
                ddlLocation.SelectedValue = Convert.ToString(dsLov.Tables[7].Rows[0]["ID"]);
                ddlLocation.SelectedText = Convert.ToString(dsLov.Tables[7].Rows[0]["Name"]);
                ViewState["Location_ID"] = Convert.ToString(dsLov.Tables[7].Rows[0]["ID"]);
                ViewState["Location_Desc"] = Convert.ToString(dsLov.Tables[7].Rows[0]["Name"]);
                FunPriLoadDraweeBank();
            }

            ViewState["AddLessTaxType"] = dsLov.Tables[8];

            ViewState["DefaultAddLessRcptDtls"] = ViewState["AddLessRcptDtls"] = dsLov.Tables[9];

            FunPriBindReceiptGridDtls(2, dsLov.Tables[9]);

            FunPriGetGapDays(dsLov.Tables[10]);

            ddlSearchType.FillDataTable(dsLov.Tables[11], "ID", "Name", true);

            ViewState["DefaultFunderRcptDtls"] = ViewState["FunderRcptDtls"] = dsLov.Tables[12];

            ViewState["FunderCashFlow"] = dsLov.Tables[13];

            FunPriBindReceiptGridDtls(3, dsLov.Tables[12]);

            ddlDepositBankName.FillDataTable(dsLov.Tables[14], "ID", "Name", true);

            ddlReceiptFrom.FillDataTable(dsLov.Tables[15], "Lookup_Code", "Lookup_Description", true);
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriGetGapDays(DataTable dtGapDays)
    {
        try
        {
            if (dtGapDays.Rows.Count > 0)
            {
                strValueDateGapDays = dtGapDays.Rows[0][0].ToString();
                strInstrumentDateGapDays = dtGapDays.Rows[1][0].ToString();
            }
            else
            {
                Utility.FunShowAlertMsg(this, "Define the Gap Days in LookupDetails");
                return;
            }
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriSetCustomerLovCode()
    {
        try
        {
            Int32 _iRcptType = (Convert.ToInt32(ddlReceiptType.Items.Count) > 0) ? Convert.ToInt32(ddlReceiptType.SelectedValue) : 1;

            if (_iRcptType == 4 || _iRcptType == 5)
            {
                ucCustomerCodeLov.strLOV_Code = "FLM";
            }
            else if (_iRcptType == 9 && ddlReceiptFrom.SelectedValue == "6")
            {
                ucCustomerCodeLov.strLOV_Code = "ENVENDOR";
            }
            else
            {
                ucCustomerCodeLov.strLOV_Code = "CMD";
            }
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriGetCustomerAddress(Int64 CustomerID)
    {
        try
        {
            Label lblCustomerCode = (Label)ucCustomerAddress.FindControl("lblCustomerCode");
            Label lblCustomerName = (Label)ucCustomerAddress.FindControl("lblCustomerName");
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_Id", intCompanyID.ToString());
            Procparam.Add("@ID", Convert.ToString(CustomerID));
            if (Convert.ToInt32(ddlReceiptType.SelectedValue) > 3 && Convert.ToInt32(ddlReceiptType.SelectedValue) < 6)
            {
                Procparam.Add("@TypeID", "150");                //Funder Details
                lblCustomerCode.Text = "Funder Code";
                lblCustomerName.Text = "Funder Name";
                lblCode.Text = "Funder";
            }
            else if (ddlReceiptType.SelectedValue == "9" && ddlReceiptFrom.SelectedValue == "6")      //Vendor Details
            {
                Procparam.Add("@TypeID", "145");
            }
            else
            {
                Procparam.Add("@TypeID", "144");                //Customer Details
                lblCustomerCode.Text = "Lessee Code";
                lblCustomerName.Text = "Lessee Name";
                lblCode.Text = "Lessee";
            }

            DataTable dtCustomer = Utility.GetDefaultData("S3G_LOANAD_GETCustomerorEntityDetails", Procparam);
            if (dtCustomer != null && dtCustomer.Rows.Count > 0)
            {
                TextBox txtName = (TextBox)ucCustomerCodeLov.FindControl("txtName");
                txtName.Text = txtCustomerCode.Text = Convert.ToString(dtCustomer.Rows[0]["Code"]);
                ucCustomerAddress.SetCustomerDetails(Convert.ToString(dtCustomer.Rows[0]["Code"]),
                        Convert.ToString(dtCustomer.Rows[0]["Address1"]) + "\n" +
                        ((Convert.ToString(dtCustomer.Rows[0]["Address2"]) == "") ? "" : Convert.ToString(dtCustomer.Rows[0]["Address2"]) + "\n") +
                Convert.ToString(dtCustomer.Rows[0]["city"]) + "\n" +
                Convert.ToString(dtCustomer.Rows[0]["state"]) + "\n" +
                Convert.ToString(dtCustomer.Rows[0]["country"]) + "\n" +
                Convert.ToString(dtCustomer.Rows[0]["pincode"]), Convert.ToString(dtCustomer.Rows[0]["Name"]), Convert.ToString(dtCustomer.Rows[0]["Telephone"]),
                Convert.ToString(dtCustomer.Rows[0]["mobile"]),
                Convert.ToString(dtCustomer.Rows[0]["email"]), Convert.ToString(dtCustomer.Rows[0]["website"]));
            }
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriClearDetails()
    {
        try
        {
            txtDocAmount.Text = txtDocNo.Text = txtValueDate.Text = txtFilInstalmentDate.Text = "";
            ddlLocation.SelectedValue = Convert.ToString(ViewState["Location_ID"]);
            ddlLocation.SelectedText = Convert.ToString(ViewState["Location_Desc"]);
            ddlReceiptTo.Clear();
            ddlTranche.Clear();
            ddlFilTranche.Clear();
            ddlReceiptType.SelectedValue = ddlMode.SelectedValue = "0";
            FunPriClearBankDetails();
            FunPriClearCustomerDetails();
            FunPriClearGridDetails();
            chkExt.Enabled = chkExt.Checked = false;
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriClearCustomerDetails()
    {
        try
        {
            Int32 _iRcptType = (Convert.ToInt32(ddlReceiptType.Items.Count) > 0) ? Convert.ToInt32(ddlReceiptType.SelectedValue) : 1;

            //if ((_iRcptType == 1 || _iRcptType == 2 || _iRcptType == 3 || _iRcptType == 6) && ucCustomerCodeLov.strLOV_Code == "CMD")
            //{
            //    ucCustomerAddress.ClearCustomerDetails();
            //}
            //else if ((_iRcptType == 4 || _iRcptType == 5) && ucCustomerCodeLov.strLOV_Code == "FLM")
            //{
            //    ucCustomerAddress.ClearCustomerDetails();
            //}
            ucCustomerAddress.ClearCustomerDetails();
            ViewState["CustomerID"] = 0;
            txtCustomerCode.Text = "";
            ucCustomerCodeLov.FunPubClearControlValue();
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriClearBankDetails()
    {
        try
        {
            txtInstrumentDate.Text = txtInstrumentNo.Text = txtPaymentGatewayRefNo.Text = txtAckNo.Text = txtBankLocation.Text = txtOtherDraweeBank.Text = "";
            lblInstrumentNo.CssClass = lblInstrumentDate.CssClass = lblBankLocation.CssClass = lblDraweeBank.CssClass = "styleDisplayLabel";
            rfvInstrumentNo.Enabled = rfvInstrumentDate.Enabled = rfvDraweeBank.Enabled = rfvPaymentGatewayRefNo.Enabled =
            txtInstrumentDate.Enabled = txtInstrumentNo.Enabled = txtPaymentGatewayRefNo.Enabled = txtAckNo.Enabled = txtBankLocation.Enabled =
            ddlDraweeBank.Enabled = false;
            if (ddlDraweeBank.Items.Count > 0)
                ddlDraweeBank.SelectedIndex = -1;

            ddlDepositBankName.SelectedValue = "0";
            ddlDepAcctNumber.Items.Clear();
            txtIFSC_Code.Text = txtBankbranch.Text = txtGLCode.Text = txtSLCode.Text = txtIFSC_Code.Text = string.Empty;
            FunPriEnblDsblDpstBkDtl(false);
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriClearGridDetails()
    {
        try
        {
            txtTotalAmount.Text = "";
            ViewState["POInvoiceDtls"] = ViewState["PORcptDtl"] = null;
            ViewState["RSRcptDtls"] = (DataTable)ViewState["DefaultRSRcptDtls"];
            ViewState["AddLessRcptDtls"] = (DataTable)ViewState["DefaultAddLessRcptDtls"];
            ViewState["FunderRcptDtls"] = (DataTable)ViewState["DefaultFunderRcptDtls"];
            FunPriBindGridDtls(grvLesseeInvoiceDtls, null);
            FunPriBindReceiptGridDtls(1, (DataTable)ViewState["DefaultRSRcptDtls"]);
            FunPriBindReceiptGridDtls(2, (DataTable)ViewState["DefaultAddLessRcptDtls"]);
            Int32 iRcptType = Convert.ToInt32(ddlReceiptType.SelectedValue);
            grvRentalRcptDetails.Visible = (iRcptType == 1 || iRcptType == 2) ? false : true;
            FunPriEnableDisableFooter(2, (iRcptType == 3 || iRcptType == 7 || iRcptType == 8) ? true : false);
            FunPriEnblDsblPnl();
            FunPriEnableDisableShow();
            FunPriClearPendingDues();
            pnlAddLess.Visible = divAddLess.Visible = (iRcptType == 5) ? false : true;
            pnlFunderRcpt.Visible = (iRcptType == 7 || iRcptType == 8) ? true : false;
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriClearPendingDues()
    {
        try
        {
            gvShowInstallment.DataSource = null;
            gvShowInstallment.DataBind();
            grvFunderInstallments.DataSource = null;
            grvFunderInstallments.DataBind();
            btnShowApply.Visible = btnApplyFndrDue.Visible = pnlShowFunderDue.Visible = pnlShowMethod.Visible =
            btnOPCShowCancel.Visible = btnFndrShowCancel.Visible = false;
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriBindGridDtls(GridView gvObj, DataTable dt)
    {
        try
        {
            if (gvObj != null)
            {
                gvObj.DataSource = dt;
                gvObj.DataBind();
            }
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriBindReceiptGridDtls(Int32 iOption, DataTable dt)
    {
        try
        {
            if (dt != null)
            {
                if (iOption == 1)
                {
                    grvRentalRcptDetails.Columns[2].HeaderText = (Convert.ToInt32(ddlReceiptType.SelectedValue) == 5) ? "Note Number" : "Rental Schedule No";
                    grvRentalRcptDetails.DataSource = dt;
                    grvRentalRcptDetails.DataBind();
                    grvRentalRcptDetails.Rows[0].Visible = (Convert.ToInt64(dt.Rows[0]["RS_ID"]) == 0 && Convert.ToDouble(dt.Rows[0]["Amount"]) == 0) ? false : true;
                    txtTotalAmount.Text = Convert.ToDouble(dt.Compute("sum(Amount)", "Amount >=0")).ToString();
                    lblTtlOPCAmt.Text = Convert.ToString(txtTotalAmount.Text);
                }
                else if (iOption == 2)
                {
                    grvAddLessDtls.DataSource = dt;
                    grvAddLessDtls.DataBind();
                    grvAddLessDtls.Rows[0].Visible = (Convert.ToInt64(dt.Rows[0]["TaxType_ID"]) == 0) ? false : true;
                    txtAddAmount.Text = txtLessAmount.Text = "";
                    DataRow[] drAddLess = dt.Select("AddLess_ID = 1");
                    if (drAddLess.Length > 0)
                    {
                        txtAddAmount.Text = Convert.ToDouble(dt.Compute("sum(Amount)", "AddLess_ID = 1")).ToString();
                    }
                    else
                    {
                        txtAddAmount.Text = "0";
                    }
                    drAddLess = dt.Select("AddLess_ID = 0");
                    if (drAddLess.Length > 0)
                    {
                        txtLessAmount.Text = Convert.ToDouble(dt.Compute("sum(Amount)", "AddLess_ID = 0")).ToString();
                    }
                    else
                    {
                        txtLessAmount.Text = "0";
                    }
                }
                else if (iOption == 3)
                {
                    grvFunderReceipt.Columns[7].HeaderText = (Convert.ToInt32(ddlReceiptType.SelectedValue) == 7) ? "Funder GL Code" : "GL Code";
                    grvFunderReceipt.Columns[8].HeaderText = (Convert.ToInt32(ddlReceiptType.SelectedValue) == 7) ? "Funder SL Code" : "SL Code";
                    grvFunderReceipt.DataSource = dt;
                    grvFunderReceipt.DataBind();
                    grvFunderReceipt.Rows[0].Visible = (Convert.ToInt64(dt.Rows[0]["Note_ID"]) == 0 && Convert.ToDouble(dt.Rows[0]["Amount"]) == 0) ? false : true;
                    lblFunderRcptAmount.Text = Convert.ToDouble(dt.Compute("sum(Amount)", "Amount >=0")).ToString();
                }
                FunPriCalculateAmount();
            }
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriAddRcptGridDtl(Int64 iRSID, string strRSNo, Int64 iAccountDescID, string strAccounDesc, string strGLCodeID, string strGLCodeDesc,
        string strSLCode, string strSLCodeDesc, Int64 iCashflowflagID, double dblAmount, string str_desc)
    {
        try
        {
            if (ViewState["RSRcptDtls"] != null)
            {
                DataTable dtRcptDtl = (DataTable)ViewState["RSRcptDtls"];

                // Changed By C.Aswinkrishna on 1-Mar-2016 Start //

                if (dtRcptDtl.Rows.Count > 0 && Convert.ToInt32(dtRcptDtl.Rows[0]["RS_ID"]) == 0)
                {
                    dtRcptDtl.Rows[0].Delete();
                    dtRcptDtl.AcceptChanges();
                }

                // Changed By C.Aswinkrishna on 1-Mar-2016 End //

                DataRow drRcpt = dtRcptDtl.NewRow();
                drRcpt["RS_ID"] = iRSID;
                drRcpt["RS_No"] = strRSNo;
                drRcpt["CashFlow_ID"] = iAccountDescID;
                drRcpt["CashFlow_Desc"] = strAccounDesc;
                drRcpt["GL_Code"] = strGLCodeID;
                drRcpt["GL_Code_Desc"] = strGLCodeDesc;
                drRcpt["SL_Code"] = strSLCode;
                drRcpt["SL_Code_Desc"] = strSLCodeDesc;
                drRcpt["CashFlow_Flag_ID"] = iCashflowflagID;
                drRcpt["Amount"] = dblAmount;
                drRcpt["Remarks"] = str_desc; //Added by Arunkumar K on 15-Jul-2016 for Remarks Field inclusion
                dtRcptDtl.Rows.Add(drRcpt);
                ViewState["RSRcptDtls"] = dtRcptDtl;

                FunPriBindReceiptGridDtls(1, dtRcptDtl);
            }
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriAddLessGridDtl(Int64 iRSID, string strRSNo, Int32 iAddLessD, string strAddLessDesc, Int64 iTaxTypeID, string strTaxTypeDesc, string strGLCodeDesc
        , string strSLCodeDesc, string strSectionNo, Int32 iCashFlowFlag_ID, double dblAmount)
    {
        try
        {
            if (ViewState["AddLessRcptDtls"] != null)
            {
                DataTable dtAddLessDtl = (DataTable)ViewState["AddLessRcptDtls"];
                if (dtAddLessDtl.Rows.Count > 0 && Convert.ToInt32(dtAddLessDtl.Rows[0]["RS_ID"]) == 0)
                {
                    dtAddLessDtl.Rows[0].Delete();
                    dtAddLessDtl.AcceptChanges();
                }

                DataRow drRcpt = dtAddLessDtl.NewRow();
                drRcpt["RS_ID"] = iRSID;
                drRcpt["RS_No"] = strRSNo;
                drRcpt["AddLess_ID"] = iAddLessD;
                drRcpt["AddLess_Desc"] = strAddLessDesc;
                drRcpt["TaxType_ID"] = iTaxTypeID;
                drRcpt["TaxType_Desc"] = strTaxTypeDesc;
                drRcpt["GL_Code_Desc"] = strGLCodeDesc;
                drRcpt["SL_Code_Desc"] = strSLCodeDesc;
                drRcpt["Section_No"] = strSectionNo;
                drRcpt["Cashflow_Flag_ID"] = iCashFlowFlag_ID;
                drRcpt["Amount"] = dblAmount;

                dtAddLessDtl.Rows.Add(drRcpt);
                ViewState["AddLessRcptDtls"] = dtAddLessDtl;

                FunPriBindReceiptGridDtls(2, dtAddLessDtl);
            }
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriSetReceiptToMandatory(Int32 iReceiptType)
    {
        try
        {
            if (iReceiptType == 1 || iReceiptType == 2 || iReceiptType == 4)
            {
                lblReceiptTo.CssClass = "styleReqFieldLabel";
                ddlReceiptTo.IsMandatory = true;
            }
            else
            {
                lblReceiptTo.CssClass = "styleDisplayLabel";
                ddlReceiptTo.IsMandatory = false;
            }
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriEnableDisableFooter(Int32 iOption, bool blnValue)
    {
        try
        {
            if (iOption == 1)
            {
                grvRentalRcptDetails.FooterRow.Visible = blnValue;
            }
            else if (iOption == 2)
            {
                grvAddLessDtls.FooterRow.Visible = blnValue;
            }
            else if (iOption == 3)
            {
                grvFunderReceipt.FooterRow.Visible = blnValue;
            }
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriLoadReceiptDetails(Int64 iReceiptID)
    {
        try
        {
            if (Procparam != null)
                Procparam.Clear();
            else
                Procparam = new Dictionary<string, string>();
            Procparam.Add("@Receipt_ID", Convert.ToString(iReceiptID));
            Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
            DataSet dsRcpt = Utility.GetDataset("S3G_CLN_GETRECEIPTDETAILS_OPC", Procparam);
            if (dsRcpt != null)
            {
                DataTable dtReceiptDtl = dsRcpt.Tables[0];
                txtAckNo.Text = Convert.ToString(dtReceiptDtl.Rows[0]["Ack_No"]);
                txtBankLocation.Text = Convert.ToString(dtReceiptDtl.Rows[0]["Bank_Location"]);
                txtDocAmount.Text = Convert.ToString(dtReceiptDtl.Rows[0]["Doc_Amount"]);
                txtDocDate.Text = Convert.ToString(dtReceiptDtl.Rows[0]["Doc_Date"]);
                txtDocNo.Text = Convert.ToString(dtReceiptDtl.Rows[0]["Doc_No"]);
                txtInstrumentDate.Text = Convert.ToString(dtReceiptDtl.Rows[0]["Instrument_Date"]);
                txtInstrumentNo.Text = Convert.ToString(dtReceiptDtl.Rows[0]["Instrument_No"]);
                txtPaymentGatewayRefNo.Text = Convert.ToString(dtReceiptDtl.Rows[0]["Payment_Gateway_RefNo"]);
                txtValueDate.Text = Convert.ToString(dtReceiptDtl.Rows[0]["Value_Date"]);
                ddlLOB.SelectedValue = Convert.ToString(dtReceiptDtl.Rows[0]["Lob_ID"]);
                ddlLocation.SelectedValue = Convert.ToString(dtReceiptDtl.Rows[0]["Location_ID"]);
                ddlLocation.SelectedText = Convert.ToString(dtReceiptDtl.Rows[0]["Location_Desc"]);
                ddlMode.SelectedValue = Convert.ToString(dtReceiptDtl.Rows[0]["Payment_Mode"]);
                ddlReceiptType.SelectedValue = Convert.ToString(dtReceiptDtl.Rows[0]["Receipt_Type"]);
                ddlTranche.SelectedValue = Convert.ToString(dtReceiptDtl.Rows[0]["Tranche_ID"]);
                ddlTranche.SelectedText = Convert.ToString(dtReceiptDtl.Rows[0]["Tranche_Name"]);
                ddlReceiptTo.SelectedValue = Convert.ToString(dtReceiptDtl.Rows[0]["Receipt_To"]);
                ddlReceiptTo.SelectedText = Convert.ToString(dtReceiptDtl.Rows[0]["Receipt_Desc"]);
                ddlGLBased.SelectedValue = Convert.ToString(dtReceiptDtl.Rows[0]["GL_Based"]);
                ddlReceiptFrom.SelectedValue = Convert.ToString(dtReceiptDtl.Rows[0]["Receipt_From_Id"]);
                
                chkExt.Checked = dtReceiptDtl.Rows[0]["Is_Ext"].ToString() == "1" ? true : false;

                if (Convert.ToString(dtReceiptDtl.Rows[0]["Other_Bank_Name"]) != "")
                {
                    txtOtherDraweeBank.Text = Convert.ToString(dtReceiptDtl.Rows[0]["Other_Bank_Name"]);
                    txtOtherDraweeBank.Style.Add("display", "");
                }
                else
                {
                    txtOtherDraweeBank.Style.Add("display", "none");
                }

                ddlDraweeBank.FillDataTable(dtReceiptDtl, "Drawee_Bank_Name", "Drawee_Bank_Name", false);
                ViewState["CustomerID"] = Convert.ToString(dtReceiptDtl.Rows[0]["Receipt_From"]);
                FunPriGetCustomerAddress(Convert.ToInt64(dtReceiptDtl.Rows[0]["Receipt_From"]));

                if (dsRcpt.Tables[1].Rows.Count > 0)
                {
                    FunPriBindReceiptGridDtls(1, dsRcpt.Tables[1]);         //Receipt Details
                }

                if (dsRcpt.Tables[2].Rows.Count > 0)                   //Add Less Details
                {
                    FunPriBindReceiptGridDtls(2, dsRcpt.Tables[2]);
                }

                if (dsRcpt.Tables[3].Rows.Count > 0)                 //Po Invoice Details
                {
                    FunPriBindGridDtls(grvLesseeInvoiceDtls, dsRcpt.Tables[3]);
                    //Added on 16Jun2015 starts here
                    grvLesseeInvoiceDtls.FooterRow.Visible = true;
                    Label lblFtrTtlInvAmt = (Label)grvLesseeInvoiceDtls.FooterRow.FindControl("lblgdFtrTtlInvAmt");
                    Label lblFtrTtlRcptAmt = (Label)grvLesseeInvoiceDtls.FooterRow.FindControl("lblgdFtrTtlRcptAmt");

                    lblFtrTtlInvAmt.Text = Convert.ToString(dsRcpt.Tables[3].Compute("sum(Invoice_Amount)", "Invoice_Amount >=0"));
                    lblFtrTtlRcptAmt.Text = Convert.ToString(dsRcpt.Tables[3].Compute("sum(Rcpt_Amount)", "Rcpt_Amount >=0"));
                    //Added on 16Jun2015 Ends here
                }

                if (dsRcpt.Tables[4].Rows.Count > 0)                 //Funder Receipt/Vendor Invoice Details
                {
                    FunPriBindReceiptGridDtls(3, dsRcpt.Tables[4]);
                }

                if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 8)
                    pnlFunderRcpt.GroupingText = "Invoice Details";

                pnlAddLess.Visible = divAddLess.Visible = (Convert.ToInt32(ddlReceiptType.SelectedValue) == 5) ? false : true;
                pnlFunderRcpt.Visible = (Convert.ToInt32(ddlReceiptType.SelectedValue) == 7 || Convert.ToInt32(ddlReceiptType.SelectedValue) == 8) ? true : false;
                btnPrint.Enabled = (Convert.ToInt32(dtReceiptDtl.Rows[0]["Receipt_Status"]) == 3) ? false : true;

                if (Convert.ToInt32(ddlMode.SelectedValue) == 4)
                {
                    FunPriEnblDsblDpstBkDtl(true);
                    if (dsRcpt.Tables.Count > 5)
                    {
                        if (dsRcpt.Tables[5].Rows.Count > 0)
                        {
                            ddlDepositBankName.SelectedValue = Convert.ToString(dsRcpt.Tables[5].Rows[0]["Bank_ID"]);
                            ddlDepositBankName.ClearDropDownList();
                            txtIFSC_Code.Text = Convert.ToString(dsRcpt.Tables[5].Rows[0]["IFSC_Code"]);
                            txtGLCode.Text = Convert.ToString(dsRcpt.Tables[5].Rows[0]["GL_Code"]);
                            txtSLCode.Text = Convert.ToString(dsRcpt.Tables[5].Rows[0]["SL_Code"]);
                            txtBankbranch.Text = Convert.ToString(dsRcpt.Tables[5].Rows[0]["Branch_Name"]);
                            ddlDepAcctNumber.FillDataTable(dsRcpt.Tables[5], "ID", "Acct_Number", false);
                        }
                    }
                }
                else
                {
                    FunPriEnblDsblDpstBkDtl(false);
                }
            }
        }
        catch (Exception objException)
        {

            throw objException;
        }
    }

    private void FunPriEnableDisableControls(Int32 iMode)
    {
        try
        {
            if (iMode == 2)                 //Modify Mode
            {
                btnReceiptCancel.Enabled = btnPrint.Enabled = true;
                if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 1 || Convert.ToInt32(ddlReceiptType.SelectedValue) == 4)
                {
                    FunPriEnableDisableFooter(1, false);
                    grvRentalRcptDetails.Columns[14].Visible = false;
                }
                else
                {
                    FunPriEnableDisableFooter(1, true);
                }
            }
            else if (iMode == 3)             //Query Mode
            {
                txtAckNo.ReadOnly = txtBankLocation.ReadOnly = txtDocAmount.ReadOnly = txtDocAmount.ReadOnly = txtDocDate.ReadOnly = txtInstrumentDate.ReadOnly =
                txtInstrumentNo.ReadOnly = txtPaymentGatewayRefNo.ReadOnly = txtValueDate.ReadOnly = true;

                ceDocDate.Enabled = ceInstrumentDate.Enabled = ceValueDate.Enabled = false;

                ddlLocation.ReadOnly = ddlTranche.ReadOnly = ddlReceiptTo.ReadOnly = true;

                ddlMode.ClearDropDownList();
                ddlReceiptType.ClearDropDownList();
                ddlGLBased.ClearDropDownList();
                if (ddlDraweeBank.Items.Count > 0)
                    ddlDraweeBank.ClearDropDownList();

                if (grvRentalRcptDetails != null && grvRentalRcptDetails.FooterRow != null)
                    FunPriEnableDisableFooter(1, false);
                FunPriEnableDisableFooter(2, false);
                FunPriEnableDisableFooter(3, false);
                grvRentalRcptDetails.Columns[14].Visible = false;
                if (grvLesseeInvoiceDtls != null && grvLesseeInvoiceDtls.Rows.Count > 0)
                {
                    grvLesseeInvoiceDtls.Columns[grvLesseeInvoiceDtls.Columns.Count - 1].Visible = false;
                }
                if (grvAddLessDtls != null && grvAddLessDtls.Rows.Count > 0)
                {
                    grvAddLessDtls.Columns[9].Visible = false;
                }
                if (grvFunderReceipt != null && grvFunderReceipt.Rows.Count > 0)
                {
                    grvFunderReceipt.Columns[grvFunderReceipt.Columns.Count - 1].Visible = false;
                }
            }
            else if (iMode == 1)            //Create Mode
            {
                ddlGLBased.Enabled = false;
                txtOtherDraweeBank.Style.Add("display", "none");
                FunPriEnblDsblDpstBkDtl(false);
                txtDocAmount.ReadOnly = true;
            }

        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriLoadDraweeBank()
    {
        try
        {
            if (Procparam != null)
                Procparam.Clear();
            else
                Procparam = new Dictionary<string, string>();
            Procparam.Add("@OPTION", "15");
            if (ddlLOB.SelectedValue != "0") Procparam.Add("@LOBID", ddlLOB.SelectedValue);
            if (ddlLocation.SelectedValue != "0") Procparam.Add("@LOCATIONID", ddlLocation.SelectedValue);

            DataTable dtDraweeBank = Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);
            ddlDraweeBank.FillDataTable(dtDraweeBank, "BANKNAME", "BANKNAME", true);

            //ddlDraweeBank.BindDataTable("S3G_CLN_GETRCPTCMNLST_AGT", Procparam, new string[] { "BANKNAME", "BANKNAME" });
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private void FunPriSaveReceipt()
    {
        try
        {
            objReceiptProcessingDataTable = new S3GBusEntity.Collection.ClnReceiptMgtServices.S3G_CLN_ReceiptProcessingDataTable();
            objReceiptProcessingRow = objReceiptProcessingDataTable.NewS3G_CLN_ReceiptProcessingRow();

            objReceiptProcessingRow.Account_Based = Convert.ToInt32(ddlGLBased.SelectedValue);
            objReceiptProcessingRow.Ack_No = Convert.ToString(txtAckNo.Text).Trim();
            objReceiptProcessingRow.Branch_ID = Convert.ToInt32(ddlLocation.SelectedValue);
            objReceiptProcessingRow.Company_ID = Convert.ToInt32(CompanyId);
            objReceiptProcessingRow.Created_By = Convert.ToInt32(UserId);
            objReceiptProcessingRow.Doc_Amount = Convert.ToDouble(txtDocAmount.Text);
            if (Convert.ToInt32(ddlMode.SelectedValue) == 2 || Convert.ToInt32(ddlMode.SelectedValue) == 6 || Convert.ToInt32(ddlMode.SelectedValue) == 5)
            {
                //objReceiptProcessingRow.Drawee_Bank_ID = Convert.ToInt32(ddlDraweeBank.SelectedValue);
                objReceiptProcessingRow.Drawee_Bank_Name = Convert.ToString(ddlDraweeBank.SelectedItem.Text);
                if (Convert.ToString(ddlDraweeBank.SelectedItem.Text) == "Others")
                {
                    objReceiptProcessingRow.Other_Bank_Name = Convert.ToString(txtOtherDraweeBank.Text);
                }
            }
            objReceiptProcessingRow.Location = Convert.ToString(txtBankLocation.Text);
            if (Convert.ToString(txtInstrumentDate.Text) != "")
                objReceiptProcessingRow.Instrument_Date = Utility.StringToDate(txtInstrumentDate.Text);
            objReceiptProcessingRow.Instrument_No = Convert.ToString(txtInstrumentNo.Text);
            objReceiptProcessingRow.LOB_ID = Convert.ToInt32(ddlLOB.SelectedValue);
            objReceiptProcessingRow.Payment_Gateway_Ref = Convert.ToString(txtPaymentGatewayRefNo.Text);
            objReceiptProcessingRow.Payment_Mode = Convert.ToInt32(ddlMode.SelectedValue);
            objReceiptProcessingRow.Receipt_Date = Utility.StringToDate(txtDocDate.Text);
            objReceiptProcessingRow.Receipt_From = Convert.ToInt64(ViewState["CustomerID"]);
            objReceiptProcessingRow.Receipt_ID = intReceiptId;
            objReceiptProcessingRow.Receipt_No = Convert.ToString(txtDocNo.Text);
            objReceiptProcessingRow.Receipt_To = Convert.ToInt64(ddlReceiptTo.SelectedValue);
            objReceiptProcessingRow.Receipt_Type = Convert.ToInt32(ddlReceiptType.SelectedValue);
            objReceiptProcessingRow.Tranche_ID = (Convert.ToString(ddlTranche.SelectedText) != "") ? Convert.ToInt64(ddlTranche.SelectedValue) : 0;
            objReceiptProcessingRow.Value_Date = Utility.StringToDate(txtValueDate.Text);

            // Code Changed For Call Id : 4906 CR_057
            objReceiptProcessingRow.Receipt_From_Id = Convert.ToInt32(ddlReceiptFrom.SelectedValue);

            if (grvLesseeInvoiceDtls != null && grvLesseeInvoiceDtls.Rows.Count > 0)
                objReceiptProcessingRow.XML_POInvoiceDtl = Utility.FunPubFormXml((DataTable)ViewState["PORcptDtl"], true);

            if (ViewState["AddLessRcptDtls"] != null && Convert.ToDouble(((DataTable)ViewState["AddLessRcptDtls"]).Rows[0]["Amount"]) >= 0)
            {
                if (Convert.ToString(((DataTable)ViewState["AddLessRcptDtls"]).Rows[0]["GL_Code_Desc"]) != "")
                {
                    objReceiptProcessingRow.XmlAddLessDetails = Utility.FunPubFormXml((DataTable)ViewState["AddLessRcptDtls"], true);
                }
            }
            if (ViewState["RSRcptDtls"] != null && Convert.ToDouble(((DataTable)ViewState["RSRcptDtls"]).Rows[0]["Amount"]) > 0)
            {
                string strXMLRcptDtl = Utility.FunPubFormXml(grvRentalRcptDetails, true, false);
                strXMLRcptDtl = strXMLRcptDtl.Replace("NOTENUMBER", "RENTALSCHEDULENO");
                //objReceiptProcessingRow.XmlReceiptDetails = Utility.FunPubFormXml(grvRentalRcptDetails, true, false);
                objReceiptProcessingRow.XmlReceiptDetails = strXMLRcptDtl;
            }

            if (ViewState["FunderRcptDtls"] != null && Convert.ToDouble(((DataTable)ViewState["FunderRcptDtls"]).Rows[0]["Amount"]) > 0)
            {
                objReceiptProcessingRow.XML_FunderRcptDtl = Utility.FunPubFormXml((DataTable)ViewState["FunderRcptDtls"], true);
            }

            objReceiptProcessingRow.Created_On = Utility.StringToDate(DateTime.Today.ToString());
            objReceiptProcessingRow.Modified_By = intUserID;
            objReceiptProcessingRow.Txn_ID = 1;
            objReceiptProcessingRow.Deposit_Bank_ID = (Convert.ToInt32(ddlMode.SelectedValue) == 4) ? Convert.ToInt32(ddlDepAcctNumber.SelectedValue) : 0;

            if (chkExt.Checked)
                objReceiptProcessingRow.Is_Ext = 1;

            objReceiptProcessingDataTable.AddS3G_CLN_ReceiptProcessingRow(objReceiptProcessingRow);

            objReceiptProcessingClient = new ClnReceiptMgtServicesReference.ClnReceiptMgtServicesClient();
            string strReceiptNumber = string.Empty;
            Int32 intResult = 0;

            intResult = objReceiptProcessingClient.FunPubCreateReceipt(out strReceiptNumber, ObjSerMode, ClsPubSerialize.Serialize(objReceiptProcessingDataTable, ObjSerMode));

            if (intResult == 0)
            {
                //To avoid double save click
                btnSave.Enabled = false;
                //End here
                if (intReceiptId == 0)
                {
                    strAlert = "Receipt " + strReceiptNumber + " created successfully";
                    strAlert += @"\n\nWould you like to create one more Receipt?";
                    strAlert = "if(confirm('" + strAlert + "')){" + strRedirectPageAdd + "}else {" + strRedirectPageView + "}";
                    strRedirectPageView = "";
                }
                else
                {
                    string strModAlert = "Receipt " + strReceiptNumber + " modified successfully";
                    strAlert = strAlert.Replace("__ALERT__", strModAlert);
                }
            }
            else if (intResult == -1)
            {
                strAlert = strAlert.Replace("__ALERT__", Resources.LocalizationResources.DocNoNotDefined);
                strRedirectPageView = "";
            }
            else if (intResult == -2)
            {
                strAlert = strAlert.Replace("__ALERT__", Resources.LocalizationResources.DocNoExceeds);
                strRedirectPageView = "";
            }
            else if (intResult == -4)
            {
                strAlert = strAlert.Replace("__ALERT__", "Already selected TR Ref was cancelled by another user");
                strRedirectPageView = "";
            }
            else if (intResult == 15)
            {
                if (!string.IsNullOrEmpty(strReceiptNumber))
                {
                    strReceiptNumber = strReceiptNumber.Substring(0, strReceiptNumber.Length - 1);
                }
                strAlert = strAlert.Replace("__ALERT__", "Define the following Memo Type(s) in Memo Master " + strReceiptNumber);
                strRedirectPageView = "";
            }
            else
            {
                if ((intResult == 51) || (intResult == 52) || (intResult == 53) || (intResult == 120) || (intResult >= 5000))
                {
                    Utility.FunShowValidationMsg(this.Page, "", intResult);
                    return;
                }
                else
                {
                    if (intReceiptId == 0)
                    {
                        strAlert = strAlert.Replace("__ALERT__", "Due to Data Problem,Unable to create Receipt");
                        strRedirectPageView = "";
                    }
                    else
                    {
                        strAlert = strAlert.Replace("__ALERT__", "Due to Data Problem,Unable to modify Receipt");
                        strRedirectPageView = "";
                    }
                }
            }

            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriCancelReceipt()
    {
        try
        {
            objReceiptProcessingClient = new ClnReceiptMgtServicesReference.ClnReceiptMgtServicesClient();
            S3GBusEntity.Collection.ClnReceiptMgtServices.S3G_CLN_CancelReceiptDataTable objReceiptProcessingDataTable = new S3GBusEntity.Collection.ClnReceiptMgtServices.S3G_CLN_CancelReceiptDataTable();
            S3GBusEntity.Collection.ClnReceiptMgtServices.S3G_CLN_CancelReceiptRow objReceiptProcessingRow = objReceiptProcessingDataTable.NewS3G_CLN_CancelReceiptRow();

            objReceiptProcessingRow.Receipt_ID = Convert.ToInt64(intReceiptId);
            objReceiptProcessingRow.User_ID = Convert.ToInt32(intUserID);

            objReceiptProcessingDataTable.AddS3G_CLN_CancelReceiptRow(objReceiptProcessingRow);

            SerializationMode SerMode = SerializationMode.Binary;
            byte[] objbyteReceiptTable = ClsPubSerialize.Serialize(objReceiptProcessingDataTable, SerMode);
            int intResult = objReceiptProcessingClient.FunPubCancelReceipt(SerMode, objbyteReceiptTable);
            if (intResult == 0)
            {
                string strModAlert = "Receipt " + txtDocNo.Text + " cancelled successfully";
                strAlert = strAlert.Replace("__ALERT__", strModAlert);
            }
            else if (intResult == -1)
            {
                string strModAlert = "Closing/Pre-Closing Account(s) involved Receipt cannot be cancelled ";
                strAlert = strAlert.Replace("__ALERT__", strModAlert);
                strRedirectPageView = "";
            }
            else if (intResult == -8)
            {
                string strModAlert = "Payment has been made, Unable to proceed";
                strAlert = strAlert.Replace("__ALERT__", strModAlert);
                strRedirectPageView = "";
            }
            else
            {
                strAlert = strAlert.Replace("__ALERT__", "Due to Data Problem, unable to cancel the Receipt");
                strRedirectPageView = "";
            }
            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private bool FunPriCheckReceiptAmount()
    {
        Boolean blnrslt = true;
        try
        {
            Double dblDocAmount, dblTotalAmount;
            //if (grvRentalRcptDetails != null && grvRentalRcptDetails.Rows.Count > 0)
            //{
            //    DataTable dtRcpt = (DataTable)ViewState["RSRcptDtls"];
            //    if ((dtRcpt == null || Convert.ToInt64(dtRcpt.Rows[0]["RS_ID"]) == 0) && Convert.ToInt64(dtRcpt.Rows[0]["Amount"]) == 0)
            //    {
            //        Utility.FunShowAlertMsg(this, "Enter atleast one Receipt details");
            //        blnrslt = false;
            //    }

            //    dblDocAmount = Convert.ToDouble(txtDocAmount.Text);
            //    dblTotalAmount = Convert.ToDouble(lblTotalRcptAmt.Text);
            //    if (dblDocAmount != dblTotalAmount)
            //    {
            //        Utility.FunShowAlertMsg(this, "Doc Amount should be equal to Total Amount");
            //        blnrslt = false;
            //    }
            //}

            dblDocAmount = Convert.ToDouble(txtDocAmount.Text);
            dblTotalAmount = Convert.ToDouble(lblTotalRcptAmt.Text);
            if (dblDocAmount != dblTotalAmount)
            {
                Utility.FunShowAlertMsg(this, "Doc Amount should be equal to Total Amount");
                blnrslt = false;
            }
        }
        catch (Exception objException)
        {
            blnrslt = false;
            throw objException;
        }
        return blnrslt;
    }

    private Int32 FunPriCheckRcptDtl()
    {
        Int32 intRslt = 0;
        try
        {
            if (grvRentalRcptDetails != null && grvRentalRcptDetails.Rows.Count > 0)
            {
                DataTable dtRcpt = (DataTable)ViewState["RSRcptDtls"];
                if ((dtRcpt == null || Convert.ToInt64(dtRcpt.Rows[0]["RS_ID"]) == 0) && Convert.ToInt64(dtRcpt.Rows[0]["Amount"]) == 0)
                {
                    intRslt = 1;
                }
            }
        }
        catch (Exception objException)
        {
            intRslt = 1;
            throw objException;
        }
        return intRslt;
    }

    private Int32 FunPriCheckFndrDtl()
    {
        Int32 intRslt = 0;
        try
        {
            if (ViewState["FunderRcptDtls"] != null && Convert.ToDouble(((DataTable)ViewState["FunderRcptDtls"]).Rows[0]["Amount"]) == 0)
            {
                intRslt = 2;
            }
        }
        catch (Exception objException)
        {
            intRslt = 2;
            throw objException;
        }
        return intRslt;
    }

    private bool FunPriCheckDocDate()
    {
        bool blnRslt = true;
        try
        {
            if (Procparam != null)
                Procparam.Clear();
            else
                Procparam = new Dictionary<string, string>();
            Procparam.Add("@Option", "19");
            Procparam.Add("@DocumentDate", Utility.StringToDate(txtDocDate.Text).ToString());
            Procparam.Add("@LOCATIONID", Convert.ToString(ddlLocation.SelectedValue));
            Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));

            DataTable dtDoc = Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);
            if (Convert.ToInt32(dtDoc.Rows[0]["Error_Code"]) == 1)
            {
                Utility.FunShowAlertMsg(this, "Receipt Date should be in Open Month");
                blnRslt = false;
            }
            else if (Convert.ToInt32(dtDoc.Rows[0]["Error_Code"]) == 2)
            {
                Utility.FunShowAlertMsg(this, "Receipt Date should not be Less than Latest Receipt Date " + Convert.ToString(dtDoc.Rows[0]["Receipt_Date"]));
                blnRslt = false;
            }
        }
        catch (Exception objException)
        {
            blnRslt = false;
            throw objException;
        }
        return blnRslt;
    }

    private bool FunPriCheckValueDate()
    {
        bool blnRslt = true;
        try
        {
            if (Procparam != null)
                Procparam.Clear();
            else
                Procparam = new Dictionary<string, string>();
            Procparam.Add("@Option", "20");
            Procparam.Add("@DocumentDate", Utility.StringToDate(txtValueDate.Text).ToString());
            Procparam.Add("@LOCATIONID", Convert.ToString(ddlLocation.SelectedValue));
            Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));

            DataTable dtDoc = Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);
            if (Convert.ToInt32(dtDoc.Rows[0]["Error_Code"]) == 1)
            {
                Utility.FunShowAlertMsg(this, "Value Date should be in Open Month");
                blnRslt = false;
            }
        }
        catch (Exception objException)
        {
            blnRslt = false;
            throw objException;
        }
        return blnRslt;
    }

    protected void FunOpenPDF(string strReceiptProcessID)
    {
        string strHTML = FunGetHTMLForRECP(strReceiptProcessID);

        string objGuid = System.Guid.NewGuid().ToString();
        string strnewFile = (Server.MapPath(".") + "\\PDF Files\\" + strReceiptProcessID + ".pdf");
        string strnewFile1 = strReceiptProcessID + ".pdf";

        try
        {
            if (File.Exists(strnewFile) == true)
            {
                File.Delete(strnewFile);
            }

            Document doc = new Document();

            PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(strnewFile, FileMode.Create));

            doc.AddCreator("Sundaram Infotech Solutions");
            doc.AddTitle("Receipt");
            doc.Open();
            List<IElement> htmlarraylist = iTextSharp.text.html.simpleparser.HTMLWorker.ParseToList(new StringReader(strHTML), null);
            for (int k = 0; k < htmlarraylist.Count; k++)
            {
                doc.Add((IElement)htmlarraylist[k]);
            }
            doc.AddAuthor("S3G Team");
            doc.Close();

            string strScipt = "window.open('../Common/S3GShowPDF.aspx?rptType=Rcpt&qsFileName=" + strnewFile1 + "', 'newwindow','toolbar=no,location=no,menubar=no,width=900,height=600,resizable=yes,scrollbars=no,top=50,left=50');";
            ScriptManager.RegisterStartupScript(this, this.GetType(), "PDF", strScipt, true);

        }
        catch (Exception objException)
        {
            throw objException;
            System.Diagnostics.Process.Start(strnewFile);
        }
    }
    //Modified here by Arunkumar K for CR OPC_CR_052 Receipt Print
    protected string FunGetHTMLForRECP(string strReceiptProcessID)
    {
        StringBuilder strHTML = new StringBuilder();
        Procparam = new Dictionary<string, string>();
        Procparam.Add("@Company_ID", intCompanyID.ToString());
        Procparam.Add("@Receipt_ID", strReceiptProcessID);
        Procparam.Add("@Is_Print", "1");
        DataSet dsRECP = Utility.GetDataset("S3G_CLN_GETRECEIPT_RPT", Procparam);           //Modified for OPC on 14Nov2014

        DataTable dtHDR = dsRECP.Tables[0];

        if (dtHDR.Rows.Count > 0)
        {
            DataRow drHDR = dtHDR.Rows[0];

            strHTML.Append(" <font size=\"1\"  color=\"black\" face=\"verdana\">" +
                 "<table width=\"85%\">" +
                     "<tr>" +
                     "<td width=\"100%\" align=\"right\">" +
                //"<b>" + Convert.ToString(drHDR["Duplicate"]) + "</b>" +
                     "<b>" + " " + "</b>" +
                     "</td>" +
                    "</tr>" +
                    "</table>" +
        "<table width=\"85%\">" +
        "<tr>" +
        "<td width=\"100%\">" +
            "<table border=\"0\" width=\"100%\">" +
                "<tr>" +
                    "<td align=\"center\">" +
                       "<b>" + drHDR["COMPANY_NAME"].ToString() + "</b>" +
                    "</td>" +
                "</tr>" +
                "<tr>" +
                    "<td align=\"center\">" +
                        "<b>" + drHDR["Address"] + "</b>" +
                        "<br />" +
                    "</td>" +
                "</tr>" +
                "<tr>" +
                    "<td align=\"center\">" +
                        "<b> ");

            if (drHDR["Print_Count"].ToString() == "0")
            {
                strHTML.Append("RECEIPT");
            }
            else
            {
                //strHTML.Append("RECEIPT - Duplicate Copy");
                strHTML.Append("RECEIPT");
            }
            strHTML.Append("</b>" +
                "</td>" +
            "</tr>" +
        "</table>" +
    "</td>" +
"</tr>" +
"<tr>" +
    "<td>" +
        "<table width=\"100%\">" +
            "<tr>" +
                "<td align=\"left\" valign=\"top\">" +
                  "<table align=\"left\" valign=\"top\" cellpadding=\"0\" cellspacing=\"0\">" +
                     "<tr>" +
                        "<td>" +
                            drHDR["CUSTOMER_NAME"].ToString() + " (" + drHDR["CUSTOMER_CODE"].ToString() + ")" +
                        "</td>" +
                    "</tr>" +
                    "<tr>" +
                        "<td>" +
                            drHDR["COMM_ADDRESS1"].ToString() +
                        "</td>" +
                   " </tr>" +
                    "<tr>" +
                        "<td>" +
                            drHDR["COMM_ADDRESS2"].ToString() +
                        "</td>" +
                    "</tr>" +
                    "<tr>" +
                        "<td>" +
                            drHDR["COMM_CITY"].ToString() +
                        "</td>" +
                    "</tr>" +
                    "<tr>" +
                        "<td>" +
                            drHDR["STATECODE"].ToString() +
                        "</td>" +
                    "</tr>" +
                    "</table>" +
                  "</td>" +
                  "<td>" +
                   "<table width=\"100%\" align=\"right\" cellpadding=\"0\" cellspacing=\"0\">" +
                      "<tr>" +
                             "<td align=\"left\">" +
                                "Location Name" +
                             "</td>" +
                             "<td align=\"center\">" +
                                ":" +
                             "</td>" +
                             "<td align=\"left\">" + //drHDR["LOCATION_CODE"].ToString() + " - " + 
                               drHDR["LOCATION_NAME"].ToString() +
                             "</td>" +
                     "</tr>" +
                     "<tr>" +
                           "<td align=\"left\">" +
                             "Receipt No." +
                           "</td>" +
                           "<td align=\"center\">" +
                             ":" +
                           "</td>" +
                           "<td align=\"left\">" +
                            drHDR["RECEIPT_NO"].ToString() +
                           "</td>" +
                    "</tr>" +
                    "<tr>" +
                          "<td align=\"left\">" +
                            "Date" +
                          "</td>" +
                          "<td align=\"center\">" +
                            ":" +
                          "</td>" +
                          "<td align=\"left\">" +
                            drHDR["VALUE_DATE"].ToString() +
                          "</td>" +
                  "</tr>" +
                  "<tr>" +
                        "<td align=\"left\">" +
                            "Page" +
                        "</td>" +
                        "<td align=\"center\">" +
                            ":" +
                       " </td>" +
                        "<td align=\"left\">" +
                            "1 of 1" +
                        "</td>" +
                 "</tr>" +
                 "<tr>" +
                        "<td align=\"left\">" +
                            "Line of Business" +
                        "</td>" +
                        "<td align=\"center\">" +
                           " :" +
                        "</td>" +
                        "<td align=\"left\">" +
                           drHDR["LOB_Name"].ToString() +
                        "</td>" +
                "</tr>" +
           "</table>" +
       " </td>" +
      "</tr>" +
    "</table>" +
  " </td>" +
"</tr>" +
"<tr>" +
    "<td>" +
        "<table width=\"100%\">" +
            "<tr>" +
                "<td>" +
                    "Received with thanks from " + drHDR["CUSTOMER_NAME"].ToString() +
                    " a sum of Rs." + drHDR["TOTAL_RECEIPT_AMOUNT"].ToString() + " (Rupees " +
                    Convert.ToDecimal(drHDR["TOTAL_RECEIPT_AMOUNT"].ToString()).GetAmountInWords() + ") " +
                    " by " + drHDR["PAYMENT_MODE_DESC1"].ToString());

            if (!string.IsNullOrEmpty(drHDR["INSTRUMENT_NO"].ToString()))
            {
                strHTML.Append(" number " + drHDR["INSTRUMENT_NO"].ToString());
            }
            if (!string.IsNullOrEmpty(drHDR["INSTRUMENT_DATE"].ToString()))
            {
                strHTML.Append(" dated " + drHDR["INSTRUMENT_DATE"].ToString() + " drawn on " + drHDR["DRAWEE_BANK_Name"].ToString() +
                 " " + drHDR["DRAWEE_BANK_LOCATION"].ToString());
            }
            strHTML.Append(" towards the below account(s)." +

                "</td>" +
            "</tr>" +
        "</table>" +
    "</td>" +
"</tr>");


            DataTable dtGridTbl = dsRECP.Tables[1];
            DataTable dtRECGridTbl = dsRECP.Tables[0];


            string sno = "";
            string Rec_type = "";
            string particular = "";
            string Ven_name = "";
            string PO_no = "";
            string PI_NO = "";
            string PI_Date = "";
            string VI_No = "";
            string VI_Date = "";
            string RS_NO = "";
            string Tr_Name = "";
            string Note_no = "";
            string Rep_amt = "";
            string rec_type = "";
            switch ((dtRECGridTbl.Rows[0]["Pay_To_ID"].ToString()))
            {
                case "5": //Discounting Receipts

                    sno = "Width=3%";
                    Rec_type = "Width=5%";
                    particular = "Width=18%";
                    Ven_name = "Width=3%";
                    PO_no = "Width=3%";
                    PI_NO = "Width=3%";
                    PI_Date = "Width=3%";
                    VI_No = "Width=3%";
                    VI_Date = "Width=3%";
                    RS_NO = "Width=3%";
                    Tr_Name = "Width=3%";
                    Note_no = "Width=3%";
                    Rep_amt = "Width=3%";
                    break;
                case "6"://General Receipts (GL based)
                    sno = "Width=10px";
                    Rec_type = "Width=5%";
                    particular = "Width=80px";
                    Ven_name = "Width=3%";
                    PO_no = "Width=3%";
                    PI_NO = "Width=3%";
                    PI_Date = "Width=3%";
                    VI_No = "Width=3%";
                    VI_Date = "Width=3%";
                    RS_NO = "Width=3%";
                    Tr_Name = "Width=3%";
                    Note_no = "Width=3%";
                    Rep_amt = "Width=25px";
                    break;
                case "7": //Receipts - Funder & OPC
                    sno = "Width=3%";
                    Rec_type = "Width=5%";
                    particular = "Width=8%";
                    Ven_name = "Width=3%";
                    PO_no = "Width=3%";
                    PI_NO = "Width=3%";
                    PI_Date = "Width=3%";
                    VI_No = "Width=3%";
                    VI_Date = "Width=3%";
                    RS_NO = "Width=3%";
                    Tr_Name = "Width=3%";
                    Note_no = "Width=3%";
                    Rep_amt = "Width=3%";
                    break;
                case "8": //Receipts - Vendor & OPC
                    sno = "Width=\"5%\"";
                    Rec_type = "Width=\"10%\"";
                    particular = "Width=\"10%\"";
                    Ven_name = "Width=\"3%\"";
                    PO_no = "Width=3%";
                    PI_NO = "Width=3%";
                    PI_Date = "Width=3%";
                    VI_No = "Width=3%";
                    VI_Date = "Width=3%";
                    RS_NO = "Width=\"15%\"";
                    Tr_Name = "Width=\"15%\"";
                    Note_no = "Width=\"15%\"";
                    Rep_amt = "Width=\"15%\"";
                    break;
            }
            if (Convert.ToInt32(dtGridTbl.Rows.Count) > 0)
            {
                strHTML.Append(
                "<tr>" +
                "<td>" +
                "<table width=\"132%\" style=\"border-color: Black;\" border=\"0.5\" cellpadding=\"1\" cellspacing=\"0\">" +
                    "<tr>" +
                       "<td align=\"center\" " + sno + ">" +
                "<font face=\"verdana\" size=\"1\"><b>Sl.No </b></font>" +
                "</td>" +
                "<td align=\"center\" " + particular + " >" +
                "<font face=\"verdana\" size=\"1\"><b>Particulars</b></font>" +
                "</td>");//+
                if ((dtRECGridTbl.Rows[0]["Pay_To_ID"].ToString()) != "5" && (dtRECGridTbl.Rows[0]["Pay_To_ID"].ToString()) != "6" && (dtRECGridTbl.Rows[0]["Pay_To_ID"].ToString()) != "7"
                    && ((dtRECGridTbl.Rows[0]["Pay_To_ID"].ToString()) == "8" && dtGridTbl.Columns.Contains("Vendor_Name")))
                {
                    strHTML.Append("<td align=\"center\" " + Ven_name + ">" +
                   "<font face=\"verdana\" size=\"1\"><b>Vendor Name</b></font>" +
                   "</td>" +
                   "<td align=\"center\" " + PO_no + ">" +
                   "<font face=\"verdana\" size=\"1\"><b>PO No</b></font>" +
                   "</td>" +
                   "<td align=\"center\" " + PI_NO + ">" +
                   "<font face=\"verdana\" size=\"1\"><b>PI NO</b></font>" +
                   "</td>" +
                   "<td align=\"center\" " + PI_Date + ">" +
                   "<font face=\"verdana\" size=\"1\"><b>PI Date</b></font>" +
                   "</td>" +
                   "<td align=\"center\" " + VI_No + ">" +
                   "<font face=\"verdana\" size=\"1\"><b>VI No</b></font>" +
                   "</td>" +
                   "<td align=\"center\" " + VI_Date + ">" +
                   "<font face=\"verdana\" size=\"1\"><b>VI Date</b></font>" +
                   "</td>");//+
                }

                // Code Added by Chandru K on 28-Jul-2016 for CR_OPCSL_052
                if (dtGridTbl.Columns.Contains("INVOICE_NO"))
                {
                    strHTML.Append("<td align=\"center\" " + RS_NO + ">" +
                   "<font face=\"verdana\" size=\"1\"><b>Invoice No</b></font>" +
                   "</td>" +
                   "<td align=\"center\" " + particular + ">" +
                   "<font face=\"verdana\" size=\"1\"><b>Invoice Date</b></font>" +
                   "</td>");//+
                }
                // Code End

                if ((dtRECGridTbl.Rows[0]["Pay_To_ID"].ToString()) != "6")
                {
                    strHTML.Append("<td align=\"center\" " + RS_NO + ">" +
                    "<font face=\"verdana\" size=\"1\"><b>Rental Schedule No</b></font>" +
                    "</td>" +
                    "<td align=\"center\" " + Tr_Name + ">" +
                    "<font face=\"verdana\" size=\"1\"><b>Tranche Name</b></font>" +
                    "</td>" +
                    "<td align=\"center\" " + Note_no + ">" +
                    "<font face=\"verdana\" size=\"1\"><b>Note Number</b></font>" +
                    "</td>");//+
                }
                strHTML.Append("<td align=\"Right\"" + Rep_amt + ">" +
                "<font face=\"verdana\" size=\"1\"><b>Receipt Amount</b></font>" +
                "</td>" +
                    "</tr>");

                for (int i = 0; i <= dtGridTbl.Rows.Count - 1; i++)
                {
                    //string strSubAccount = dtGridTbl.Rows[i]["SubAccountNo"].ToString().ToLower();
                    //if (strSubAccount == dtGridTbl.Rows[i]["PrimeAccountNo"].ToString().ToLower() + "dummy")
                    //{
                    //    strSubAccount = "";
                    //}

                    strHTML.Append("<tr>" +
                   "<td align=\"center\" " + sno + ">" +
                   (i + 1).ToString() +
                   "</td>" +
                   "<td align=\"left\" " + particular + ">" +
                   dtGridTbl.Rows[i]["Particular"].ToString() +
                   "</td>"); //+
                    if ((dtRECGridTbl.Rows[0]["Pay_To_ID"].ToString()) != "5" && (dtRECGridTbl.Rows[0]["Pay_To_ID"].ToString()) != "6" && (dtRECGridTbl.Rows[0]["Pay_To_ID"].ToString()) != "7" && ((dtRECGridTbl.Rows[0]["Pay_To_ID"].ToString()) == "8" && dtGridTbl.Columns.Contains("Vendor_Name")))
                    {
                        strHTML.Append("<td align=\"left\" " + Ven_name + ">" +
                        dtGridTbl.Rows[i]["Vendor_Name"].ToString() +
                        "</td>" +
                        "<td align=\"left\" " + PO_no + ">" +
                        dtGridTbl.Rows[i]["Po_No"].ToString() +
                        "</td>" +
                         "<td align=\"left\" " + PI_NO + ">" +
                        dtGridTbl.Rows[i]["PI_No"].ToString() +
                        "</td>" +
                        "<td align=\"left\" " + PI_Date + ">" +
                        dtGridTbl.Rows[i]["PI_Date"].ToString() +
                        "</td>" +
                         "<td align=\"left\" " + VI_No + ">" +
                        dtGridTbl.Rows[i]["VI_number"].ToString() +
                        "</td>" +
                        "<td align=\"left\" " + VI_Date + ">" +
                        dtGridTbl.Rows[i]["VI_Date"].ToString() +
                        "</td>");//+
                    }
                    if (dtGridTbl.Columns.Contains("INVOICE_NO"))
                    {
                        strHTML.Append("<td align=\"left\" " + RS_NO + ">" +
                         dtGridTbl.Rows[i]["INVOICE_NO"].ToString() +
                         "</td>" +
                         "<td align=\"left\" " + particular + ">" +
                         dtGridTbl.Rows[i]["INVOICE_DATE"].ToString() +
                         "</td>");
                    }
                    if ((dtRECGridTbl.Rows[0]["Pay_To_ID"].ToString()) != "6")
                    {
                        strHTML.Append("<td align=\"left\" " + RS_NO + ">" +
                        dtGridTbl.Rows[i]["RS_NO"].ToString() +
                        "</td>" +
                        "<td align=\"left\" " + Tr_Name + ">" +
                        dtGridTbl.Rows[i]["Tranche_Name"].ToString() +
                        "</td>" +
                        "<td align=\"left\" " + Note_no + ">" +
                        dtGridTbl.Rows[i]["Note_No"].ToString() +
                        "</td>"); //+
                    }
                    strHTML.Append("<td align=\"right\" " + Rep_amt + ">" +
                    dtGridTbl.Rows[i]["Amount"].ToString() +
                    "</td>" +
                    "</tr>");

                }
            }

            //Added on 29Jan2018 starts Here
            //Seperate Segment for funder details OPC Customization

            //            DataTable dtFndrDtl = dsRECP.Tables[3];

            //            if (dtFndrDtl.Rows.Count > 0)
            //            {
            //                if (Convert.ToInt32(dtGridTbl.Rows.Count) > 0)
            //                {
            //                    strHTML.Append(
            //                   "</table>" +
            //                   "</td>" +
            //                   "</tr>");
            //                }
            //                strHTML.Append(
            //                "<tr>" +
            //                "<td>Funder/Dealer Receipt Details : </td></tr>" +

            //                "<tr>" +
            //                "<td>" +
            //                "<table width=\"100%\" style=\"border-color: Black;\" border=\"1\" cellpadding=\"4\" cellspacing=\"0\">" +
            //                "<tr>" +
            //                "<td align=\"center\" >" +
            //                "<font face=\"verdana\" size=\"1\"><b>Sl.No </b></font>" +
            //                "</td>" +
            //                "<td align=\"center\">" +
            //                "<font face=\"verdana\" size=\"1\"><b>Receipt Type</b></font>" +
            //                "</td>" +
            //                "<td align=\"center\" >" +
            //                "<font face=\"verdana\" size=\"1\"><b>Particulars</b></font>" +
            //                "</td>" +
            //                "<td align=\"center\">" +
            //                "<font face=\"verdana\" size=\"1\"><b>Vendor Name</b></font>" +
            //                "</td>" +
            //                "<td align=\"center\">" +
            //                "<font face=\"verdana\" size=\"1\"><b>PO No</b></font>" +
            //                "</td>" +
            //                "<td align=\"center\">" +
            //                "<font face=\"verdana\" size=\"1\"><b>PI NO</b></font>" +
            //                "</td>" +
            //                "<td align=\"center\">" +
            //                "<font face=\"verdana\" size=\"1\"><b>PI Date</b></font>" +
            //                "</td>" +
            //                "<td align=\"center\">" +
            //                "<font face=\"verdana\" size=\"1\"><b>VI No</b></font>" +
            //                "</td>" +
            //                "<td align=\"center\">" +
            //                "<font face=\"verdana\" size=\"1\"><b>VI Date</b></font>" +
            //                "</td>" +
            //                "<td align=\"center\">" +
            //                "<font face=\"verdana\" size=\"1\"><b>Rental Schedule No</b></font>" +
            //                "</td>" +
            //                "<td align=\"center\">" +
            //                "<font face=\"verdana\" size=\"1\"><b>Tranche Name</b></font>" +
            //                "</td>" +
            //                "<td align=\"center\">" +
            //                "<font face=\"verdana\" size=\"1\"><b>Note Number</b></font>" +
            //                "</td>" +
            //                "<td align=\"Right\">" +
            //                "<font face=\"verdana\" size=\"1\"><b>Receipt Amount</b></font>" +
            //                "</td>" +
            //                "</tr>");



            //                for (int i = 0; i <= dtFndrDtl.Rows.Count - 1; i++)
            //                {
            //                    strHTML.Append("<tr>" +
            //                    "<td align=\"center\">" +
            //                    (i + 1).ToString() +
            //                    "</td>" +
            //                    "<td>" +
            //                    dtFndrDtl.Rows[i]["Note_Number"].ToString() +
            //                    "</td>" +
            //                    "<td >" +
            //                    dtFndrDtl.Rows[i]["AccountDescription"].ToString() +
            //                    "</td>" +
            //                     "<td>" +
            //                    dtFndrDtl.Rows[i]["Note_Number"].ToString() +
            //                    "</td>" +
            //                    "<td >" +
            //                    dtFndrDtl.Rows[i]["AccountDescription"].ToString() +
            //                    "</td>" +
            //                     "<td>" +
            //                    dtFndrDtl.Rows[i]["Note_Number"].ToString() +
            //                    "</td>" +
            //                    "<td >" +
            //                    dtFndrDtl.Rows[i]["AccountDescription"].ToString() +
            //                    "</td>" +
            //                     "<td>" +
            //                    dtFndrDtl.Rows[i]["Note_Number"].ToString() +
            //                    "</td>" +
            //                    "<td>" +
            //                    dtFndrDtl.Rows[i]["AccountDescription"].ToString() +
            //                    "</td>" +
            //                     "<td>" +
            //                    dtFndrDtl.Rows[i]["Note_Number"].ToString() +
            //                    "</td>" +
            //                    "<td >" +
            //                    dtFndrDtl.Rows[i]["AccountDescription"].ToString() +
            //                    "</td>" +
            //                     "<td>" +
            //                    dtFndrDtl.Rows[i]["Note_Number"].ToString() +
            //                    "</td>" +
            //                    "<td >" +
            //                    dtFndrDtl.Rows[i]["AccountDescription"].ToString() +
            //                    "</td>" +
            //                    "<td align=\"right\">" +
            //                    dtFndrDtl.Rows[i]["AMOUNT"].ToString() +
            //                    "</td>" +
            //                    "</tr>");
            //                }

            //            }

            //            //Added on 29Jan2018 ends Here

            //            DataTable dtGridTblAddLess = dsRECP.Tables[2];

            //            if (dtGridTblAddLess.Rows.Count > 0)
            //            {
            //                strHTML.Append(
            //                  "</table>" +
            //"</td>" +
            //"</tr>");
            //                strHTML.Append(
            //                        "<tr>" +
            //      "<td>Add/Less Details : </td></tr>" +

            //                      "<tr>" +
            //      "<td>" +
            //          "<table width=\"100%\" style=\"border-color: Black;\" border=\"1\" cellpadding=\"4\" cellspacing=\"0\">" +
            //           "<tr>" +
            //                  "<td align=\"center\" >" +
            //                      "<font face=\"verdana\" size=\"1\"><b>Sl.No </b></font>" +
            //                  "</td>" +
            //                    "<td align=\"center\" >" +
            //                      "<font face=\"verdana\" size=\"1\"><b>Add or Less</b></font>" +
            //                  "</td>" +
            //                  "<td align=\"center\">" +
            //                      "<font face=\"verdana\" size=\"1\"><b>Prime Account</b></font>" +
            //                  "</td>" +
            //                    //"<td align=\"center\">" +
            //                    //    "<font face=\"verdana\" size=\"1\"><b>Sub Account</b></font>" +
            //                    //"</td>" +
            //                  "<td align=\"center\" colspan=\"2\">" +
            //                       "<font face=\"verdana\" size=\"1\"><b>Particulars</b></font>" +
            //                  "</td>" +
            //                  "<td align=\"center\">" +
            //                      "<font face=\"verdana\" size=\"1\"><b>Amount</b></font>" +
            //                  "</td>" +
            //                      "</tr>");



            //                for (int i = 0; i <= dtGridTblAddLess.Rows.Count - 1; i++)
            //                {

            //                    string strSubAccount = dtGridTblAddLess.Rows[i]["SubAccountNo"].ToString().ToLower();
            //                    if (strSubAccount == dtGridTblAddLess.Rows[i]["PrimeAccountNo"].ToString().ToLower() + "dummy")
            //                    {
            //                        strSubAccount = "";
            //                    }

            //                    strHTML.Append("<tr>" +
            //                       "<td align=\"center\">" +
            //                           (i + 1).ToString() +
            //                       "</td>" +
            //                        "<td>" +
            //                           dtGridTblAddLess.Rows[i]["ADDLESS"].ToString() +
            //                       "</td>" +
            //                       "<td>" +
            //                           dtGridTblAddLess.Rows[i]["PrimeAccountNo"].ToString() +
            //                       "</td>" +
            //                        //"<td>" +
            //                        //    strSubAccount +
            //                        //"</td>" +
            //                       "<td colspan=\"2\">" +
            //                           dtGridTblAddLess.Rows[i]["TAXTYPE"].ToString() +
            //                       "</td>" +
            //                       "<td align=\"right\">" +
            //                           dtGridTblAddLess.Rows[i]["AMOUNT"].ToString() +
            //                       "</td>" +
            //                   "</tr>");
            //                }

            //                strHTML.Append(
            //                "<tr>" +
            //                    "<td>" +
            //                    "</td>" +
            //                    "<td>" +
            //                    "</td>" +
            //                    "<td>" +
            //                    "</td>" +
            //                    // "<td>" +
            //                    //"</td>" +
            //                    "<td colspan=\"2\">" +
            //                        "Total Amount" +
            //                    "</td>" +
            //                    "<td align=\"right\">" +
            //                        drHDR["TOTAL_RECEIPT_AMOUNT"].ToString() +
            //                    "</td>" +
            //                "</tr>" +
            //            "</table>" +
            //        "</td>" +
            //    "</tr>");

            //            }
            //            else
            //            {
            if ((dtRECGridTbl.Rows[0]["Pay_To_ID"].ToString()) == "5" || (dtRECGridTbl.Rows[0]["Pay_To_ID"].ToString()) == "7")
            {
                if (dtGridTbl.Columns.Contains("INVOICE_NO"))
                {
                    strHTML.Append(
                   "<tr>" +
                       "<td align=\"right\" colspan=\"7\">" +
                           "Total Amount " +
                       "</td>" +
                       "<td align=\"right\">" +
                           drHDR["TOTAL_RECEIPT_AMOUNT"].ToString() +
                       "</td>" +
                   "</tr>" +
               "</table>" +
           "</td>" +
       "</tr>");
                }
                else
                {
                    strHTML.Append(
                    "<tr>" +
                        "<td align=\"right\" colspan=\"5\"" + sno + ">" +
                            "Total Amount " +
                        "</td>" +
                        "<td align=\"right\">" +
                            drHDR["TOTAL_RECEIPT_AMOUNT"].ToString() +
                        "</td>" +
                    "</tr>" +
                "</table>" +
            "</td>" +
        "</tr>");
                }
            }
            else if ((dtRECGridTbl.Rows[0]["Pay_To_ID"].ToString()) == "6")
            {
                strHTML.Append(
                "<tr>" +
                    "<td align=\"right\" colspan=\"2\" " + sno + ">" +
                        "Total Amount " +
                    "</td>" +
                    "<td align=\"right\">" +
                        drHDR["TOTAL_RECEIPT_AMOUNT"].ToString() +
                    "</td>" +
                "</tr>" +
            "</table>" +
        "</td>" +
    "</tr>");
            }
            else if (((dtRECGridTbl.Rows[0]["Pay_To_ID"].ToString()) == "8") && !dtGridTbl.Columns.Contains("Vendor_Name"))
            {
                if (dtGridTbl.Columns.Contains("INVOICE_NO"))
                {
                    strHTML.Append(
                    "<tr>" +
                        "<td align=\"right\" colspan=\"7\" >" +
                            "Total Amount " +
                        "</td>" +
                        "<td align=\"right\">" +
                            drHDR["TOTAL_RECEIPT_AMOUNT"].ToString() +
                        "</td>" +
                    "</tr>" +
                "</table>" +
            "</td>" +
        "</tr>");
                }
                else
                {
                    strHTML.Append(
                    "<tr>" +
                        "<td align=\"right\" colspan=\"5\" " + sno + ">" +
                            "Total Amount " +
                        "</td>" +
                        "<td align=\"right\">" +
                            drHDR["TOTAL_RECEIPT_AMOUNT"].ToString() +
                        "</td>" +
                    "</tr>" +
                "</table>" +
            "</td>" +
        "</tr>");
                }
            }

            else if (((dtRECGridTbl.Rows[0]["Pay_To_ID"].ToString()) == "8") && dtGridTbl.Columns.Contains("Vendor_Name"))
            {
                strHTML.Append(
                "<tr>" +
                    "<td align=\"right\" colspan=\"11\" " + sno + ">" +
                        "Total Amount " +
                    "</td>" +
                    "<td align=\"right\">" +
                        drHDR["TOTAL_RECEIPT_AMOUNT"].ToString() +
                    "</td>" +
                "</tr>" +
            "</table>" +
        "</td>" +
    "</tr>");
            }
            else
            {
                strHTML.Append(
                "<tr>" +
                    "<td align=\"right\" colspan=\"11\"" + sno + ">" +
                        "Total Amount " +
                    "</td>" +
                    "<td align=\"right\">" +
                        drHDR["TOTAL_RECEIPT_AMOUNT"].ToString() +
                    "</td>" +
                "</tr>" +
            "</table>" +
        "</td>" +
    "</tr>");
            }

            if (!string.IsNullOrEmpty(drHDR["INSTRUMENT_NO"].ToString()))
            {
                strHTML.Append("<tr>" + "<td>" +
                        "*Local / Outstation cheques are subject to realization." +

                    "</td>" +
                "</tr>");
            }
            strHTML.Append(
            "<tr>" +
                "<td>" +
                    "<table width=\"100%\">" +
                     "<tr>" +
                     "<td width=\"300%\" colspan=\"2\">" +
                     "<table><tr><td>Prepared by</td><td>Approved by</td><td></td></tr><tr><td>" + ObjUserInfo.ProUserNameRW.ToString() + "<br />" +
                                DateTime.Now.ToString(strDateFormat) + " " + DateTime.Now.ToString("hh:mm tt") + "</td><td>" + "" + "</td><td></td></tr></table>" +
                     "</td>" +
                       "</tr>" +
                        "<tr>" +
                //"<td>" +
                //    ObjUserInfo.ProUserNameRW.ToString() + "<br />" +
                //    DateTime.Now.ToString(strDateFormat) + " " + DateTime.Now.ToString("hh:mm tt") +
                //"</td>" +
                            "<td width=\"60%\">" +
                            "</td>" +
                            "<td align=\"center\">" +
                                "For " + drHDR["COMPANY_NAME"].ToString() +
                            "</td>" +
                        "</tr>" +
                        "<tr>" +
                            "<td>" +
                            "</td>" +
                            "<td width=\"60%\">" +
                            "</td>" +
                            "<td>" +
                            "</td>" +
                        "</tr>" +
                        "<tr>" +
                            "<td>" +
                            "</td>" +
                            "<td widh=\"60%\">" +
                            "</td>" +
                            "<td align=\"center\">" +
                                "AUTHORISED SIGNATORY" +
                            "</td>" +
                        "</tr>" +
                    "</table>" +
                "</td>" +
            "</tr>" +
        "</table> </font>");
        }

        //strHTML.Append(strHTML);

        return strHTML.ToString();

    }
    
//    protected string FunGetHTMLForRECP(string strReceiptProcessID)
//    {
//        StringBuilder strHTML = new StringBuilder();
//        Procparam = new Dictionary<string, string>();
//        Procparam.Add("@Company_ID", intCompanyID.ToString());
//        Procparam.Add("@Receipt_ID", strReceiptProcessID);
//        Procparam.Add("@Is_Print", "1");
//        DataSet dsRECP = Utility.GetDataset("S3G_CLN_GETRECEIPT_RPT", Procparam);           //Modified for OPC on 14Nov2014

//        DataTable dtHDR = dsRECP.Tables[0];

//        if (dtHDR.Rows.Count > 0)
//        {
//            DataRow drHDR = dtHDR.Rows[0];

//            strHTML.Append(" <font size=\"1\"  color=\"black\" face=\"verdana\">" +
//                 "<table width=\"85%\">" +
//                     "<tr>" +
//                     "<td width=\"100%\" align=\"right\">" +
//                //"<b>" + Convert.ToString(drHDR["Duplicate"]) + "</b>" +
//                     "<b>" + " " + "</b>" +
//                     "</td>" +
//                    "</tr>" +
//                    "</table>" +
//        "<table width=\"85%\">" +
//        "<tr>" +
//        "<td width=\"100%\">" +
//            "<table border=\"0\" width=\"100%\">" +
//                "<tr>" +
//                    "<td align=\"center\">" +
//                       "<b>" + drHDR["COMPANY_NAME"].ToString() + "</b>" +
//                    "</td>" +
//                "</tr>" +
//                "<tr>" +
//                    "<td align=\"center\">" +
//                        "<b>" + drHDR["Address"] + "</b>" +
//                        "<br />" +
//                    "</td>" +
//                "</tr>" +
//                "<tr>" +
//                    "<td align=\"center\">" +
//                        "<b> ");

//            if (drHDR["Print_Count"].ToString() == "0")
//            {
//                strHTML.Append("RECEIPT");
//            }
//            else
//            {
//                //strHTML.Append("RECEIPT - Duplicate Copy");
//                strHTML.Append("RECEIPT");
//            }
//            strHTML.Append("</b>" +
//                "</td>" +
//            "</tr>" +
//        "</table>" +
//    "</td>" +
//"</tr>" +
//"<tr>" +
//    "<td>" +
//        "<table width=\"100%\">" +
//            "<tr>" +
//                "<td align=\"left\" valign=\"top\">" +
//                  "<table align=\"left\" valign=\"top\" cellpadding=\"0\" cellspacing=\"0\">" +
//                     "<tr>" +
//                        "<td>" +
//                            drHDR["CUSTOMER_NAME"].ToString() + " (" + drHDR["CUSTOMER_CODE"].ToString() + ")" +
//                        "</td>" +
//                    "</tr>" +
//                    "<tr>" +
//                        "<td>" +
//                            drHDR["COMM_ADDRESS1"].ToString() +
//                        "</td>" +
//                   " </tr>" +
//                    "<tr>" +
//                        "<td>" +
//                            drHDR["COMM_ADDRESS2"].ToString() +
//                        "</td>" +
//                    "</tr>" +
//                    "<tr>" +
//                        "<td>" +
//                            drHDR["COMM_CITY"].ToString() +
//                        "</td>" +
//                    "</tr>" +
//                    "<tr>" +
//                        "<td>" +
//                            drHDR["STATECODE"].ToString() +
//                        "</td>" +
//                    "</tr>" +
//                    "</table>" +
//                  "</td>" +
//                  "<td>" +
//                   "<table width=\"100%\" align=\"right\" cellpadding=\"0\" cellspacing=\"0\">" +
//                      "<tr>" +
//                             "<td align=\"left\">" +
//                                "Location Name" +
//                             "</td>" +
//                             "<td align=\"center\">" +
//                                ":" +
//                             "</td>" +
//                             "<td align=\"left\">" + //drHDR["LOCATION_CODE"].ToString() + " - " + 
//                               drHDR["LOCATION_NAME"].ToString() +
//                             "</td>" +
//                     "</tr>" +
//                     "<tr>" +
//                           "<td align=\"left\">" +
//                             "Receipt No." +
//                           "</td>" +
//                           "<td align=\"center\">" +
//                             ":" +
//                           "</td>" +
//                           "<td align=\"left\">" +
//                            drHDR["RECEIPT_NO"].ToString() +
//                           "</td>" +
//                    "</tr>" +
//                    "<tr>" +
//                          "<td align=\"left\">" +
//                            "Date" +
//                          "</td>" +
//                          "<td align=\"center\">" +
//                            ":" +
//                          "</td>" +
//                          "<td align=\"left\">" +
//                            drHDR["VALUE_DATE"].ToString() +
//                          "</td>" +
//                  "</tr>" +
//                  "<tr>" +
//                        "<td align=\"left\">" +
//                            "Page" +
//                        "</td>" +
//                        "<td align=\"center\">" +
//                            ":" +
//                       " </td>" +
//                        "<td align=\"left\">" +
//                            "1 of 1" +
//                        "</td>" +
//                 "</tr>" +
//                 "<tr>" +
//                        "<td align=\"left\">" +
//                            "Line of Business" +
//                        "</td>" +
//                        "<td align=\"center\">" +
//                           " :" +
//                        "</td>" +
//                        "<td align=\"left\">" +
//                           drHDR["LOB_Name"].ToString() +
//                        "</td>" +
//                "</tr>" +
//           "</table>" +
//       " </td>" +
//      "</tr>" +
//    "</table>" +
//  " </td>" +
//"</tr>" +
//"<tr>" +
//    "<td>" +
//        "<table width=\"100%\">" +
//            "<tr>" +
//                "<td>" +
//                    "Received with thanks from " + drHDR["CUSTOMER_NAME"].ToString() +
//                    " a sum of Rs." + drHDR["TOTAL_RECEIPT_AMOUNT"].ToString() + " (Rupees " +
//                    Convert.ToDecimal(drHDR["TOTAL_RECEIPT_AMOUNT"].ToString()).GetAmountInWords() + ") " +
//                    " by " + drHDR["PAYMENT_MODE_DESC1"].ToString());

//            if (!string.IsNullOrEmpty(drHDR["INSTRUMENT_NO"].ToString()))
//            {
//                strHTML.Append(" number " + drHDR["INSTRUMENT_NO"].ToString());
//            }
//            if (!string.IsNullOrEmpty(drHDR["INSTRUMENT_DATE"].ToString()))
//            {
//                strHTML.Append(" dated " + drHDR["INSTRUMENT_DATE"].ToString() + " drawn on " + drHDR["DRAWEE_BANK_Name"].ToString() +
//                 " " + drHDR["DRAWEE_BANK_LOCATION"].ToString());
//            }
//            strHTML.Append(" towards the below account(s)." +

//                "</td>" +
//            "</tr>" +
//        "</table>" +
//    "</td>" +
//"</tr>");


//            DataTable dtGridTbl = dsRECP.Tables[1];

//            if (Convert.ToInt32(dtGridTbl.Rows.Count) > 0)
//            {
//                strHTML.Append(
//                "<tr>" +
//                "<td>" +
//                "<table width=\"100%\" style=\"border-color: Black;\" border=\"1\" cellpadding=\"4\" cellspacing=\"0\">" +
//                    "<tr>" +
//                        "<td align=\"center\" >" +
//                            "<font face=\"verdana\" size=\"1\"><b>Sl.No </b></font>" +
//                        "</td>" +
//                        "<td align=\"center\">" +
//                            "<font face=\"verdana\" size=\"1\"><b>Rental Schedule No</b></font>" +
//                        "</td>" +
//                    //"<td align=\"center\">" +
//                    //    "<font face=\"verdana\" size=\"1\"><b>Sub Account</b></font>" +
//                    //"</td>" +
//                        "<td align=\"center\" colspan=\"2\">" +
//                            "<font face=\"verdana\" size=\"1\"><b>Particulars</b></font>" + /* Changed by PSK on 19-Jan-2011 - For UAT Issue No.RCT_006 */
//                        "</td>" +
//                        "<td align=\"center\">" +
//                            "<font face=\"verdana\" size=\"1\"><b>Amount</b></font>" +
//                        "</td>" +
//                    "</tr>");

//                for (int i = 0; i <= dtGridTbl.Rows.Count - 1; i++)
//                {
//                    string strSubAccount = dtGridTbl.Rows[i]["SubAccountNo"].ToString().ToLower();
//                    if (strSubAccount == dtGridTbl.Rows[i]["PrimeAccountNo"].ToString().ToLower() + "dummy")
//                    {
//                        strSubAccount = "";
//                    }

//                    strHTML.Append("<tr>" +
//                    "<td align=\"center\">" +
//                    (i + 1).ToString() +
//                    "</td>" +
//                    "<td>" +
//                    dtGridTbl.Rows[i]["PrimeAccountNo"].ToString() +
//                    "</td>" +
//                        //"<td>" +
//                        //    strSubAccount +
//                        //"</td>" +
//                    "<td colspan=\"2\">" +
//                    dtGridTbl.Rows[i]["AccountDescription"].ToString() +
//                    "</td>" +
//                    "<td align=\"right\">" +
//                    dtGridTbl.Rows[i]["Amount"].ToString() +
//                    "</td>" +
//                    "</tr>");
//                }
//            }

//            //Added on 29Jan2018 starts Here
//            //Seperate Segment for funder details OPC Customization

//            DataTable dtFndrDtl = dsRECP.Tables[3];

//            if (dtFndrDtl.Rows.Count > 0)
//            {
//                if (Convert.ToInt32(dtGridTbl.Rows.Count) > 0)
//                {
//                    strHTML.Append(
//                   "</table>" +
//                   "</td>" +
//                   "</tr>");
//                }
//                strHTML.Append(
//                "<tr>" +
//                "<td>Funder/Dealer Receipt Details : </td></tr>" +

//                "<tr>" +
//                "<td>" +
//                "<table width=\"100%\" style=\"border-color: Black;\" border=\"1\" cellpadding=\"4\" cellspacing=\"0\">" +
//                "<tr>" +
//                "<td align=\"center\" >" +
//                "<font face=\"verdana\" size=\"1\"><b>Sl.No </b></font>" +
//                "</td>" +
//                "<td align=\"center\">" +
//                "<font face=\"verdana\" size=\"1\"><b>Note Number</b></font>" +
//                "</td>" +
//                "<td align=\"center\" colspan=\"2\">" +
//                "<font face=\"verdana\" size=\"1\"><b>Particulars</b></font>" +
//                "</td>" +
//                "<td align=\"center\">" +
//                "<font face=\"verdana\" size=\"1\"><b>Amount</b></font>" +
//                "</td>" +
//                "</tr>");



//                for (int i = 0; i <= dtFndrDtl.Rows.Count - 1; i++)
//                {
//                    strHTML.Append("<tr>" +
//                    "<td align=\"center\">" +
//                    (i + 1).ToString() +
//                    "</td>" +
//                    "<td>" +
//                    dtFndrDtl.Rows[i]["Note_Number"].ToString() +
//                    "</td>" +
//                    "<td colspan=\"2\">" +
//                    dtFndrDtl.Rows[i]["AccountDescription"].ToString() +
//                    "</td>" +
//                    "<td align=\"right\">" +
//                    dtFndrDtl.Rows[i]["AMOUNT"].ToString() +
//                    "</td>" +
//                    "</tr>");
//                }

//            }

//            //Added on 29Jan2018 ends Here

//            DataTable dtGridTblAddLess = dsRECP.Tables[2];

//            if (dtGridTblAddLess.Rows.Count > 0)
//            {
//                strHTML.Append(
//                  "</table>" +
//"</td>" +
//"</tr>");
//                strHTML.Append(
//                        "<tr>" +
//      "<td>Add/Less Details : </td></tr>" +

//                      "<tr>" +
//      "<td>" +
//          "<table width=\"100%\" style=\"border-color: Black;\" border=\"1\" cellpadding=\"4\" cellspacing=\"0\">" +
//           "<tr>" +
//                  "<td align=\"center\" >" +
//                      "<font face=\"verdana\" size=\"1\"><b>Sl.No </b></font>" +
//                  "</td>" +
//                    "<td align=\"center\" >" +
//                      "<font face=\"verdana\" size=\"1\"><b>Add or Less</b></font>" +
//                  "</td>" +
//                  "<td align=\"center\">" +
//                      "<font face=\"verdana\" size=\"1\"><b>Rental Schedule No</b></font>" +
//                  "</td>" +
//                    //"<td align=\"center\">" +
//                    //    "<font face=\"verdana\" size=\"1\"><b>Sub Account</b></font>" +
//                    //"</td>" +
//                  "<td align=\"center\" colspan=\"2\">" +
//                       "<font face=\"verdana\" size=\"1\"><b>Particulars</b></font>" +
//                  "</td>" +
//                  "<td align=\"center\">" +
//                      "<font face=\"verdana\" size=\"1\"><b>Amount</b></font>" +
//                  "</td>" +
//                      "</tr>");



//                for (int i = 0; i <= dtGridTblAddLess.Rows.Count - 1; i++)
//                {

//                    string strSubAccount = dtGridTblAddLess.Rows[i]["SubAccountNo"].ToString().ToLower();
//                    if (strSubAccount == dtGridTblAddLess.Rows[i]["PrimeAccountNo"].ToString().ToLower() + "dummy")
//                    {
//                        strSubAccount = "";
//                    }

//                    strHTML.Append("<tr>" +
//                       "<td align=\"center\">" +
//                           (i + 1).ToString() +
//                       "</td>" +
//                        "<td>" +
//                           dtGridTblAddLess.Rows[i]["ADDLESS"].ToString() +
//                       "</td>" +
//                       "<td>" +
//                           dtGridTblAddLess.Rows[i]["PrimeAccountNo"].ToString() +
//                       "</td>" +
//                        //"<td>" +
//                        //    strSubAccount +
//                        //"</td>" +
//                       "<td colspan=\"2\">" +
//                           dtGridTblAddLess.Rows[i]["TAXTYPE"].ToString() +
//                       "</td>" +
//                       "<td align=\"right\">" +
//                           dtGridTblAddLess.Rows[i]["AMOUNT"].ToString() +
//                       "</td>" +
//                   "</tr>");
//                }

//                strHTML.Append(
//                "<tr>" +
//                    "<td>" +
//                    "</td>" +
//                    "<td>" +
//                    "</td>" +
//                    "<td>" +
//                    "</td>" +
//                    // "<td>" +
//                    //"</td>" +
//                    "<td colspan=\"2\">" +
//                        "Total Amount" +
//                    "</td>" +
//                    "<td align=\"right\">" +
//                        drHDR["TOTAL_RECEIPT_AMOUNT"].ToString() +
//                    "</td>" +
//                "</tr>" +
//            "</table>" +
//        "</td>" +
//    "</tr>");

//            }
//            else
//            {
//                strHTML.Append(
//                "<tr>" +
//                    "<td>" +
//                    "</td>" +
//                    "<td>" +
//                    "</td>" +
//                    //"<td>" +
//                    //"</td>" +
//                    "<td colspan=\"2\">" +
//                        "Total Amount" +
//                    "</td>" +
//                    "<td align=\"right\">" +
//                        drHDR["TOTAL_RECEIPT_AMOUNT"].ToString() +
//                    "</td>" +
//                "</tr>" +
//            "</table>" +
//        "</td>" +
//    "</tr>");
//            }




//            if (!string.IsNullOrEmpty(drHDR["INSTRUMENT_NO"].ToString()))
//            {
//                strHTML.Append("<tr>" + "<td>" +
//                        "*Local / Outstation cheques are subject to realization." +

//                    "</td>" +
//                "</tr>");
//            }
//            strHTML.Append(
//            "<tr>" +
//                "<td>" +
//                    "<table width=\"100%\">" +
//                        "<tr>" +
//                            "<td>" +
//                                ObjUserInfo.ProUserNameRW.ToString() + "<br />" +
//                                DateTime.Now.ToString(strDateFormat) + " " + DateTime.Now.ToString("hh:mm tt") +
//                            "</td>" +
//                            "<td width=\"60%\">" +
//                            "</td>" +
//                            "<td align=\"center\">" +
//                                "For " + drHDR["COMPANY_NAME"].ToString() +
//                            "</td>" +
//                        "</tr>" +
//                        "<tr>" +
//                            "<td>" +
//                //DateTime.Now.ToString(strDateFormat) + " " + DateTime.Now.ToString("hh:mm tt") +
//                            "</td>" +
//                            "<td width=\"60%\">" +
//                            "</td>" +
//                            "<td>" +
//                            "</td>" +
//                        "</tr>" +
//                        "<tr>" +
//                            "<td>" +
//                            "</td>" +
//                            "<td widh=\"60%\">" +
//                            "</td>" +
//                            "<td align=\"center\">" +
//                                "AUTHORISED SIGNATORY" +
//                            "</td>" +
//                        "</tr>" +
//                    "</table>" +
//                "</td>" +
//            "</tr>" +
//        "</table> </font>");
//        }

//        //strHTML.Append(strHTML);

//        return strHTML.ToString();
//    }
    
    //Modified here by Arunkumar K for CR OPC_CR_052 Receipt Print
    private void FunPriCalculateAmount()
    {
        try
        {
            double dblTotalAmount, dblAddAmount, dblLessAmount, dblFunderAmount;
            dblTotalAmount = (Convert.ToString(txtTotalAmount.Text) == "") ? 0 : Convert.ToDouble(txtTotalAmount.Text);
            dblAddAmount = (Convert.ToString(txtAddAmount.Text) == "") ? 0 : Convert.ToDouble(txtAddAmount.Text);
            dblLessAmount = (Convert.ToString(txtLessAmount.Text) == "") ? 0 : Convert.ToDouble(txtLessAmount.Text);
            dblFunderAmount = (Convert.ToString(lblFunderRcptAmount.Text) == "") ? 0 : Convert.ToDouble(lblFunderRcptAmount.Text);

            dblTotalAmount = (dblTotalAmount + dblAddAmount + dblFunderAmount) - dblLessAmount;
            lblTotalRcptAmt.Text = Convert.ToString(dblTotalAmount);
            txtDocAmount.Text = Convert.ToString(Math.Round(dblTotalAmount, 0));
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriEnableDisableShow()
    {
        try
        {
            Int32 intRcptType = Convert.ToInt32(ddlReceiptType.SelectedValue);
            btnShow.Visible = (intRcptType == 1) ? true : false;
            btnPendingInstallments.Visible = (intRcptType == 3 || intRcptType == 7 || intRcptType == 8 || intRcptType == 9) ? true : false;
            btnShowFndrDues.Visible = (intRcptType == 2 || intRcptType == 7) ? true : false;
            btnMapInvoice.Visible = (intRcptType == 8) ? true : false;
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriEnblDsblPnl()
    {
        try
        {
            grvFunderReceipt.Visible = (Convert.ToInt32(ddlReceiptType.SelectedValue) == 2 || Convert.ToInt32(ddlReceiptType.SelectedValue) == 7) ? true : false;
            if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 2 || Convert.ToInt32(ddlReceiptType.SelectedValue) == 7 || Convert.ToInt32(ddlReceiptType.SelectedValue) == 8)
            {
                pnlFunderRcpt.GroupingText = (Convert.ToInt32(ddlReceiptType.SelectedValue) == 8) ? "Invoice Details" : "Funder Receipt Details";
                FunPriBindReceiptGridDtls(3, (DataTable)ViewState["FunderRcptDtls"]);
            }
            else
            {
                FunPriBindReceiptGridDtls(3, (DataTable)ViewState["DefaultFunderRcptDtls"]);
            }
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriMapInvoice()
    {
        try
        {
            ProPageNumRW = 1;
            ddlSearchType.SelectedValue = "0";
            txtSearchValue.Text = "";
            FunPriBindGrid();
            moePoInvoiceDtls.Show();
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private bool FunPriCheckTCSLimit()
    {
        bool blnRslt = true;
        try
        {
            DataTable dtAddLess = (DataTable)ViewState["AddLessRcptDtls"];
            DataRow[] drTCS = dtAddLess.Select("Cashflow_Flag_ID In(23, 105) and Amount = 0");

            if (drTCS.Length > 0)
            {
                if (Procparam != null)
                    Procparam.Clear();
                else
                    Procparam = new Dictionary<string, string>();

                DataTable dt = (DataTable)ViewState["RSRcptDtls"];
                double dblAmount = Convert.ToDouble(dt.Compute("sum(Amount)", "Amount >=0"));

                Procparam.Add("@OPTION", "32");
                Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
                Procparam.Add("@Customer_ID", Convert.ToString(ViewState["CustomerID"]));
                Procparam.Add("@Section_No", Convert.ToString(drTCS[0]["Section_No"]));
                Procparam.Add("@XMLFunderDue", Utility.FunPubFormXml(dt, true));

                Procparam.Add("@XMLAddLess", Utility.FunPubFormXml(dtAddLess, true));

                DataTable dtTCS = Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);

                if (Convert.ToInt32(dtTCS.Rows[0]["Error_Code"]) == 1)
                {
                    blnRslt = false;
                    if (Convert.ToInt32(dtTCS.Rows[0]["Flag"]) == 23)
                        Utility.FunShowAlertMsg(this, "TCS Amount exceeds Rental Balance Limit(" + Convert.ToInt32(dtTCS.Rows[0]["TCS_Amount"]) + ").");
                    if (Convert.ToInt32(dtTCS.Rows[0]["Flag"]) == 105)
                        Utility.FunShowAlertMsg(this, "TCS Amount exceeds AMF Balance Limit(" + Convert.ToInt32(dtTCS.Rows[0]["TCS_Amount"]) + ").");
                }
            }
        }
        catch (Exception objException)
        {
            blnRslt = false;
            throw objException;
        }
        return blnRslt;
    }

    private void FunPriInsInvDtl(DataTable dtInvoice)
    {
        try
        {
            FunPriClrDfltParam();
            Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
            Procparam.Add("@Receipt_Type", Convert.ToString(ddlReceiptType.SelectedValue));
            Procparam.Add("@User_ID", Convert.ToString(intUserID));
            Procparam.Add("@XMLPO_DTL", Utility.FunPubFormXml(dtInvoice, true));
            if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 1 || Convert.ToInt32(ddlReceiptType.SelectedValue) == 8)  //Lessee to OPC Purchase Advance
            {
                Procparam.Add("@Customer_ID", Convert.ToString(ViewState["CustomerID"]));
                if (Convert.ToInt64(ddlReceiptTo.SelectedValue) > 0)
                    Procparam.Add("@Vendor_ID", Convert.ToString(ddlReceiptTo.SelectedValue));
            }
            Procparam.Add("@Option", "1");
            Procparam.Add("@Is_Added", "0");

            DataSet dsRcpt = Utility.GetDataset("S3G_CLN_Insert_TMPRCPTPODTL", Procparam);
            FunPriBindGrid();
            if (dsRcpt != null && dsRcpt.Tables.Count > 1)
                FunPriAssignInvTtl(1, dsRcpt.Tables[2]);
        }
        catch (Exception ObjException)
        {
            throw ObjException;
        }
    }

    private void FunPriDeleteInvDtl(DataTable dtInvoice)
    {
        try
        {
            FunPriClrDfltParam();
            Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
            Procparam.Add("@Receipt_Type", Convert.ToString(ddlReceiptType.SelectedValue));
            Procparam.Add("@User_ID", Convert.ToString(intUserID));
            Procparam.Add("@XMLPO_DTL", Utility.FunPubFormXml(dtInvoice, true));
            if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 1 || Convert.ToInt32(ddlReceiptType.SelectedValue) == 8)  //Lessee to OPC Purchase Advance
            {
                Procparam.Add("@Customer_ID", Convert.ToString(ViewState["CustomerID"]));
                if (Convert.ToInt64(ddlReceiptTo.SelectedValue) > 0)
                    Procparam.Add("@Vendor_ID", Convert.ToString(ddlReceiptTo.SelectedValue));
            }
            Procparam.Add("@Option", "4");
            Procparam.Add("@Is_Added", "0");

            DataSet dsRcpt = Utility.GetDataset("S3G_CLN_Insert_TMPRCPTPODTL", Procparam);
            FunPriBindGrid();
            if (dsRcpt != null && dsRcpt.Tables.Count > 1)
                FunPriAssignInvTtl(1, dsRcpt.Tables[2]);
        }
        catch (Exception ObjException)
        {
            throw ObjException;
        }
    }

    private void FunPriClrDfltParam()
    {
        try
        {
            if (Procparam != null)
                Procparam.Clear();
            else
                Procparam = new Dictionary<string, string>();
        }
        catch (Exception ObjException)
        {
            throw ObjException;
        }
    }

    private void FunPriClearTmpInvDtl()
    {
        try
        {
            FunPriClrDfltParam();
            Procparam.Add("@OPTION", "27");
            Procparam.Add("User_ID", Convert.ToString(intUserID));
            Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam);
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriEnblDsblDpstBkDtl(bool blnValue)
    {
        try
        {
            txtInstrumentDate.Visible = txtInstrumentNo.Visible = txtPaymentGatewayRefNo.Visible = txtAckNo.Visible = ddlDraweeBank.Visible =
            lblInstrumentNo.Visible = lblInstrumentDate.Visible = lblDraweeBank.Visible = lblPaymentGatewayRefNo.Visible = lblAckNo.Visible = !blnValue;

            lblDepositBank.Visible = lblDepAcctnumber.Visible = lblIFSC_Code.Visible = lblGLcode.Visible = lblSLcode.Visible = lblBankbranch.Visible =
            txtIFSC_Code.Visible = txtGLCode.Visible = txtSLCode.Visible = txtBankbranch.Visible = ddlDepAcctNumber.Visible = ddlDepositBankName.Visible =
            rfvDepActNumber.Enabled = rfvDepbankname.Enabled = rfvDepGlCode.Enabled = blnValue;
        }
        catch (Exception ObjException)
        {
            throw ObjException;
        }
    }

    #region Page Methods

    private void FunPriBindGrid()
    {
        try
        {
            lblPagingErrorMessage.InnerText = "";
            //Paging Properties set
            int intTotalRecords = 0;
            bool bIsNewRow = false;
            ObjPaging.ProCompany_ID = intCompanyID;
            ObjPaging.ProUser_ID = intUserID;
            ObjPaging.ProTotalRecords = intTotalRecords;
            ObjPaging.ProCurrentPage = ProPageNumRW;
            ObjPaging.ProPageSize = ProPageSizeRW;
            ObjPaging.ProSearchValue = hdnSearch.Value;
            ObjPaging.ProOrderBy = hdnOrderBy.Value;
            FunPriGetSearchValue();
            Procparam = new Dictionary<string, string>();
            if (grvLesseeInvoiceDtls != null && grvLesseeInvoiceDtls.Rows.Count == 0)
            {
                Procparam.Add("@OPTION2", "1");
            }

            if (Convert.ToInt64(ddlTranche.SelectedValue) > 0 && Convert.ToString(ddlTranche.SelectedText) != "")
                Procparam.Add("@Tranche_ID", Convert.ToString(ddlTranche.SelectedValue));

            if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 1 || Convert.ToInt32(ddlReceiptType.SelectedValue) == 8)
            {
                Procparam.Add("@OPTION", "1");
                Procparam.Add("@Customer_ID", Convert.ToString(ViewState["CustomerID"]));
                if (Convert.ToInt64(ddlReceiptTo.SelectedValue) > 0)
                    Procparam.Add("@Vendor_ID", Convert.ToString(ddlReceiptTo.SelectedValue));
            }
            else if (Convert.ToInt32(ddlReceiptType.SelectedValue) == 4)
            {
                Procparam.Add("@OPTION", "2");
                Procparam.Add("@Funder_ID", Convert.ToString(ViewState["CustomerID"]));
                Procparam.Add("@Customer_ID", Convert.ToString(ddlReceiptTo.SelectedValue));
            }
            Procparam.Add("@Receipt_Type", Convert.ToString(ddlReceiptType.SelectedValue));
            Procparam.Add("@SearchType_Value", Convert.ToString(ddlSearchType.SelectedValue));
            Procparam.Add("@Search_Text", Convert.ToString(txtSearchValue.Text).Trim());

            grvPoInvoiceDetails.BindGridView("S3G_CLN_GETPODTLSFORRCPT", Procparam, out intTotalRecords, ObjPaging, out bIsNewRow);
            DataTable dtPOInvoiceDtls = ((DataView)grvPoInvoiceDetails.DataSource).ToTable();
            ViewState["POInvoiceDtls"] = dtPOInvoiceDtls;

            //This is to hide first row if grid is empty
            if (bIsNewRow)
            {
                grvPoInvoiceDetails.Rows[0].Visible = false;
            }

            FunPriSetSearchValue();

            ucCustomPaging.Navigation(intTotalRecords, ProPageNumRW, ProPageSizeRW);
            ucCustomPaging.setPageSize(ProPageSizeRW);

            //Paging Config End

            //Added on 16Jun2015 Starts here

            DataRow[] drCheck = dtPOInvoiceDtls.Select("Select_Indicator = 0");
            CheckBox chkSelectAllInvoice = (CheckBox)grvPoInvoiceDetails.HeaderRow.FindControl("chkSelectAllInvoice");
            chkSelectAllInvoice.Checked = (drCheck.Length > 0) ? false : true;

            //Added on 16Jun2015 Ends here

        }
        catch (FaultException<UserMgtServicesReference.ClsPubFaultException> objFaultExp)
        {
            lblPagingErrorMessage.InnerText = objFaultExp.Detail.ProReasonRW;
        }
        catch (Exception ex)
        {
            lblPagingErrorMessage.InnerText = ex.Message;
        }

    }

    #region Paging and Searching Methods For Grid


    private void FunPriGetSearchValue()
    {
        try
        {
            arrSearchVal = grvPoInvoiceDetails.FunPriGetSearchValue(arrSearchVal, intNoofSearch);
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriClearSearchValue()
    {
        try
        {
            grvPoInvoiceDetails.FunPriClearSearchValue(arrSearchVal);
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    private void FunPriSetSearchValue()
    {
        try
        {
            grvPoInvoiceDetails.FunPriSetSearchValue(arrSearchVal);
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    protected void FunProHeaderSearch(object sender, EventArgs e)
    {
        string strSearchVal = string.Empty;
        TextBox txtboxSearch;
        try
        {
            txtboxSearch = ((TextBox)sender);

            FunPriGetSearchValue();
            //Replace the corresponding fields needs to search in sqlserver

            for (int iCount = 0; iCount < arrSearchVal.Capacity; iCount++)
            {
                if (arrSearchVal[iCount].ToString() != "")
                {
                    strSearchVal += " and " + arrSortCol[iCount].ToString() + " like '%" + arrSearchVal[iCount].ToString() + "%'";
                }
            }

            if (strSearchVal.StartsWith(" and "))
            {
                strSearchVal = strSearchVal.Remove(0, 5);
            }

            hdnSearch.Value = strSearchVal;
            FunPriBindGrid();
            FunPriSetSearchValue();
            if (txtboxSearch.Text != "")
                ((TextBox)grvPoInvoiceDetails.HeaderRow.FindControl(txtboxSearch.ID)).Focus();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private string FunPriGetSortDirectionStr(string strColumn)
    {
        string strSortDirection = string.Empty;
        string strSortExpression = string.Empty;
        // By default, set the sort direction to ascending.
        string strOrderBy = string.Empty;
        strSortDirection = "DESC";
        try
        {
            // Retrieve the last strColumn that was sorted.
            // Check if the same strColumn is being sorted.
            // Otherwise, the default value can be returned.
            strSortExpression = hdnSortExpression.Value;
            if ((strSortExpression != "") && (strSortExpression == strColumn) && (hdnSortDirection.Value != null) && (hdnSortDirection.Value == "DESC"))
            {
                strSortDirection = "ASC";
            }
            // Save new values in hidden control.
            hdnSortDirection.Value = strSortDirection;
            hdnSortExpression.Value = strColumn;
            strOrderBy = " " + strColumn + " " + strSortDirection;
            hdnOrderBy.Value = strOrderBy;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        return strSortDirection;
    }

    protected void FunProSortingColumn(object sender, EventArgs e)
    {
        arrSearchVal = new ArrayList(intNoofSearch);
        var imgbtnSearch = string.Empty;
        try
        {
            LinkButton lnkbtnSearch = (LinkButton)sender;
            string strSortColName = string.Empty;
            //To identify image button which needs to get chnanged
            imgbtnSearch = lnkbtnSearch.ID.Replace("lnkbtn", "imgbtn");

            for (int iCount = 0; iCount < arrSearchVal.Capacity; iCount++)
            {
                if (lnkbtnSearch.ID == "lnkbtnSort" + (iCount + 1).ToString())
                {
                    strSortColName = arrSortCol[iCount].ToString();
                    break;
                }
            }

            string strDirection = FunPriGetSortDirectionStr(strSortColName);
            FunPriBindGrid();

            if (strDirection == "ASC")
            {
                ((ImageButton)grvPoInvoiceDetails.HeaderRow.FindControl(imgbtnSearch)).CssClass = "styleImageSortingAsc";
            }
            else
            {

                ((ImageButton)grvPoInvoiceDetails.HeaderRow.FindControl(imgbtnSearch)).CssClass = "styleImageSortingDesc";
            }
        }
        catch (FaultException<UserMgtServicesReference.ClsPubFaultException> objFaultExp)
        {
            lblPagingErrorMessage.InnerText = objFaultExp.Detail.ProReasonRW;
        }
        catch (Exception ex)
        {
            lblPagingErrorMessage.InnerText = ex.Message;
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    #endregion

    #endregion

    private void FunPriAssignInvTtl(Int32 intOption, DataTable dt)
    {
        try
        {
            if (dt != null && dt.Rows.Count > 0)
            {
                if (intOption == 1 && grvPoInvoiceDetails != null)
                {
                    grvPoInvoiceDetails.FooterRow.Visible = true;
                    Label lblFtrTtlInvAmt = (Label)grvPoInvoiceDetails.FooterRow.FindControl("lblFtrTtlInvAmt");
                    Label lblFtrTtlRcptAmt = (Label)grvPoInvoiceDetails.FooterRow.FindControl("lblFtrTtlRcptAmt");

                    lblFtrTtlInvAmt.Text = Convert.ToString(dt.Rows[0]["Ttl_Inv_Amt"]);
                    lblFtrTtlRcptAmt.Text = Convert.ToString(dt.Rows[0]["Ttl_Rcpt_Amt"]);
                }
                else if (intOption == 2 && grvLesseeInvoiceDtls != null)
                {
                    grvLesseeInvoiceDtls.FooterRow.Visible = true;
                    Label lblFtrTtlInvAmt = (Label)grvLesseeInvoiceDtls.FooterRow.FindControl("lblgdFtrTtlInvAmt");
                    Label lblFtrTtlRcptAmt = (Label)grvLesseeInvoiceDtls.FooterRow.FindControl("lblgdFtrTtlRcptAmt");

                    lblFtrTtlInvAmt.Text = Convert.ToString(dt.Rows[0]["Ttl_Inv_Amt"]);
                    lblFtrTtlRcptAmt.Text = Convert.ToString(dt.Rows[0]["Ttl_Rcpt_Amt"]);
                }
            }
        }
        catch (Exception objException)
        {
            throw objException;
        }
    }

    #endregion

    [System.Web.Services.WebMethod]
    public static string[] GetLOVListCode(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Clear();
        Procparam.Add("@Company_ID", obj_Page.ObjUserInfo.ProCompanyIdRW.ToString());
        Procparam.Add("@User_ID", obj_Page.intUserID.ToString());
        Procparam.Add("@Prefix", prefixText);

        if (Convert.ToInt32(obj_Page.ddlReceiptType.SelectedValue) == 1)
        {
            Procparam.Add("@OPTION", "3");              //Load Vendors
        }
        else if (Convert.ToInt32(obj_Page.ddlReceiptType.SelectedValue) == 2)
        {
            Procparam.Add("@OPTION", "4");              //Load Funder
        }
        else if (Convert.ToInt32(obj_Page.ddlReceiptType.SelectedValue) == 5)
        {
            Procparam.Add("@OPTION", "1");              //Load Lessee
        }
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam));

        return suggetions.ToArray();
    }

    [System.Web.Services.WebMethod]
    public static string[] GetTrancheList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Clear();
        Procparam.Add("@Company_ID", obj_Page.intCompanyID.ToString());
        Procparam.Add("@User_ID", obj_Page.intUserID.ToString());
        Procparam.Add("@Prefix", prefixText);
        Procparam.Add("@OPTION", "25");              //Load Tranche List
        //Procparam.Add("@Customer_ID", (obj_Page.ViewState["CustomerID"] != null) ? Convert.ToString(obj_Page.ViewState["CustomerID"]) : "0");

        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam));

        return suggetions.ToArray();
    }

    [System.Web.Services.WebMethod]
    public static string[] GetRSList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Clear();
        Procparam.Add("@Company_ID", obj_Page.intCompanyID.ToString());
        Procparam.Add("@User_ID", obj_Page.intUserID.ToString());
        Procparam.Add("@Prefix", prefixText);
        if (Convert.ToInt32(obj_Page.ddlReceiptType.SelectedValue) == 2)              //Load RS List for Lessee to OPC Funder Payment
        {
            Procparam.Add("@OPTION", "5");
            Procparam.Add("@Customer_ID", (obj_Page.ViewState["CustomerID"] != null) ? Convert.ToString(obj_Page.ViewState["CustomerID"]) : "0");
            Procparam.Add("@Funder_ID", Convert.ToString(obj_Page.ddlReceiptTo.SelectedValue));
        }
        else if (Convert.ToInt32(obj_Page.ddlReceiptType.SelectedValue) == 3 || Convert.ToInt32(obj_Page.ddlReceiptType.SelectedValue) >= 6)              //Load RS List for Lessee to OPC Rental
        {
            Procparam.Add("@OPTION", "13");
            Procparam.Add("@Customer_ID", (obj_Page.ViewState["CustomerID"] != null) ? Convert.ToString(obj_Page.ViewState["CustomerID"]) : "0");
        }
        else if (Convert.ToInt32(obj_Page.ddlReceiptType.SelectedValue) == 5)              //Load Note List for Funder to OPC Discounted Amount
        {
            Procparam.Add("@OPTION", "14");
            Procparam.Add("@Funder_ID", (obj_Page.ViewState["CustomerID"] != null) ? Convert.ToString(obj_Page.ViewState["CustomerID"]) : "0");
        }
        Procparam.Add("@LobId", Convert.ToString(obj_Page.ddlLOB.SelectedValue));
        if (Convert.ToInt32(obj_Page.ddlTranche.SelectedValue) > 0 && Convert.ToString(obj_Page.ddlTranche.SelectedText) != "")
        {
            Procparam.Add("@Tranche_ID", Convert.ToString(obj_Page.ddlTranche.SelectedValue));
        }

        if (Convert.ToInt32(obj_Page.ddlReceiptTo.SelectedValue) > 0)
        {
            Procparam.Add("@Customer_ID", Convert.ToString(obj_Page.ddlReceiptTo.SelectedValue));
        }

        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam));

        return suggetions.ToArray();
    }

    [System.Web.Services.WebMethod]
    public static string[] GetBranchList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggestions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Clear();
        Procparam.Add("@Company_ID", obj_Page.CompanyId.ToString());
        Procparam.Add("@Type", "GEN");
        Procparam.Add("@User_ID", obj_Page.UserId.ToString());
        Procparam.Add("@Program_Id", "110");
        Procparam.Add("@Lob_Id", obj_Page.ddlLOB.SelectedValue);
        Procparam.Add("@Is_Active", "1");
        Procparam.Add("@PrefixText", prefixText);
        suggestions = Utility.GetSuggestions(Utility.GetDefaultData(SPNames.S3G_SA_GET_BRANCHLIST, Procparam));
        return suggestions.ToArray();
    }

    [System.Web.Services.WebMethod]
    public static string[] GetGLCodeList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggestions = new List<String>();

        Procparam.Clear();
        Procparam.Add("@Company_ID", obj_Page.CompanyId.ToString());
        Procparam.Add("@LobId", obj_Page.ddlLOB.SelectedValue);
        Procparam.Add("@Prefix", prefixText);
        Procparam.Add("@OPTION", "21");
        suggestions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam));
        return suggestions.ToArray();
    }

    [System.Web.Services.WebMethod]
    public static string[] GetSLCodeList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggestions = new List<String>();

        Procparam.Clear();
        Procparam.Add("@Customer_ID", (obj_Page.ViewState["CustomerID"] != null) ? Convert.ToString(obj_Page.ViewState["CustomerID"]) : "0");
        Procparam.Add("@Prefix", prefixText);
        Procparam.Add("@Option", "22");
        suggestions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam));
        return suggestions.ToArray();
    }

    [System.Web.Services.WebMethod]
    public static string[] GetNoteList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();

        Procparam.Clear();
        Procparam.Add("@Company_ID", obj_Page.intCompanyID.ToString());
        Procparam.Add("@User_ID", obj_Page.intUserID.ToString());
        Procparam.Add("@Prefix", prefixText);
        Procparam.Add("@OPTION", "23");
        Procparam.Add("@Customer_ID", (obj_Page.ViewState["CustomerID"] != null) ? Convert.ToString(obj_Page.ViewState["CustomerID"]) : "0");
        Procparam.Add("@LobId", Convert.ToString(obj_Page.ddlLOB.SelectedValue));

        if (Convert.ToInt32(obj_Page.ddlTranche.SelectedValue) > 0 && Convert.ToString(obj_Page.ddlTranche.SelectedText) != "")
        {
            Procparam.Add("@Tranche_ID", Convert.ToString(obj_Page.ddlTranche.SelectedValue));
        }

        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam));

        return suggetions.ToArray();
    }

    [System.Web.Services.WebMethod]
    public static string[] GetNoteTrancheList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();

        Procparam.Clear();
        Procparam.Add("@Company_ID", obj_Page.intCompanyID.ToString());
        Procparam.Add("@User_ID", obj_Page.intUserID.ToString());
        Procparam.Add("@Prefix", prefixText);
        Procparam.Add("@OPTION", "24");
        Procparam.Add("@Customer_ID", (obj_Page.ViewState["CustomerID"] != null) ? Convert.ToString(obj_Page.ViewState["CustomerID"]) : "0");
        Procparam.Add("@LobId", Convert.ToString(obj_Page.ddlLOB.SelectedValue));

        if (obj_Page.grvFunderReceipt.FooterRow != null)
        {
            UserControls_S3GAutoSuggest ddlNoteNo = (UserControls_S3GAutoSuggest)obj_Page.grvFunderReceipt.FooterRow.FindControl("ddlNoteNo");
            Procparam.Add("@Note_ID", Convert.ToString(ddlNoteNo.SelectedValue));
        }

        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_CLN_GETRCPTCMNLST_AGT", Procparam));

        return suggetions.ToArray();
    }

}