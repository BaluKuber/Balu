#region Page Header
/// © 2010 SUNDARAM INFOTECH SOLUTIONS P LTD . All rights reserved
/// 
/// <Program Summary>
/// Module Name			: Collection
/// Screen Name			: Demand Processing
/// Created By			: Nataraj Y
/// Created Date		: 
/// Purpose	            : 
/// Last Updated By		:  Chandra Sekhar BS    
/// Last Updated Date   :  18-Sep-2013
/// Purpose	            :  SQL Performance
/// Last Updated By		: 
/// Last Updated Date   :   
/// <Program Summary>
#endregion

#region NameSpaces
using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using S3GBusEntity;
using System.Globalization;
using System.Data;
using S3GBusEntity.Origination;
using System.Web.Security;
using System.Configuration;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System.Data.Common;
using System.IO;
using System.Linq;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using System.Web.UI.HtmlControls;
using S3GBusEntity.Collection;
#endregion

public partial class Collection_S3GClnDemandProcessing : ApplyThemeForProject
{
    #region Variable declaration
    //UserInfo ObjUserInfo;
    //S3GSession ObjS3GSession = new S3GSession();
    Dictionary<string, string> Procparam;
    int intResult, intDemandProcessId;
    string strErrorMessagePrefix = @"Please correct the following validation(s): </br></br> ";
    public string strDateFormat;
    string strKey = "Insert";
    string strAlert = "alert('__ALERT__');";
    string strRedirectPageView = "window.location.href='../Collection/S3GClnTransLander.aspx?Code=CDP';";
    string strRedirectPageAdd = "window.location.href='../Collection/S3GClnDemandProcessing.aspx?qsMode=C';";
    string strRedirectPage = "~/Collection/S3GClnTransLander.aspx?Code=CDP";
    string strRedirectHomePage = "window.location.href='../Common/HomePage.aspx';";
    public string strProgramId = "108";
    //Code end

    ClnReceivableMgtServicesReference.ClnReceivableMgtServicesClient ObjReceivableMgtServices;
    ClnReceivableMgtServices.S3G_CLN_DemandHeaderDataTable ObjS3G_CLN_DemandHeader;

    string strPageName = "Demand Processing";

    #endregion

    #region Page Load
    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            S3GSession ObjS3GSession = new S3GSession();
            strDateFormat = ObjS3GSession.ProDateFormatRW;
            //txtCutoffDate.Attributes.Add("readonly", "readonly");
            txtCutoffDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtCutoffDate.ClientID + "','" + strDateFormat + "',true,  false);");

            if (!IsPostBack)
            {
                FunPriLoadPage();
            }
            if (PageIdValue != null)
                intDemandProcessId = int.Parse(PageIdValue);
            CalendarExtender1.Format = DateFormate;

        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            CVDemandProcessing.ErrorMessage = "Due to Data Problem, Unable to Load the Demand details.";
            CVDemandProcessing.IsValid = false;

        }
    }
    #endregion

    #region Page Methods

    /// <summary>
    /// This method will execute when page Loads
    /// </summary>
    private void FunPriLoadPage()
    {
        try
        {
            if (PageMode == PageModes.Create)
            {
                FunPriLoadLobandBranch();
            }
            else {
                Procparam = new Dictionary<string, string>();
                //ddlDemandMonth.FillFinancialMonth(FinancialYear);
                ddlDemandMonth.Fill2FinancialMonth(FinancialYear);
                ddlDemandMonth.SelectedValue = FinancialMonth;
                Procparam.Clear();
                Procparam.Add("@OPTION", "2");
                Procparam.Add("@TYPE", S3G_Statu_Lookup.ORG_ROI_RULES_FREQUENCY.ToString());
                ddlFrequency.BindDataTable(SPNames.S3G_CLN_LOADLOV, Procparam, new string[] { "FREQUENCY_ID", "FREQUENCY_CODE" });
                ddlFrequency.SelectedValue = "4";
            }
            
            // FunPriLoadAccountDetails(rbtlDemandType.SelectedItem.Text);
            FunPriDemandControlStatus();

        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Unable Load Demand Processing page");
        }
    }

    /// <summary>
    ///This method is used to Disable the controls based on Create/Modify/Query Mode. 
    ///Here argument is used as intModeID to differentiate the Modes.
    /// </summary>
    private void FunPriDemandControlStatus()
    {
        try
        {
            switch (PageMode)
            {
                case PageModes.Create:                                                                 // Create Mode
                    lblHeading.Text = FunPubGetPageTitles(enumPageTitle.Create);
                    btnSave.Enabled = false;
                    btnProcess.Enabled = true;
                    btnAssignDC.Enabled = false;
                    btnGo.Visible = true;
                    trAsondate.Visible = false;
                    break;
                case PageModes.Modify:                                                                 //Modify
                    lblHeading.Text = FunPubGetPageTitles(enumPageTitle.Modify);
                    // rbtlDemandType.Enabled = false;
                    ddlFrequency.ClearDropDownList();
                    tcDemandType.Tabs[1].Enabled = false;
                    trAsondate.Visible = false;
                    //grvDemandProcess.Enabled = false;
                    btnClear.Enabled = false;
                    CalendarExtender1.Enabled = false;
                    //FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket(txtConsNumber.Text, false, 0);
                    FunPriGetDemandDetails_QueryMode();
                    btnSave.Enabled = false;
                    btnProcess.Enabled = false;
                    btnGo.Visible = false;
                    break;
                case PageModes.Query:                                                                //Query  
                    lblHeading.Text = FunPubGetPageTitles(enumPageTitle.View);
                    btnClear.Enabled = false;
                    //rbtlDemandType.Enabled = false;
                    ddlFrequency.ClearDropDownList();
                    tcDemandType.Tabs[1].Enabled = false;
                    trAsondate.Visible = false;
                    grvDemandProcess.Enabled = false;
                    btnSave.Enabled = false;
                    CalendarExtender1.Enabled = false;
                    FunPriGetDemandDetails_QueryMode();
                    intDemandProcessId = int.Parse(PageIdValue);
                    btnAssignDC.Enabled = false;
                    btnProcess.Enabled = false;
                    btnGo.Visible = false;
                    txtCutoffDate.Attributes.Remove("onblur");
                    break;
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    /// <summary>
    ///This method is used to Load the Line of Business to a dropdown from stored Procedure using BindDatatable option..
    /// </summary>
    /// 
    private void FunPriLoadLobandBranch()
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            Procparam.Clear();
            Procparam.Add("@Is_Active", "1");
            Procparam.Add("@User_Id", UserId);
            Procparam.Add("@Company_ID", CompanyId);
            Procparam.Add("@Program_ID", strProgramId);

            ddlLOB.BindDataTable("S3G_Cln_GetDemandLOB", Procparam, true, new string[] { "LOB_ID", "LOB_Code", "LOB_Name" });
            //ddlBranch.BindDataTable(SPNames.BranchMaster_LIST, Procparam, new string[] { "Branch_ID", "Branch_Code", "Branch_Name" });
            
            if (Request.QueryString["qsMode"] != null && Request.QueryString["qsMode"].ToString() == "C")
            {
                //ddlDemandMonth.FillFinancialMonth(FinancialYear);
                ddlDemandMonth.Fill2FinancialMonth(FinancialYear);
                ddlDemandMonth.SelectedValue = FinancialMonth;
            }

            Procparam.Clear();
            Procparam.Add("@OPTION", "2");
            Procparam.Add("@TYPE", S3G_Statu_Lookup.ORG_ROI_RULES_FREQUENCY.ToString());
            ddlFrequency.BindDataTable(SPNames.S3G_CLN_LOADLOV, Procparam, new string[] { "FREQUENCY_ID", "FREQUENCY_CODE" });
            ddlFrequency.SelectedValue = "4";

            ddlLOB.SelectedIndex = 1;
            ddlLOB.ClearDropDownList();
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in loading Lob");
        }
    }

    /// <summary>
    ///This method is used to Load the Line of Business to a dropdown 
    ///from stored Procedure using BindDatatable option..
    ///For Demand Processed Month
    /// </summary>
    /// 
    private void FunPriLoadLob()
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            Procparam.Clear();
            Procparam.Add("@Is_Active", "1");
            Procparam.Add("@User_Id", UserId);
            Procparam.Add("@Company_ID", CompanyId);
            Procparam.Add("@Program_ID", strProgramId);
            Procparam.Add("@Option", "2");
            Procparam.Add("@DemandMonth", ddlDemandMonth.SelectedValue.ToString().Trim());

            ddlLOB.BindDataTable("S3G_Cln_GetDemandLOB", Procparam, true, new string[] { "LOB_ID", "LOB_Code", "LOB_Name" });

            if (ddlLOB.Items.Count == 2)
            {
                ddlLOB.SelectedIndex = 1;
                ddlLOB.ClearDropDownList();
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in loading Lob");
        }
    }

    /// <summary>
    ///This method is used to Load the Demand Month to a dropdown 
    ///from stored Procedure using BindDatatable option..
    /// </summary>
    /// 
    private void FunPriLoadDemandMonth()
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            Procparam.Clear();
            Procparam.Add("@FinStartYear", FinancialYear.Split('-')[0].ToString().Trim());
            Procparam.Add("@FinEndYear", FinancialYear.Split('-')[1].ToString().Trim());
            ddlDemandMonth.BindDataTable("S3G_Cln_GetDemandProcessedMonth", Procparam, true, new string[] { "Demand_month", "Demand_month"});
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in loading Processed Demand Month");
        }
    }


    /// <summary>
    /// Load Account Details based on demand type selected
    /// </summary>
    /// <param name="strDemandType"></param>
    private void FunPriLoadAccountDetails(string strDemandType)
    {
        DataTable dtAccountDetails;
        btnProcess.Enabled = true;
        Procparam = new Dictionary<string, string>();
        Procparam.Clear();
        Procparam.Add("@Company_ID", CompanyId);
        Procparam.Add("@Is_Active", "1");
        Procparam.Add("@User_Id", UserId);
        Procparam.Add("@LOB_ID", ddlLOB.SelectedValue);
        if (tcDemandType.ActiveTabIndex == 1)
            Procparam.Add("@Option", "2");
        Procparam.Add("@Demand_Month", ddlDemandMonth.SelectedValue);
        dtAccountDetails = Utility.GetDefaultData(SPNames.S3G_CLN_GetBranchLevelDemand, Procparam);
        ViewState["dtAccountDetails"] = dtAccountDetails;
        FunPriBindDemandDetails(dtAccountDetails);

    }

    /// <summary>
    /// To Calculate branch wise Demand 
    /// </summary>
    private void FunPriProcessBranchWiseDemand()
    {
        try
        {
            DataTable dtAccountDetails = new DataTable();
            int intCheckCount = 0;
            dtAccountDetails = (DataTable)ViewState["dtAccountDetails"];

            if (tcDemandType.ActiveTabIndex == 1)
            {
                foreach (DataRow DrTempRow in dtAccountDetails.Rows)
                {
                    DrTempRow["SelectLocation"] = "False";
                    DrTempRow["Arrears_Amount"] = 0.0000;
                    DrTempRow["Current_Due"] = 0.0000;
                    DrTempRow["No_of_Accounts"] = 0;
                }
                dtAccountDetails.AcceptChanges();
            }
            foreach (GridViewRow grvRow in grvDemandProcess.Rows)
            {
                if (grvRow.Enabled)
                {
                    CheckBox chkSelBranch = (CheckBox)grvRow.FindControl("chkSelectBranch");
                    if (chkSelBranch.Checked && chkSelBranch.Enabled)
                    {
                        Label lblBranch_Id = (Label)grvRow.FindControl("lblBranch_Id");
                        Procparam = new Dictionary<string, string>();
                        Procparam.Clear();
                        if (ddlLOB.SelectedValue != "0")
                        {
                            Procparam.Add("@LOB_ID", ddlLOB.SelectedValue);
                        }
                        Procparam.Add("@Company_ID", CompanyId);
                        Procparam.Add("@Location_ID", lblBranch_Id.Text);
                        Procparam.Add("@User_Id", UserId);
                        if (tcDemandType.ActiveTabIndex == 0)
                            Procparam.Add("@Option", "1");
                        else
                        {
                            Procparam.Add("@Option", "2");
                            Procparam.Add("@Demand_EndDate", Utility.StringToDate(txtCutoffDate.Text).ToString());
                        }

                        Procparam.Add("@Demand_Month", ddlDemandMonth.SelectedItem.Text);
                        DataTable dtBranchValue = Utility.GetDefaultData(SPNames.S3G_CLN_GetBranchLevelDemand, Procparam);

                        DataRow[] drAccountsRow = dtAccountDetails.Select("Location_ID = '" + lblBranch_Id.Text + "'");
                        for (int i = 0; i < drAccountsRow.Length; i++)
                        {
                            if (dtBranchValue.Rows.Count > 0)
                            {
                                drAccountsRow[i]["SelectLocation"] = dtBranchValue.Rows[0]["SelectLocation"];
                                drAccountsRow[i]["Arrears_Amount"] = dtBranchValue.Rows[0]["Arrears_Amount"];
                                drAccountsRow[i]["Current_Due"] = dtBranchValue.Rows[0]["Current_Due"];
                                drAccountsRow[i]["No_of_Accounts"] = dtBranchValue.Rows[0]["No_of_Accounts"];
                                drAccountsRow[i]["Arrears_Amount1"] = dtBranchValue.Rows[0]["Arrears_Amount1"];
                                drAccountsRow[i]["Current_Due1"] = dtBranchValue.Rows[0]["Current_Due1"];
                            }
                            else
                            {
                                drAccountsRow[i]["SelectLocation"] = "True";
                            }
                        }

                        dtAccountDetails.AcceptChanges();
                        intCheckCount++;

                    }
                }

            }
            if (intCheckCount <= 0)
            {
                btnProcess.Enabled = true;
                btnSave.Enabled = false;
            }
            else
            {
                if (tcDemandType.ActiveTabIndex == 0)
                {
                    btnProcess.Enabled = false;
                    btnSave.Enabled = true;
                }
                else
                {

                    btnSave.Enabled = false;
                }
            }
            FunPriBindDemandDetails(dtAccountDetails);
        }
        catch (Exception ex)
        {
            Utility.FunShowAlertMsg(this, ex.Message);
            btnProcess.Enabled = true;
        }
    }

    /// <summary>
    /// Method to save the Record
    /// </summary>
    private void FunPriSaveRecord()
    {
        try
        {
            ObjS3G_CLN_DemandHeader = new ClnReceivableMgtServices.S3G_CLN_DemandHeaderDataTable();
            ClnReceivableMgtServices.S3G_CLN_DemandHeaderRow ObjS3G_CLN_DemandHeaderRow;
            ObjS3G_CLN_DemandHeaderRow = ObjS3G_CLN_DemandHeader.NewS3G_CLN_DemandHeaderRow();
            ObjS3G_CLN_DemandHeaderRow.Company_ID = int.Parse(CompanyId);
            ObjS3G_CLN_DemandHeaderRow.Demand_Process_ID = intDemandProcessId;
            if (Convert.ToInt32(ddlLOB.SelectedValue) > 0)
                ObjS3G_CLN_DemandHeaderRow.LOB_ID = Convert.ToInt32(ddlLOB.SelectedValue);
            ObjS3G_CLN_DemandHeaderRow.Demand_Type = tcDemandType.ActiveTabIndex;
            ObjS3G_CLN_DemandHeaderRow.Demand_Month = ddlDemandMonth.SelectedItem.Text;
            if (txtCutoffDate.Text != "")
                ObjS3G_CLN_DemandHeaderRow.Cutoff_Date = Utility.StringToDate(txtCutoffDate.Text);

            ObjS3G_CLN_DemandHeaderRow.Xml_DemandDetails = grvDemandProcess.FunPubFormXml(true, true);
            ObjS3G_CLN_DemandHeaderRow.Created_By = int.Parse(UserId);
            ObjReceivableMgtServices = new ClnReceivableMgtServicesReference.ClnReceivableMgtServicesClient();
            ObjS3G_CLN_DemandHeader.AddS3G_CLN_DemandHeaderRow(ObjS3G_CLN_DemandHeaderRow);
            SerializationMode SerMode = SerializationMode.Binary;
            byte[] ObjByteS3G_CLN_Demand = ClsPubSerialize.Serialize(ObjS3G_CLN_DemandHeader, SerMode);
            if (intDemandProcessId > 0)
                intResult = ObjReceivableMgtServices.FunPubModifyDemandProcessing(SerMode, ObjByteS3G_CLN_Demand);
            else
                intResult = ObjReceivableMgtServices.FunPubCreateDemandProcessing(SerMode, ObjByteS3G_CLN_Demand);
            switch (intResult)
            {
                case 0:
                    //To avoid double save click
                    btnSave.Enabled = false;
                    //End here

                    //Sucessfully -> Successfully : Thangam M on 05/Dec/2013
                    if (intDemandProcessId > 0)
                    {
                        strAlert = strAlert.Replace("__ALERT__", "Demand Updated Successfully");

                    }
                    else
                    {
                        strAlert = "Demand Done Successfully";
                        strAlert += @"\n\nWould you like to run demand for others months?";
                        strAlert = "if(confirm('" + strAlert + "')){" + strRedirectPageAdd + "}else {" + strRedirectPageView + "}";
                        strRedirectPageView = "";
                    }

                    break;
                case 2:
                    strAlert = strAlert.Replace("__ALERT__", "Select atleast one Location for demand processing");
                    strRedirectPageView = "";
                    break;
                case 3:
                    strAlert = strAlert.Replace("__ALERT__", "Billing for the selected Location and LOB has not been run");
                    strRedirectPageView = "";
                    break;
                case 4:
                    strAlert = strAlert.Replace("__ALERT__", "Previous Month Demand was not done");
                    strRedirectPageView = "";
                    break;
                case 5:
                    strAlert = strAlert.Replace("__ALERT__", "Demand cannot be run in a closed month");
                    strRedirectPageView = "";
                    break;
                case 6:
                    strAlert = strAlert.Replace("__ALERT__", "Previous Month is not closed");
                    strRedirectPageView = "";
                    break;
                case 7:
                    strAlert = strAlert.Replace("__ALERT__", "Re-Process the demand for selected Location");
                    strRedirectPageView = "";
                    break;
                case 2601:
                    strAlert = strAlert.Replace("__ALERT__", "Demand processing for the selected combination already exists.");
                    strRedirectPageView = "";
                    break;

                default:
                    strAlert = strAlert.Replace("__ALERT__", "Error in saving Demand");
                    strRedirectPageView = "";
                    break;
            }

        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            strAlert = strAlert.Replace("__ALERT__", "Error in saving Demand");
            strRedirectPageView = "";
        }
        ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
    }

    /// <summary>
    /// To bind demand details in gridview and to set 
    /// </summary>
    /// <param name="dtAccountDetails"></param>
    private void FunPriBindDemandDetails(DataTable dtAccountDetails)
    {
        try
        {
            if (dtAccountDetails != null && dtAccountDetails.Rows.Count == 0)
            {
                Utility.FunShowAlertMsg(this, "No records found for Demand Processing");
                return;
            }

            grvDemandProcess.DataSource = dtAccountDetails;
            grvDemandProcess.DataBind();
            if (grvDemandProcess.FooterRow != null)
            {
                Label txtCurrent_Due = (Label)grvDemandProcess.FooterRow.FindControl("txtAmount");
                Label txtArrears = (Label)grvDemandProcess.FooterRow.FindControl("txtArrearsAmount");
                Label txtNoofAcc = (Label)grvDemandProcess.FooterRow.FindControl("txtNoofAcc");
                if (dtAccountDetails != null && dtAccountDetails.Rows.Count > 0)
                {
                    txtCurrent_Due.Text = ((decimal)dtAccountDetails.Compute("Sum(Current_Due1)", "Location_ID > 0")).ToString(Utility.SetSuffix());
                    txtArrears.Text = ((decimal)dtAccountDetails.Compute("Sum(Arrears_Amount1)", "Location_ID > 0")).ToString(Utility.SetSuffix());
                    txtNoofAcc.Text = dtAccountDetails.Compute("Sum(No_of_Accounts)", "Location_ID > 0").ToString();
                }
            }
            if (dtAccountDetails != null && dtAccountDetails.Rows.Count > 0)
            {
                S3GDALDBType DBType = FunPubGetDatabaseType();
                if (DBType == S3GDALDBType.ORACLE)
                {
                    if (dtAccountDetails.Select("SelectLocation='True'").Length == dtAccountDetails.Rows.Count)
                    {
                        (grvDemandProcess.HeaderRow.FindControl("chkAll") as CheckBox).Checked = true;
                    }
                    if (dtAccountDetails.Select("Status='Pending' or Status='PROCESSED'").Length <= 0)
                    {
                        (grvDemandProcess.HeaderRow.FindControl("chkAll") as CheckBox).Enabled = false;
                    }
                }
                else
                {
                    if (dtAccountDetails.Select("SelectLocation=1").Length == dtAccountDetails.Rows.Count)
                    {
                        (grvDemandProcess.HeaderRow.FindControl("chkAll") as CheckBox).Checked = true;
                    }
                    if (dtAccountDetails.Select("Status='Pending' or Status='PROCESSED'").Length <= 0)
                    {
                        (grvDemandProcess.HeaderRow.FindControl("chkAll") as CheckBox).Enabled = false;
                    }
                }
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw new Exception("Error in getting Demand details");
        }
    }

    /// <summary>
    /// To get Demand processing Details
    /// </summary>
    /// <param name="strDemandProcessId"></param>
    private void FunPriGetDemandDetails()
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Demand_ProceesId", PageIdValue);
            Procparam.Add("@User_Id", UserId);
            DataSet dsDemandDetails = Utility.GetDataset(SPNames.S3G_CLN_GetDemandProcessingDetails, Procparam);
            DataRow drDemandRow = dsDemandDetails.Tables[0].Rows[0];
            if (drDemandRow["Demand_Type"] == "0")
            {
                tcDemandType.ActiveTabIndex = 1;
                txtCutoffDate.Text = drDemandRow["Demand_Date"].ToString();
            }
            else
            {
                tcDemandType.ActiveTabIndex = 0;

            }

            //Added on 12Jun2014 for Displaying Month correctly starts here
            ////ddlDemandMonth.SelectedValue = drDemandRow["Demand_Month"].ToString();
            ////ddlDemandMonth.ClearDropDownList();
            ListItem lstMth = ddlDemandMonth.Items.FindByText(Convert.ToString(drDemandRow["Demand_Month"]));
            if (lstMth == null)
            {
                ddlDemandMonth.Items.Add(new ListItem(Convert.ToString(drDemandRow["Demand_Month"]), Convert.ToString(drDemandRow["Demand_Month"])));
                ddlDemandMonth.SelectedValue = drDemandRow["Demand_Month"].ToString();
                ddlDemandMonth.ClearDropDownList();
            }
            else
            {
                ddlDemandMonth.SelectedValue = drDemandRow["Demand_Month"].ToString();
                ddlDemandMonth.ClearDropDownList();
            }
            //Added on 12Jun2014 for Displaying Month correctly Ends here


            ddlLOB.SelectedValue = drDemandRow["LOB_ID"].ToString();
            ddlLOB.ClearDropDownList();

            btnAssignDC.Enabled = false;
            ViewState["dtAccountDetails"] = dsDemandDetails.Tables[1];
            FunPriBindDemandDetails(dsDemandDetails.Tables[1]);
            //if ((int.Parse(dsDemandDetails.Tables[2].Rows[0]["Count"].ToString()) == 0) && int.Parse(dsDemandDetails.Tables[3].Rows[0]["Count"].ToString()) > 0)
            //{
            //    btnAssignDC.Enabled = true;
            //}
            //else
            //    btnAssignDC.Enabled = false;
            //grvDemandProcess.DataSource = dsDemandDetails.Tables[1];
            //grvDemandProcess.DataBind();
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
        }
    }
    private void FunPriGetDemandDetails_QueryMode()
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Demand_ProceesId", PageIdValue);
            Procparam.Add("@User_Id", UserId);
            DataSet dsDemandDetails = Utility.GetDataset("S3G_CLN_GetDemandProcessingDetails", Procparam);
            DataRow drDemandRow = dsDemandDetails.Tables[0].Rows[0];
            if (drDemandRow["Demand_Type"] == "0")
            {
                tcDemandType.ActiveTabIndex = 1;
                txtCutoffDate.Text = drDemandRow["Demand_Date"].ToString();
            }
            else
            {
                tcDemandType.ActiveTabIndex = 0;

            }
            ddlDemandMonth.SelectedValue = drDemandRow["Demand_Month"].ToString();
            ddlDemandMonth.ClearDropDownList();
            if (drDemandRow["LOB_ID"].ToString() != "" || drDemandRow["LOB_ID"].ToString() != "0")
            {
                ListItem LiB = new ListItem(drDemandRow["LOB_Name"].ToString(), drDemandRow["LOB_ID"].ToString());
                ddlLOB.Items.Add(LiB);
            }
            else {
                ListItem LiB = new ListItem("--ALL--", "0");
                ddlLOB.Items.Add(LiB);
            }
            ddlLOB.SelectedValue = drDemandRow["LOB_ID"].ToString();
            ddlLOB.ClearDropDownList();

            btnAssignDC.Enabled = false;
            ViewState["dtAccountDetails"] = dsDemandDetails.Tables[1];
            FunPriBindDemandDetails(dsDemandDetails.Tables[1]);
            //if ((int.Parse(dsDemandDetails.Tables[2].Rows[0]["Count"].ToString()) == 0) && int.Parse(dsDemandDetails.Tables[3].Rows[0]["Count"].ToString()) > 0)
            //{
            //    btnAssignDC.Enabled = true;
            //}
            //else
            //    btnAssignDC.Enabled = false;
            //grvDemandProcess.DataSource = dsDemandDetails.Tables[1];
            //grvDemandProcess.DataBind();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
        }
    }
    /// <summary>
    /// Method To Insert Into S3G Service table for Assign DC
    /// </summary>
    private void FunPriSetAssignDCService()
    {
        try
        {
            int ProcessCnt = 0;
            foreach (GridViewRow grvRow in grvDemandProcess.Rows)
            {
                if (grvRow.Enabled)
                {
                    CheckBox chkSelBranch = (CheckBox)grvRow.FindControl("chkSelectBranch");
                    if (chkSelBranch.Checked && chkSelBranch.Enabled)
                    {
                        Label lblBranch_Id = (Label)grvRow.FindControl("lblBranch_Id");
                        DateTime dtCurrentTime = DateTime.Now;
                        Procparam = new Dictionary<string, string>();
                        Procparam.Add("@Company_ID", CompanyId);
                        Procparam.Add("@Demand_ID", PageIdValue);
                        Procparam.Add("@Created_by", UserId);
                        Procparam.Add("@Location_ID", lblBranch_Id.Text.Trim());
                        Procparam.Add("@Schedule_Date", dtCurrentTime.ToString());
                        Procparam.Add("@Schedule_Time", dtCurrentTime.AddMinutes(5.0).ToShortTimeString());
                        Utility.GetTableScalarValue(SPNames.S3G_CLN_InsertAssignDCService, Procparam);
                        ProcessCnt++;
                    }
                }
            }
            if (ProcessCnt == 0)
            {
                Utility.FunShowAlertMsg(this, "Select atleast one Location for Assign DC");
            }
            else
            {
                btnAssignDC.Enabled = false;
                //Utility.FunShowAlertMsg(this, "DC assigned successfully");
                strAlert = strAlert.Replace("__ALERT__", "DC Assign Process Initiated");
                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private void FunResetControls(string strOption)
    {
        //ddlLOB.SelectedIndex = 0;
        grvDemandProcess.DataSource = null;
        grvDemandProcess.DataBind();
    }
    #endregion

    #region Events

    #region Buttons

    #region Save
    protected void btnSave_Click(object sender, EventArgs e)
    {
        int chkCnt = 0;
        int ProcessCnt = 0;
        foreach (GridViewRow grvRow in grvDemandProcess.Rows)
        {
            if (grvRow.Enabled)
            {
                CheckBox chkSelBranch = (CheckBox)grvRow.FindControl("chkSelectBranch");

                if (chkSelBranch.Checked && chkSelBranch.Enabled)
                {
                    chkCnt++;
                    if (((Label)grvRow.FindControl("lblProcess")).Text == "0")
                    {
                        ProcessCnt++;
                    }
                }
            }
        }
        if (chkCnt == 0)
        {
            Utility.FunShowAlertMsg(this, "Select atleast one Location for demand processing");
            return;
        }
        if (ProcessCnt > 0)
        {
            Utility.FunShowAlertMsg(this, "Select the processed location for demand processing");
            return;
        }
        FunPriSaveRecord();
    }

    #endregion

    #region Cancel
    protected void btnCancel_Click(object sender, EventArgs e)
    {
        try
        {
            Response.Redirect(strRedirectPage,false);
        }
        catch (Exception ex)
        {
            CVDemandProcessing.ErrorMessage = "Unable To Cancel.";
            CVDemandProcessing.IsValid = false;
        }
    }
    #endregion

    #region Clear
    protected void btnClear_Click(object sender, EventArgs e)
    {
        try
        {
            //ddlLOB.SelectedIndex = -1;
            ddlDemandMonth.SelectedIndex = -1;
            if (tcDemandType.ActiveTabIndex == 1)
            {
                trAsondate.Visible = true;
                trFrequency.Visible = false;
            }
            else
            {
                trAsondate.Visible = false;
                trFrequency.Visible = true;
            }
            txtCutoffDate.Text = "";
            btnProcess.Enabled = true;
            btnSave.Enabled = false;
            grvDemandProcess.DataSource = null;
            grvDemandProcess.DataBind();
        }
        catch (Exception ex)
        {
            CVDemandProcessing.ErrorMessage = "Unable To Clear.";
            CVDemandProcessing.IsValid = false;
        }
    }
    #endregion

    #region Process
    protected void btnProcess_Click(object sender, EventArgs e)
    {
        int chkCnt = 0;

        foreach (GridViewRow grvRow in grvDemandProcess.Rows)
        {
            if (grvRow.Enabled)
            {
                CheckBox chkSelBranch = (CheckBox)grvRow.FindControl("chkSelectBranch");

                if (chkSelBranch.Checked && chkSelBranch.Enabled)
                {
                    chkCnt++;
                    break;
                }
            }
        }
        if (chkCnt == 0)
        {
            Utility.FunShowAlertMsg(this, "Select atleast one Location for Process");
            return;
        }

        if (tcDemandType.ActiveTabIndex == 0)
            btnProcess.Enabled = false;
        else
        {
            if (ddlDemandMonth.SelectedIndex > 0)
            {
                string StrCutOffYearMonth = Utility.StringToDate(txtCutoffDate.Text).Year.ToString();

                if (Utility.StringToDate(txtCutoffDate.Text).Month.ToString().Length == 1)
                {
                    StrCutOffYearMonth = StrCutOffYearMonth + "0" + 
                        Utility.StringToDate(txtCutoffDate.Text).Month.ToString();
                }
                else
                {
                    StrCutOffYearMonth = StrCutOffYearMonth + 
                        Utility.StringToDate(txtCutoffDate.Text).Month.ToString();
                }

                //int intDemandMonth = int.Parse(ddlDemandMonth.SelectedItem.ToString().Substring(4));
                //int intCutOffMonth = Utility.StringToDate(txtCutoffDate.Text).Month;
                //int intDemandYear = int.Parse(ddlDemandMonth.SelectedItem.ToString().Substring(0, 4));
                //int intCutOffYear = Utility.StringToDate(txtCutoffDate.Text).Year;
                if (int.Parse(StrCutOffYearMonth) < int.Parse(ddlDemandMonth.SelectedItem.ToString()))
                {
                    Utility.FunShowAlertMsg(this, "Cut Off Date cannot be less than demand month");
                    return;
                }
            }
        }
        FunPriProcessBranchWiseDemand();
        FunPriSaveRecord();
    }
    #endregion

    #region Assign DC
    protected void btnAssignDC_Click(object sender, EventArgs e)
    {
        FunPriSetAssignDCService();
    }
    #endregion

    #region Go
    protected void btnGo_Click(object sender, EventArgs e)
    {
        btnSave.Enabled = false; 
        FunPriLoadAccountDetails(tcDemandType.ActiveTab.HeaderText);
    }
    #endregion

    #endregion

    protected void ddlLOB_SelectedIndexChanged(object sender, EventArgs e)
    {
        //FunPriLoadAccountDetails(rbtlDemandType.SelectedItem.Text);
        FunResetControls("0");
        btnSave.Enabled = false;
    }

    protected void grvDemandProcess_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            CheckBox chkSelBranch = (CheckBox)e.Row.FindControl("chkSelectBranch");
            Label lblStatus = (Label)e.Row.FindControl("lblStatus");
            chkSelBranch.Attributes.Add("onclick", "javascript:fnGridUnSelect('" + grvDemandProcess.ClientID + "','chkAll','chkSelectBranch');");
            if (chkSelBranch.Checked && lblStatus.Text.ToUpper() == "PROCESSED" && PageMode == PageModes.Modify) 
            {
                e.Row.Enabled = true;
                btnAssignDC.Enabled = true;
            }
            else if (chkSelBranch.Checked && lblStatus.Text.ToUpper() != "PENDING")// "PROCESSED")
            {
                e.Row.Enabled = false;
            }
            else
            {
                e.Row.Enabled = true;
            }
            if (chkSelBranch.Checked)
                ((Label)e.Row.FindControl("lblProcess")).Text = "1";

            //for (int i = 0; i < e.Row.Cells.Count; i++)
            //{
            //    switch (((System.Data.DataRowView)(e.Row.DataItem)).Row.ItemArray[i].GetType().ToString())
            //    {
            //        case "System.Decimal":
            //            e.Row.Cells[i].HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Right;
            //            ((Label)e.Row.Cells[i].Controls[1]).Text = Convert.ToDecimal(((Label)e.Row.Cells[i].Controls[1]).Text).ToString(Utility.SetSuffix());
            //            break;
            //        case "System.Int32":
            //            e.Row.Cells[i].HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            //            break;
            //        case "System.String":
            //            e.Row.Cells[i].HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
            //            break;
            //    }

            //}

        }
        if (e.Row.RowType == DataControlRowType.Header)
        {
            CheckBox chkAll = (CheckBox)e.Row.FindControl("chkAll");
            chkAll.Attributes.Add("onclick", "javascript:fnDGSelectOrUnselectAll('" + grvDemandProcess.ClientID + "',this,'chkSelectBranch');");
        }

    }

    protected void ddlDemandMonth_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (tcDemandType.ActiveTabIndex == 0)
        {
            FunResetControls("0");
        }
        else
        {
            FunResetControls("1");
            FunPriLoadLob();
            txtCutoffDate.Text = "";
        }
        //ddlLOB.SelectedIndex = 0;
    }

    protected void tcDemandType_ActiveTabChanged(object sender, EventArgs e)
    {
        //FunPriLoadAccountDetails(rbtlDemandType.SelectedItem.Text);
        FunResetControls("1");
        if (tcDemandType.ActiveTabIndex == 1)
        {
            txtCutoffDate.Enabled = true;
            rfvCutoffDate.Enabled = true;
            lblCutoffDate.CssClass = "styleReqFieldLabel";
            CalendarExtender1.Enabled = true;
            trAsondate.Visible = true;
            trFrequency.Visible = false;
            btnSave.Enabled = false;
            FunPriLoadDemandMonth();
        }
        else
        {
            txtCutoffDate.Enabled = false;
            rfvCutoffDate.Enabled = false;
            CalendarExtender1.Enabled = false;
            lblCutoffDate.CssClass = "";
            trAsondate.Visible = false;
            trFrequency.Visible = true;
            txtCutoffDate.Text = "";
            FunPriLoadLobandBranch();
        }
        ddlLOB.SelectedIndex = 0; 
    }

    #endregion








}
