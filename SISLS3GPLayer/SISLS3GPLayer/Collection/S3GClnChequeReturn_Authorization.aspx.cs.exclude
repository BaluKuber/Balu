#region Page Header
/// © 2010 SUNDARAM INFOTECH SOLUTIONS P LTD . All rights reserved
/// 
/// <Program Summary>
/// Module Name			: Collection 
/// Screen Name			: Cheque Returns
/// Created By			: Saishree Ramasubbu 
/// Created Date		: 
/// Purpose	            : 
/// 
/// Modified By         : Tamilselvan.S
/// Modified On         : 7/01/2011
/// Reason              : 
///
/// 
/// Modified By         : Chandra Sekhar BS
/// Modified On         : 21-Sep-2013
/// Reason              : Location Auto suggest
/// 
///
#endregion

using System;
using System.Collections.Generic;
using System.Data;
using S3GBusEntity;
using System.ServiceModel;
using System.Text;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.Security;
using System.Globalization;
using System.Web;
using System.Configuration;

public partial class Collection_S3GClnChequeReturn_Authorization : ApplyThemeForProject
{

    #region [Intialization]
    public static Collection_S3GClnChequeReturn_Authorization obj_Page;
    UserInfo ObjUserInfo = new UserInfo();
    StringBuilder strSelect = new StringBuilder();
    StringBuilder strAuthorize = new StringBuilder();
    StringBuilder strUnProcessedCheque = new StringBuilder();
    SerializationMode ObjSerMode = SerializationMode.Binary;
    Dictionary<string, string> Procparam = null;

    ClnReceiptMgtServicesReference.ClnReceiptMgtServicesClient objClnCheque_Client;
    S3GBusEntity.Collection.ClnReceiptMgtServices.S3G_CLN_ChequeAuthorizationDataTable objChequeDataTable = null;
    S3GBusEntity.Collection.ClnReceiptMgtServices.S3G_CLN_ChequeAuthorizationRow objChequeRow = null;

    #endregion [Intialization]

    #region [Local Fields]

    int intCompanyID, intUserID = 0;
    int intErrCode = 0;
    string strDateFormat = string.Empty;
    string strChequeReturn = string.Empty;
    int intStatus = 0;
    //User Authorization
    string strMode = string.Empty;
    bool bCreate = false;
    bool bClearList = false;
    bool bModify = false;
    bool bQuery = false;
    //Code end

    string strKey = "Insert";
    string strAlert = "alert('__ALERT__');";
    string strRedirectPageAdd = "window.location.href='../Collection/S3GClnChequeReturn_Authorization.aspx';";
    static string strPageName = "Cheque Return Authorization";
    string strErrorMsgVal = @"Correct the following validation(s):</br><ul><li>";
    string strErrorMsgdata = @"Error occured : </br><ul><li>";
    string strErrMsgLast = "</li></ul>";

    int intAuthorizedCount = 0;
    int intUnauthorizedCount = 0;


    PagingValues ObjPaging = new PagingValues();

    public delegate void PageAssignValue(int ProPageNumRW, int intPageSize);

    public int ProPageNumRW
    {
        get;
        set;
    }

    public int ProPageSizeRW
    {
        get;
        set;

    }
    protected void AssignValue(int intPageNum, int intPageSize)
    {
        ProPageNumRW = intPageNum;
        ProPageSizeRW = intPageSize;
        FunPriButtonOkClick();
    }

    #endregion [Local Fields]

    #region [Event's]

    #region [Page Event's]

    protected void Page_Load(object sender, EventArgs e)
    {
        obj_Page = this;
        try
        {
            FunPriPageLoad();
            if (!IsPostBack)
            {
                ddlLOB.Focus();
                if (ddlLOB != null && ddlLOB.Items.Count > 0)    // to set to the default position
                    ddlLOB.SelectedIndex = 0;
            }
        }
        catch (Exception ex)
        {
            cvChequeReturnAuthorization.ErrorMessage = strErrorMsgdata + "Unable to Load the Cheque Return Authorization" + strErrMsgLast;
            cvChequeReturnAuthorization.IsValid = false;
        }
    }

    #endregion [Page Event's]

    #region [Button Event's]

    protected void btnOk_Click(object sender, EventArgs e)
    {
        try
        {

            intAuthorizedCount = intUnauthorizedCount = 0;
            ViewState["DtChequeReturn"] = null;
            ProPageNumRW = 1;
            ProPageSizeRW = Convert.ToInt32(ConfigurationManager.AppSettings.Get("GridPageSize"));
            ucCustomPaging.Navigation(0, ProPageNumRW, ProPageSizeRW);
            ucCustomPaging.setPageSize(ProPageSizeRW);
            grvCheque.DataSource = null;
            grvCheque.DataBind();
            pnlCheque.Style.Add("Display", "none");
            btnAuthorize.Style.Add("Display", "none");
            btnUnAuthorize.Style.Add("Display", "none");
            //btnAuthorize.Enabled = btnUnAuthorize.Enabled = false;
            if (FunPriValidateFromEndDate())
            {
                FunPriButtonOkClick();
            }
            //ddlLOB.Attributes.Add("onchange", "return FunResetGrid()");
            //ddlBranch.Attributes.Add("onchange", "return FunResetGrid()");
        }
        catch (Exception ex)
        {
            cvChequeReturnAuthorization.ErrorMessage = strErrorMsgdata + "Unable to search the Cheque Return Authorization" + strErrMsgLast;
            cvChequeReturnAuthorization.IsValid = false;
        }
    }

    #region [Authorizing/UnAuthorizing Cheques]

    protected void btnAuthorize_Click(object sender, EventArgs e)
    {
        try
        {
            //if (!FunPriCheckSelectedItems())
            //{
            //    Utility.FunShowAlertMsg(this.Page, "No records selected for authorizing.");
            //    return;
            //}
            //else
            //{
            FunPriButtonAuthorizeClick();
            //}
        }
        catch (Exception ex)
        {
            cvChequeReturnAuthorization.ErrorMessage = "Unable to authorized.";
            cvChequeReturnAuthorization.IsValid = false;
        }
    }

    protected void btnUnAuthorize_Click(object sender, EventArgs e)
    {
        try
        {
            //if (!FunPriCheckSelectedItems())
            //{
            //    Utility.FunShowAlertMsg(this.Page, "No records selected for unauthorizing.");
            //    return;
            //}
            //else
            //{
            FunPriButtonUnAuthorizeClick();
            //}
        }
        catch (Exception ex)
        {
            cvChequeReturnAuthorization.ErrorMessage = "Unable to unauthorized.";
            cvChequeReturnAuthorization.IsValid = false;
        }
    }

    #endregion [Authorizing/UnAuthorizing Cheques]

    #endregion [Button Event's]

    #region [Link Button Event's]

    protected void lnkView_Click(object sender, EventArgs e)
    {
        try
        {
            LinkButton lnkView = sender as LinkButton;
            if (lnkView.CommandArgument != null && lnkView.CommandArgument != "" && lnkView.CommandName != null && lnkView.CommandName != "")
            {
                DataSet dsView = new DataSet();
                Procparam = new Dictionary<string, string>();
                Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
                Procparam.Add("@Cheque_Return_No", Convert.ToString(lnkView.CommandArgument));
                dsView = Utility.GetDataset("S3g_CLN_GetChequeForView", Procparam);
                FunPubClearMPEControls();
                if (dsView.Tables.Count >= 1)
                {
                    if (dsView.Tables[1].Rows.Count > 0)
                    {
                        caCustomerInfo.SetCustomerDetails(dsView.Tables[1].Rows[0], true);
                        lblpLob.Text = Convert.ToString(dsView.Tables[1].Rows[0]["LOB_Name"]);
                        lblpBranch.Text = Convert.ToString(dsView.Tables[1].Rows[0]["Location_Name"]);
                        lblpReceiptNumber.Text = Convert.ToString(dsView.Tables[1].Rows[0]["Receipt_No"]);
                        lblpChequeNumber.Text = Convert.ToString(dsView.Tables[1].Rows[0]["Instrument_No"]);
                        lblpChequeReturnNumber.Text = Convert.ToString(dsView.Tables[1].Rows[0]["Cheque_Return_Advice_No"]);
                        lblpDocumentDate.Text = dsView.Tables[1].Rows[0]["DocumentDate"] != DBNull.Value ? Convert.ToDateTime(dsView.Tables[1].Rows[0]["DocumentDate"]).ToString(strDateFormat) : "";
                        lblpChequeReturnValueDate.Text = dsView.Tables[1].Rows[0]["Cheque_Return_Value_Date"] != DBNull.Value ? Convert.ToDateTime(dsView.Tables[1].Rows[0]["Cheque_Return_Value_Date"]).ToString(strDateFormat) : "";
                        lblDepositBank.Text = Convert.ToString(dsView.Tables[1].Rows[0]["BankName"]);
                        lblBankAccNo.Text = Convert.ToString(dsView.Tables[1].Rows[0]["BankAcctNumber"]);
                        lblChequeAmount.Text = Convert.ToDecimal(Convert.ToString(dsView.Tables[1].Rows[0]["ChequeAmount"])).ToString(Utility.SetSuffix());
                        lblBankCharges.Text = Convert.ToDecimal(Convert.ToString(dsView.Tables[1].Rows[0]["Bank_Charges"])).ToString(Utility.SetSuffix());
                        lblBankAdviceNumber.Text = Convert.ToString(dsView.Tables[1].Rows[0]["Bank_Advice_Number"]);
                        lblReasonforReturn.Text = Convert.ToString(dsView.Tables[1].Rows[0]["Reason"]);
                        lblpAuthorizedBy.Text = Convert.ToString(dsView.Tables[1].Rows[0]["User_Name"]);
                        lblpAuthorizedDate.Text = dsView.Tables[1].Rows[0]["Authorized_Date"] != DBNull.Value ? Convert.ToDateTime(dsView.Tables[1].Rows[0]["Authorized_Date"]).ToString(strDateFormat) : "";

                        //if (Convert.ToInt64(dsView.Tables[0].Rows[0]["Authorized_By"]) > 0)
                        //    btnAuthorize.Enabled = false;
                    }
                    if (dsView.Tables.Count > 1)
                    {
                        gvAcountDetails.DataSource = dsView.Tables[1];
                        gvAcountDetails.DataBind();
                    }
                }
            }
            MPE.Show();
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            cvChequeReturnAuthorization.ErrorMessage = strErrorMsgdata + "Unable to view details." + strErrMsgLast;
        }
    }

    #endregion [Link Button Event's]

    #region [Grid Event's]
    bool bolHeaderChk = true;
    protected void grvCheque_RowDataBound(object sender, System.Web.UI.WebControls.GridViewRowEventArgs e)
    {
        try
        {
            if (ObjUserInfo.ProModifyRW == false)
            {
                e.Row.Cells[6].Visible = false;
            }
            if (e.Row.RowType == DataControlRowType.Header)
            {
                //CheckBox chkAllCheques = (CheckBox)grvCheque.HeaderRow.FindControl("chkAllCheques");
                //if (((DataTable)ViewState["DtChequeReturn"]).Rows[0]["BolChkAllStatus"] != DBNull.Value && Convert.ToBoolean(((DataTable)ViewState["DtChequeReturn"]).Rows[0]["BolChkAllStatus"]) == true)
                //    chkAllCheques.Checked = true;
                //else
                //    chkAllCheques.Checked = false;
            }
            else if (e.Row.RowType == DataControlRowType.DataRow)
            {
                CheckBox chkAllCheques = (CheckBox)grvCheque.HeaderRow.FindControl("chkAllCheques");
                if (((DataTable)ViewState["DtChequeReturn"]).Rows[0]["BolChkAllStatus"] != DBNull.Value && Convert.ToBoolean(((DataTable)ViewState["DtChequeReturn"]).Rows[0]["BolChkAllStatus"]) == true)
                    chkAllCheques.Checked = true;
                else
                    chkAllCheques.Checked = false;
                Label lblAmount = e.Row.FindControl("lblAmount") as Label;
                Label lblCharges = e.Row.FindControl("lblCharges") as Label;
                lblAmount.Text = Convert.ToDecimal(string.IsNullOrEmpty(lblAmount.Text) ? "0" : lblAmount.Text).ToString(Utility.SetSuffix());
                lblCharges.Text = Convert.ToDecimal(string.IsNullOrEmpty(lblCharges.Text) ? "0" : lblCharges.Text).ToString(Utility.SetSuffix());
                if (chkAllCheques.Checked == false)
                {
                    bolHeaderChk = false;
                }
            }
        }
        catch (Exception ex)
        {
            cvChequeReturnAuthorization.ErrorMessage = "Unable to bind the records";
            cvChequeReturnAuthorization.IsValid = false;
        }
    }

    protected void grvCheque_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            FunPriGridRowCommand(e);
        }
        catch (Exception ex)
        {
            cvChequeReturnAuthorization.ErrorMessage = "Unable to view the Cheque Return Details";
            cvChequeReturnAuthorization.IsValid = false;
        }
    }

    protected void gvAcountDetails_RowDataBound(object sender, System.Web.UI.WebControls.GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                Label lblChequeAmounts = e.Row.FindControl("lblChequeAmounts") as Label;
                lblChequeAmounts.Text = Convert.ToDecimal(lblChequeAmounts.Text).ToString(Utility.SetSuffix());
            }
        }
        catch (Exception ex)
        {
            cvChequeReturnAuthorization.ErrorMessage = "Unable to bind the records";
            cvChequeReturnAuthorization.IsValid = false;
        }
    }

    #endregion [Grid Event's]

    #region [Check box Event's]

    protected void chkAllCheques_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            FunPriCheckBoxHeaderClick();
            //FunPubSetCurrentCheckedRecord("", ((CheckBox)sender).Checked, true);
            FunPubCheckMonthLock();
        }
        catch (Exception ex)
        {
            cvChequeReturnAuthorization.ErrorMessage = "Unable to check the all records";
            cvChequeReturnAuthorization.IsValid = false;
        }
    }

    protected void chkCheques_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            Label lblChequeNo = ((Label)((GridViewRow)((CheckBox)sender).Parent.Parent).FindControl("lblChequeNo")) as Label;
            Label lblMonthLock = ((Label)((GridViewRow)((CheckBox)sender).Parent.Parent).FindControl("lblMonthLock")) as Label;
            if (Convert.ToBoolean(lblMonthLock.Text) == false)
            {
                FunPubSetCurrentCheckedRecord(lblChequeNo.Text.ToString(), ((CheckBox)sender).Checked, false);

                CheckBox chkAllCheques = (CheckBox)grvCheque.HeaderRow.FindControl("chkAllCheques");
                DataRow[] drlist = ((DataTable)ViewState["DtChequeReturn"]).Select("BolStatus=" + true);
                if ((drlist.Length == ((DataTable)ViewState["DtChequeReturn"]).Rows.Count || ((DataTable)ViewState["DtChequeReturn"]).Rows[0]["BolChkAllStatus"] != DBNull.Value && Convert.ToBoolean(((DataTable)ViewState["DtChequeReturn"]).Rows[0]["BolChkAllStatus"]) == true))
                    chkAllCheques.Checked = true;
                else
                    chkAllCheques.Checked = false;
            }
            else
            {
                Utility.FunShowAlertMsg(this, "Month has been locked, cannot Authorize/UnAuthorize cheque return.");
                ((CheckBox)sender).Checked = false;
                return;
            }
            FunPubCheckMonthLock();
        }
        catch (Exception ex)
        {
            cvChequeReturnAuthorization.ErrorMessage = "Unable to check the records";
            cvChequeReturnAuthorization.IsValid = false;
        }
    }

    #endregion [Check box Event's]

    #region [DDL Event's]
    protected void ddlLOB_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlLOB.SelectedIndex > 0)
        {
            PopulateBranchList();
        }
        else
        {
            ddlBranch.Clear();
            ddlBranch.SelectedText = "--Select--";
            ddlBranch.SelectedValue = "0";
        }
    }
    #endregion [DDL Event's]

    #endregion [Event's]

    #region [Function's]

    #region [FunPriPageLoad]

    private void FunPriPageLoad()
    {
        try
        {
            this.Title = FunPubGetPageTitles(enumPageTitle.PageTitle);
            FunPubSetIndex(1);

            //Date Format
            S3GSession ObjS3GSession = new S3GSession();
            strDateFormat = ObjS3GSession.ProDateFormatRW;
            CalendarExtender1.Format = CalendarExtender2.Format = strDateFormat;
            //End
            //User Authorization
            bCreate = ObjUserInfo.ProCreateRW;
            bModify = ObjUserInfo.ProModifyRW;
            bQuery = ObjUserInfo.ProViewRW;
            //Code end


            ProPageNumRW = 1;
            TextBox txtPageSize = (TextBox)ucCustomPaging.FindControl("txtPageSize");
            if (txtPageSize.Text != "")
                ProPageSizeRW = Convert.ToInt32(txtPageSize.Text);
            else
                ProPageSizeRW = Convert.ToInt32(ConfigurationManager.AppSettings.Get("GridPageSize"));

            PageAssignValue obj = new PageAssignValue(this.AssignValue);
            ucCustomPaging.callback = obj;
            ucCustomPaging.ProPageNumRW = ProPageNumRW;
            ucCustomPaging.ProPageSizeRW = ProPageSizeRW;


            if (intCompanyID == 0)
                intCompanyID = ObjUserInfo.ProCompanyIdRW;
            if (intUserID == 0)
                intUserID = ObjUserInfo.ProUserIdRW;

            txtFromDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtFromDate.ClientID + "','" + strDateFormat + "',true,  false);");
            txtToDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtToDate.ClientID + "','" + strDateFormat + "',true,  false);");

            if (!IsPostBack)
            {
                //PopulateBranchList();
                PopulateLOBList();
                btnAuthorize.Style.Add("Display", "none");
                btnUnAuthorize.Style.Add("Display", "none");
                //btnAuthorize.Enabled = btnUnAuthorize.Enabled = false;
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    #endregion [FunPriPageLoad]

    #region "LOB/Branch Listing"

    private void PopulateBranchList()
    {
        try
        {
            //Procparam = new Dictionary<string, string>();
            //Procparam.Add("@Is_Active", "1");
            //Procparam.Add("@User_ID", intUserID.ToString());
            //Procparam.Add("@Company_ID", intCompanyID.ToString());
            //Procparam.Add("@LOB_ID", ddlLOB.SelectedValue.ToString());
            //ddlBranch.BindDataTable(SPNames.BranchMaster_LIST, Procparam, new string[] { "Location_ID", "Location_Code", "Location_Name" });
            //ddlBranch.AddItemToolTip();
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    private void PopulateLOBList()
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
            Procparam.Add("@User_ID", Convert.ToString(intUserID));
            Procparam.Add("@Is_Active", "1");
            Procparam.Add("@Program_ID", "104");
            ddlLOB.BindDataTable(SPNames.LOBMaster, Procparam, new string[] { "LOB_ID", "LOB_Code", "LOB_Name" });
            ddlLOB.Items.RemoveAt(0); //By Siva.K
            ddlBranch.SelectedText = "--Select--";
            ddlBranch.SelectedValue = "0";
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    #endregion

    #region [FunPriCheckBoxHeaderClick]

    private void FunPriCheckBoxHeaderClick()
    {
        try
        {
            strSelect.Append("<Root>");
            string strRegionID = string.Empty;
            if (!((CheckBox)grvCheque.HeaderRow.FindControl("chkAllCheques")).Checked)
            {
                foreach (GridViewRow grRow in grvCheque.Rows)
                {
                    CheckBox chkCheques = ((CheckBox)grRow.FindControl("chkCheques"));
                    Label lblChequeNo = ((Label)grRow.FindControl("lblChequeNo"));
                    chkCheques.Checked = false;
                    FunPubSetCurrentCheckedRecord(lblChequeNo.Text.ToString(), false, false);
                }
                return;
            }
            else
            {
                foreach (GridViewRow grRow in grvCheque.Rows)
                {
                    CheckBox chkCheques = ((CheckBox)grRow.FindControl("chkCheques"));
                    Label lblChequeNo = ((Label)grRow.FindControl("lblChequeNo"));
                    Label lblMonthlock = ((Label)grRow.FindControl("lblMonthLock"));
                    if (Convert.ToBoolean(lblMonthlock.Text) == false)
                    {
                        chkCheques.Checked = true;
                        FunPubSetCurrentCheckedRecord(lblChequeNo.Text.ToString(), true, false);
                    }
                    else
                    {
                        Utility.FunShowAlertMsg(this, "Month has been locked, cannot be processed.");
                    }
                }
                return;
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    #endregion [FunPriCheckBoxHeaderClick]

    #region [FunPriGridRowCommand]

    private void FunPriGridRowCommand(GridViewCommandEventArgs e)
    {
        try
        {
            System.Web.Security.FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket(e.CommandArgument.ToString(), false, 0);
            switch (e.CommandName.ToLower())
            {
                case "View":
                    string strScipt = "window.open('../Collection/S3GClnChequeReturn_Add.aspx?qsViewId=" + FormsAuthentication.Encrypt(Ticket) + "&qsMode=Q', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strScipt, true);
                    break;
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    #endregion [FunPriGridRowCommand]

    #region [FunPriButtonOkClick]

    private void FunPriButtonOkClick()
    {
        try
        {
            DataTable dtTable = new DataTable();

            int intTotalRecords = 0;
            ObjPaging.ProCompany_ID = intCompanyID;
            ObjPaging.ProTotalRecords = intTotalRecords;
            ObjPaging.ProCurrentPage = ProPageNumRW;
            ObjPaging.ProPageSize = ProPageSizeRW;
            ObjPaging.ProUser_ID = intUserID;
            ObjPaging.ProSearchValue = Convert.ToString(ddlChequeReturnStatus.SelectedValue);

            Procparam = new Dictionary<string, string>();
            Procparam.Add("@LOB_ID", ddlLOB.SelectedValue);
           // if (ddlBranch.SelectedText != "" && ddlBranch.SelectedValue != "") //By Siva.K 17JUN2015 Location Optional
            Procparam.Add("@Location_ID", ddlBranch.SelectedValue);
            if (txtFromDate.Text != "")
            {
                Procparam.Add("@StartDate", Utility.StringToDate(txtFromDate.Text).ToString());
                Procparam.Add("@EndTime", Utility.StringToDate(txtToDate.Text).ToString());
            }
            if (ddlCustomerName.SelectedText != "" && ddlCustomerName.SelectedValue !="") //By Siva.K 17JUN2015 Lessee
                Procparam.Add("@Customer_ID", Convert.ToString(ddlCustomerName.SelectedValue));
            dtTable = Utility.GetGridData(SPNames.S3G_CLN_GetChequeDetailsforAuthorization, Procparam, out intTotalRecords, ObjPaging);
            if (ViewState["DtChequeReturn"] == null || ((DataTable)ViewState["DtChequeReturn"]) == null || ((DataTable)ViewState["DtChequeReturn"]).Rows.Count == 0)
                ViewState["DtChequeReturn"] = dtTable;
            else
            {
                dtTable = FunPubSetSelectedRows(dtTable);
                ViewState["DtChequeReturn"] = Union(((DataTable)ViewState["DtChequeReturn"]), dtTable);
                //((DataTable)ViewState["DtChequeReturn"]).Merge(dtTable, true, MissingSchemaAction.Ignore);
                //var a = from v in ((DataTable)ViewState["DtChequeReturn"]).AsEnumerable()
                //        select v;

                //ViewState["DtChequeReturn"] = dtTable;
            }
            if (dtTable.Rows.Count == 0)
            {
                DataRow dr = dtTable.NewRow();
                dr["Cheque_Return_Advice_No"] = "0";
                dr["Cheque_Return_Advice_Date"] = DateTime.Now;
                dr["Created_On"] = DateTime.Now;
                dr["BolStatus"] = false;
                dtTable.Rows.Add(dr);
            }
            // dtTable = Utility.GetDefaultData(SPNames.S3G_CLN_GetChequeDetailsforAuthorization, Procparam);
            pnlCheque.Style.Add("Display", "block");

            grvCheque.DataSource = dtTable;
            grvCheque.DataBind();
            ucCustomPaging.Navigation(intTotalRecords, ProPageNumRW, ProPageSizeRW);

            ucCustomPaging.setPageSize(ProPageSizeRW);
            btnAuthorize.Style.Add("Display", "block");
            btnUnAuthorize.Style.Add("Display", "block");
            //  btnAuthorize.Enabled = btnUnAuthorize.Enabled = true;
            if (dtTable.Rows.Count > 0)
            {
                if (intTotalRecords == 0)
                {
                    grvCheque.Rows[0].Visible = false;
                    // btnAuthorize.Enabled = btnUnAuthorize.Enabled = false;
                    btnAuthorize.Style.Add("Display", "none");
                    btnUnAuthorize.Style.Add("Display", "none");
                    grvCheque.Columns[7].Visible = false;
                }
                else
                {
                    grvCheque.Columns[7].Visible = true;
                    if (ddlChequeReturnStatus.SelectedValue == "Authorized")
                    {
                        btnAuthorize.Style.Add("Display", "none");
                        btnUnAuthorize.Style.Add("Display", "block");
                    }
                    else if (ddlChequeReturnStatus.SelectedValue == "Unauthorized")
                    {
                        btnAuthorize.Style.Add("Display", "block");
                        btnUnAuthorize.Style.Add("Display", "none");
                    }
                }
            }
            if (ObjUserInfo.ProModifyRW == false)
            {
                //btnAuthorize.Enabled = btnUnAuthorize.Enabled = false;
                btnAuthorize.Style.Add("Display", "none");
                btnUnAuthorize.Style.Add("Display", "none");
            }
            if (dtTable.Rows.Count > 0 && intTotalRecords > 0)
                FunPubCheckMonthLock();
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    public static DataTable Union(DataTable dtExisting, DataTable dtCurrent)
    {
        foreach (DataRow drCurrent in dtCurrent.Rows)
        {
            DataRow[] drrow = dtExisting.Select("Cheque_Return_Advice_No='" + drCurrent["Cheque_Return_Advice_No"].ToString() + "'");
            if (drrow == null || drrow.Length == 0)
            {
                dtExisting.ImportRow(drCurrent);
            }
        }
        return dtExisting;
    }


    public void FunPubCheckMonthLock()
    {
        bool monthlocks = false;
        int intSelectCount = 0;
        foreach (GridViewRow gvr in grvCheque.Rows)
        {
            if (Convert.ToBoolean(((Label)gvr.FindControl("lblMonthLock")).Text) == true)
            {
                ((CheckBox)gvr.FindControl("chkCheques")).Checked = false;
                monthlocks = true;
            }
            if (((CheckBox)gvr.FindControl("chkCheques")).Checked == true)
                intSelectCount++;
        }
        if (monthlocks == true || intSelectCount != grvCheque.Rows.Count)
        {
            ((CheckBox)grvCheque.HeaderRow.FindControl("chkAllCheques")).Checked = false;
        }
        else if (intSelectCount == grvCheque.Rows.Count)
        {
            ((CheckBox)grvCheque.HeaderRow.FindControl("chkAllCheques")).Checked = true;
        }
    }

    public DataTable FunPubSetSelectedRows(DataTable dtCurrent)
    {
        if (ViewState["DtChequeReturn"] != null || ((DataTable)ViewState["DtChequeReturn"]) != null || ((DataTable)ViewState["DtChequeReturn"]).Rows.Count > 0)
        {
            if (dtCurrent.Rows.Count > 0)
            {
                foreach (DataRow dr in dtCurrent.Rows)
                {
                    DataRow[] drcol = ((DataTable)ViewState["DtChequeReturn"]).Select("Cheque_Return_Advice_No='" + Convert.ToString(dr["Cheque_Return_Advice_No"]) + "'");
                    if (drcol != null && drcol.Length > 0 && Convert.ToBoolean(drcol[0]["BolStatus"]) == true)
                    {
                        dr.BeginEdit();
                        dr["BolStatus"] = true;
                        dr.AcceptChanges();
                    }
                }
            }
        }
        DataRow[] drcount = dtCurrent.Select("BolStatus=true");
        DataTable dtViewTable = ((DataTable)ViewState["DtChequeReturn"]);
        if (drcount.Length == dtCurrent.Rows.Count)
        {
            dtViewTable.Rows[0].BeginEdit();
            dtViewTable.Rows[0]["BolChkAllStatus"] = true;
            dtViewTable.Rows[0].EndEdit();
            dtViewTable.Rows[0].AcceptChanges();
        }
        else
        {
            dtViewTable.Rows[0].BeginEdit();
            dtViewTable.Rows[0]["BolChkAllStatus"] = false;
            dtViewTable.Rows[0].EndEdit();
            dtViewTable.Rows[0].AcceptChanges();
        }
        return dtCurrent;
    }

    public void FunPubSetCurrentCheckedRecord(string strChequeReturnNo, bool bolChecked, bool bolChkAll)
    {
        if (ViewState["DtChequeReturn"] != null && ((DataTable)ViewState["DtChequeReturn"]) != null && ((DataTable)ViewState["DtChequeReturn"]).Rows.Count > 0)
        {
            if (bolChkAll == false)
            {
                DataRow[] drcol = ((DataTable)ViewState["DtChequeReturn"]).Select("Cheque_Return_Advice_No='" + strChequeReturnNo + "'");
                if (drcol != null)
                {
                    drcol[0].BeginEdit();
                    drcol[0]["BolStatus"] = bolChecked;
                    drcol[0].AcceptChanges();
                }
            }
            else
            {
                foreach (GridViewRow gvr in grvCheque.Rows)
                {
                    Label lblChequeNo = gvr.FindControl("lblChequeNo") as Label;
                    DataRow[] drcol = ((DataTable)ViewState["DtChequeReturn"]).Select("Cheque_Return_Advice_No='" + lblChequeNo.Text.ToString() + "'");
                    if (drcol != null)
                    {
                        drcol[0].BeginEdit();
                        drcol[0]["BolStatus"] = bolChecked;
                        drcol[0].AcceptChanges();
                    }
                }
            }
        }
    }

    #endregion [FunPriButtonOkClick]

    #region [FunPriButtonAuthorizeClick]

    private void FunPriButtonAuthorizeClick()
    {
        try
        {
            intStatus = 1;
            FunXMLValues();
            if (intAuthorizedCount == 0)
            {
                Utility.FunShowAlertMsg(this.Page, "No record is selected for authorize.");
                return;
            }
            objClnCheque_Client = new ClnReceiptMgtServicesReference.ClnReceiptMgtServicesClient();

            objChequeDataTable = new S3GBusEntity.Collection.ClnReceiptMgtServices.S3G_CLN_ChequeAuthorizationDataTable();
            objChequeRow = objChequeDataTable.NewS3G_CLN_ChequeAuthorizationRow();
            objChequeRow.XMLListValues = strAuthorize.ToString();
            objChequeRow.User_ID = intUserID;
            objChequeDataTable.AddS3G_CLN_ChequeAuthorizationRow(objChequeRow);
            intErrCode = objClnCheque_Client.FunPubChequeAuthorization(ObjSerMode, ClsPubSerialize.Serialize(objChequeDataTable, ObjSerMode));

            if (intErrCode == 0)
            {

                //To avoid double save click
                btnAuthorize.Enabled = false;
                //End here

                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, "alert('Selected Cheques Authorized successfully');" + strRedirectPageAdd, true);
            }
            else if (intErrCode == 1)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, "alert('Selected Cheques Authorized,cannot modify');" + strRedirectPageAdd, true);
            }
            else if (intErrCode == 2)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, "alert('Selected Cheques cancelled,cannot modify');" + strRedirectPageAdd, true);
            }
            else if (intErrCode == 15) //Aded by Tamilselvan.S on 16/05/2011
            {
                Utility.FunShowAlertMsg(this.Page, "Memo master not defined.");
                return;
            }
            else
            {
                if ((intErrCode == 51) | (intErrCode == 52) || (intErrCode == 53) || (intErrCode == 120) || (intErrCode == 141))
                {
                    Utility.FunShowValidationMsg(this.Page, "", intErrCode);
                    return;
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, "alert('Error in authorizing cheques');" + strRedirectPageAdd, true);
                }
            }
        }
        catch (FaultException<ClnReceiptMgtServicesReference.ClsPubFaultException> ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
        finally
        {
            if (objClnCheque_Client != null)
            {
                objClnCheque_Client.Close();
                objChequeDataTable.Dispose();
            }
        }
    }

    #endregion [FunPriButtonAuthorizeClick]

    #region [FunPriButtonUnAuthorizeClick]

    private void FunPriButtonUnAuthorizeClick()
    {
        try
        {
            intStatus = 2;
            FunXMLValues();
            if (intUnauthorizedCount == 0)
            {
                Utility.FunShowAlertMsg(this.Page, "No record is selected for UnAuthorize.");
                return;
            }
            objClnCheque_Client = new ClnReceiptMgtServicesReference.ClnReceiptMgtServicesClient();

            objChequeDataTable = new S3GBusEntity.Collection.ClnReceiptMgtServices.S3G_CLN_ChequeAuthorizationDataTable();
            objChequeRow = objChequeDataTable.NewS3G_CLN_ChequeAuthorizationRow();
            objChequeRow.XMLListValues = strAuthorize.ToString();
            objChequeRow.User_ID = intUserID;
            objChequeDataTable.AddS3G_CLN_ChequeAuthorizationRow(objChequeRow);

            intErrCode = objClnCheque_Client.FunPubChequeAuthorization(ObjSerMode, ClsPubSerialize.Serialize(objChequeDataTable, ObjSerMode));
            if (intErrCode == 0)
            {

                //To avoid double save click
                btnUnAuthorize.Enabled = false;
                //End here

                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, "alert('Selected Cheque Return/s Unauthorized successfully');" + strRedirectPageAdd, true);
            }
            else if (intErrCode == 1)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, "alert('Selected Cheque Return/s Authorized,cannot modify');" + strRedirectPageAdd, true);
            }
            else if (intErrCode == 2)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, "alert('Selected Cheques cancelled,cannot modify');" + strRedirectPageAdd, true);
            }
            else
            {// Adding Error Message for Followup entry failed 141
                if ((intErrCode == 50) || (intErrCode == 51) || (intErrCode == 52) || (intErrCode == 53) || (intErrCode == 120) || (intErrCode == 141))
                {
                    Utility.FunShowValidationMsg(this.Page, "", intErrCode);
                    return;
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, "alert('Error in unauthorizing cheques');" + strRedirectPageAdd, true);
                }
            }
        }
        catch (FaultException<ClnReceiptMgtServicesReference.ClsPubFaultException> ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
        finally
        {
            if (objClnCheque_Client != null)
            {
                objClnCheque_Client.Close();
                objChequeDataTable.Dispose();
            }
        }
    }

    #endregion [FunPriButtonUnAuthorizeClick]

    private bool FunPriValidateFromEndDate()
    {
        try
        {
            DateTimeFormatInfo dtformat = new DateTimeFormatInfo();
            dtformat.ShortDatePattern = "MM/dd/yy";

            if ((!(string.IsNullOrEmpty(txtFromDate.Text))) && (!(string.IsNullOrEmpty(txtToDate.Text))))                                   // If start and end date is not empty
            {
                if (Utility.StringToDate(txtFromDate.Text) > Utility.StringToDate(txtToDate.Text)) // start date should be less than or equal to the enddate
                {
                    Utility.FunShowAlertMsg(this, "End date should not be less than the Start Date");
                    return false;
                }
            }
            // start date is not empty and end date is empty
            if ((!(string.IsNullOrEmpty(txtFromDate.Text))) && ((string.IsNullOrEmpty(txtToDate.Text))))
            {
                txtToDate.Text = DateTime.Parse(DateTime.Now.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);

            }
            //else if (((string.IsNullOrEmpty(DateTime.Parse(txtStartDateSearch.Text, dtformat).ToString())))
            //      &&
            //    (!(string.IsNullOrEmpty(DateTime.Parse(txtEndDateSearch.Text, dtformat).ToString()))))                              // end date is not empty and start date is empty
            if (((string.IsNullOrEmpty(txtFromDate.Text))) && (!(string.IsNullOrEmpty(txtToDate.Text))))
            {
                txtFromDate.Text = DateTime.Parse(txtToDate.Text, CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
        return true;
    }

    protected void FunXMLValues()
    {
        try
        {
            string strChequeNo = string.Empty;
            strAuthorize = new StringBuilder();
            strAuthorize.Append("<Root>");

            if (intStatus == 1)
            {
                foreach (DataRow dr in ((DataTable)ViewState["DtChequeReturn"]).Rows)
                {
                    if ((dr["Status"] == DBNull.Value || Convert.ToString(dr["Status"]).ToLower() == "unauthorized") && Convert.ToBoolean(dr["BolStatus"]) == true)
                    {
                        strChequeNo = dr["Cheque_Return_Advice_No"].ToString();
                        strAuthorize.Append("<Details Cheque_Return_No='" + strChequeNo + "' Advice_Status='" + "Authorized" + "' Auth_User_ID='" + intUserID.ToString() + "' /> ");
                        intAuthorizedCount += 1;
                    }
                }
            }
            else if (intStatus == 2)
            {
                foreach (DataRow dr in ((DataTable)ViewState["DtChequeReturn"]).Rows)
                {
                    if (Convert.ToString(dr["Status"]).ToLower() == "authorized" && Convert.ToBoolean(dr["BolStatus"]) == true)
                    {
                        strChequeNo = dr["Cheque_Return_Advice_No"].ToString();
                        strAuthorize.Append("<Details Cheque_Return_No='" + strChequeNo + "' Advice_Status='" + "Unauthorized" + "' Auth_User_ID='" + intUserID.ToString() + "' /> ");
                        intUnauthorizedCount += 1;
                    }
                }
            }
            strAuthorize.Append("</Root>");

            //foreach (GridViewRow grRow in grvCheque.Rows)
            //{
            //    if (((CheckBox)grRow.FindControl("chkCheques")).Checked == true)
            //    {
            //        if (intStatus == 1)
            //        {
            //            foreach (DataRow dr in ((DataTable)ViewState["DtChequeReturn"]).Rows)
            //            {
            //                if ((((Label)grRow.FindControl("lblStatus")).Text.ToLower() == "unauthorized" || ((Label)grRow.FindControl("lblStatus")).Text == string.Empty
            //                    ) && Convert.ToBoolean(dr["BolStatus"]) == true)
            //                {
            //                    strChequeNo = dr["Cheque_Return_Advice_No"].ToString();
            //                    strAuthorize.Append("<Details Cheque_Return_No='" + strChequeNo + "' Advice_Status='" + "authorized" + "' Auth_User_ID='" + intUserID.ToString() + "' /> ");
            //                    intAuthorizedCount += 1;
            //                }
            //            }

            //            //if (((Label)grRow.FindControl("lblStatus")).Text.ToLower() == "unauthorized" || ((Label)grRow.FindControl("lblStatus")).Text == string.Empty)
            //            //{
            //            //    strChequeNo = ((Label)grRow.FindControl("lblChequeNo")).Text;
            //            //    strAuthorize.Append("<Details Cheque_Return_No='" + strChequeNo + "' Advice_Status='" + "authorized" + "' Auth_User_ID='" + intUserID.ToString() + "' /> ");
            //            //    intAuthorizedCount += 1;
            //            //}
            //        }
            //        else if (intStatus == 2)
            //        {
            //            if (((Label)grRow.FindControl("lblStatus")).Text.ToLower() == "authorized")
            //            {
            //                strChequeNo = ((Label)grRow.FindControl("lblChequeNo")).Text;
            //                strAuthorize.Append("<Details Cheque_Return_No='" + strChequeNo + "' Advice_Status='" + " unauthorized " + "' Auth_User_ID='" + intUserID.ToString() + "' /> ");
            //                intUnauthorizedCount += 1;
            //            }
            //        }
            //    }
            //}
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    private bool FunPriCheckSelectedItems()
    {
        bool blnStatus = false;
        foreach (GridViewRow gvr in grvCheque.Rows)
        {
            if (((CheckBox)gvr.FindControl("chkCheques")).Checked == true)
            {
                blnStatus = true;
                break;
            }
        }
        return blnStatus;
    }

    #region  DateFormat
    /// <summary>
    /// Created by Tamilselvan.S
    /// Created Date 5/04/2011
    /// </summary>
    /// <param name="strDate"></param>
    /// <returns></returns>
    public string FormatDate(string strDate)
    {
        return DateTime.Parse(strDate, CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
    }

    #endregion

    public void FunPubResetGrid()
    {

    }

    public void FunPubClearGrid()
    {
        grvCheque.DataSource = null;
        grvCheque.DataBind();
    }

    public void FunPubClearMPEControls()
    {
        caCustomerInfo.ClearCustomerDetails();
        lblpLob.Text = string.Empty;
        lblpBranch.Text = string.Empty;
        lblpReceiptNumber.Text = string.Empty;
        lblpChequeNumber.Text = string.Empty;
        lblpChequeReturnNumber.Text = string.Empty;
        lblpDocumentDate.Text = string.Empty;
        lblpChequeReturnValueDate.Text = string.Empty;
        lblDepositBank.Text = string.Empty;
        lblBankAccNo.Text = string.Empty;
        lblChequeAmount.Text = string.Empty;
        lblBankCharges.Text = string.Empty;
        lblBankAdviceNumber.Text = string.Empty;
        lblReasonforReturn.Text = string.Empty;
        lblpAuthorizedBy.Text = string.Empty;
        lblpAuthorizedDate.Text = string.Empty;
        //Code Added by saran for UAT Fix on 19-Jul-2012 start
        if (gvAcountDetails != null)
        {
            gvAcountDetails.DataSource = null;
            gvAcountDetails.DataBind();
        }
    }
    protected void ddlBranch_SelectedIndexChanged(object sender, EventArgs e) {
        ScriptManager.RegisterClientScriptBlock(this, this.GetType(), new Guid().ToString(), "FunResetGrid();", true);
    }
    [System.Web.Services.WebMethod]
    public static string[] GetBranchList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();
        UserInfo ufo = new UserInfo();

        Procparam.Clear();
        Procparam.Add("@Company_ID", ufo.ProCompanyIdRW.ToString());
        Procparam.Add("@Type", "GEN");
        Procparam.Add("@User_ID", ufo.ProUserIdRW.ToString());
        Procparam.Add("@Program_Id", "104");
        Procparam.Add("@Lob_Id", obj_Page.ddlLOB.SelectedValue);
        Procparam.Add("@Is_Active", "1");
        Procparam.Add("@PrefixText", prefixText);
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData(SPNames.S3G_SA_GET_BRANCHLIST, Procparam));

        return suggetions.ToArray();
    }
    //By Siva.K on 17JUN2015
    [System.Web.Services.WebMethod]
    public static string[] GetCustomerList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        UserInfo ufo = new UserInfo();
        Procparam.Clear();
        Procparam.Add("@PrefixText", prefixText);
        Procparam.Add("@Company_Id", ufo.ProCompanyIdRW.ToString());
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_LoanAd_GetCustomer_AGT", Procparam));
        return suggetions.ToArray();
    }
    #endregion [Function's]

}
